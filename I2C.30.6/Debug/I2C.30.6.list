
I2C.30.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005690  08005690  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005690  08005690  00015690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005698  08005698  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800569c  0800569c  0001569c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  080056a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200000b8  08005758  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08005758  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c80  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002638  00000000  00000000  00034d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  000385b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028343  00000000  00000000  000396d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015786  00000000  00000000  00061a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a77  00000000  00000000  000771a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dc18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005490  00000000  00000000  0016dc68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800557c 	.word	0x0800557c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800557c 	.word	0x0800557c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:
char days[7][10] =  { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
char read[20];
const char s[2] = ",";
char *token;

int _write(int fd, char* ptr, int len) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f003 fb3a 	bl	8003c04 <HAL_UART_Transmit>
    return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000190 	.word	0x20000190

080005a0 <HAL_TIM_PeriodElapsedCallback>:
	cmdprint = 0;
	return 1;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * tim)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af04      	add	r7, sp, #16
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0, 1, readBuff, 8, 0xff);
 80005a8:	23ff      	movs	r3, #255	; 0xff
 80005aa:	9302      	str	r3, [sp, #8]
 80005ac:	2308      	movs	r3, #8
 80005ae:	9301      	str	r3, [sp, #4]
 80005b0:	4b6d      	ldr	r3, [pc, #436]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005b2:	9300      	str	r3, [sp, #0]
 80005b4:	2301      	movs	r3, #1
 80005b6:	2200      	movs	r2, #0
 80005b8:	21d0      	movs	r1, #208	; 0xd0
 80005ba:	486c      	ldr	r0, [pc, #432]	; (800076c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80005bc:	f001 f860 	bl	8001680 <HAL_I2C_Mem_Read>
	// Calculating seconds
	first_sec = readBuff[0] & 15;
 80005c0:	4b69      	ldr	r3, [pc, #420]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	f003 030f 	and.w	r3, r3, #15
 80005c8:	b2da      	uxtb	r2, r3
 80005ca:	4b69      	ldr	r3, [pc, #420]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005cc:	701a      	strb	r2, [r3, #0]
	last_sec = readBuff[0] >> 4;
 80005ce:	4b66      	ldr	r3, [pc, #408]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	091b      	lsrs	r3, r3, #4
 80005d4:	b2da      	uxtb	r2, r3
 80005d6:	4b67      	ldr	r3, [pc, #412]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005d8:	701a      	strb	r2, [r3, #0]
	seconds = first_sec + (last_sec*10);
 80005da:	4b66      	ldr	r3, [pc, #408]	; (8000774 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	461a      	mov	r2, r3
 80005e0:	0092      	lsls	r2, r2, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b61      	ldr	r3, [pc, #388]	; (8000770 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4413      	add	r3, r2
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b61      	ldr	r3, [pc, #388]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80005f2:	701a      	strb	r2, [r3, #0]
	// Calculating minutes
	first_min = readBuff[1] & 15;
 80005f4:	4b5c      	ldr	r3, [pc, #368]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b5f      	ldr	r3, [pc, #380]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000600:	701a      	strb	r2, [r3, #0]
	last_min = readBuff[1] >> 4;
 8000602:	4b59      	ldr	r3, [pc, #356]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	091b      	lsrs	r3, r3, #4
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b5d      	ldr	r3, [pc, #372]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800060c:	701a      	strb	r2, [r3, #0]
	minutes = first_min +(last_min*10);
 800060e:	4b5c      	ldr	r3, [pc, #368]	; (8000780 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	461a      	mov	r2, r3
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	4413      	add	r3, r2
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b57      	ldr	r3, [pc, #348]	; (800077c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	4413      	add	r3, r2
 8000622:	b2da      	uxtb	r2, r3
 8000624:	4b57      	ldr	r3, [pc, #348]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000626:	701a      	strb	r2, [r3, #0]
	// Calculating minutes
	first_hr = readBuff[2] & 15;
 8000628:	4b4f      	ldr	r3, [pc, #316]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	f003 030f 	and.w	r3, r3, #15
 8000630:	b2da      	uxtb	r2, r3
 8000632:	4b55      	ldr	r3, [pc, #340]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000634:	701a      	strb	r2, [r3, #0]
	ten_hr = readBuff[2] >> 4;
 8000636:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	091b      	lsrs	r3, r3, #4
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b53      	ldr	r3, [pc, #332]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000640:	701a      	strb	r2, [r3, #0]
	hours = first_hr +(ten_hr*10);
 8000642:	4b52      	ldr	r3, [pc, #328]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	461a      	mov	r2, r3
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	4413      	add	r3, r2
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	b2da      	uxtb	r2, r3
 8000650:	4b4d      	ldr	r3, [pc, #308]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4413      	add	r3, r2
 8000656:	b2da      	uxtb	r2, r3
 8000658:	4b4d      	ldr	r3, [pc, #308]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800065a:	701a      	strb	r2, [r3, #0]
	//// Calculating days
	day = readBuff[3] && 7;
 800065c:	4b42      	ldr	r3, [pc, #264]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800065e:	78db      	ldrb	r3, [r3, #3]
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	461a      	mov	r2, r3
 800066c:	4b49      	ldr	r3, [pc, #292]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800066e:	701a      	strb	r2, [r3, #0]
	// Calculating Date
	first_dt = readBuff[4] & 15;
 8000670:	4b3d      	ldr	r3, [pc, #244]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	f003 030f 	and.w	r3, r3, #15
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b47      	ldr	r3, [pc, #284]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800067c:	701a      	strb	r2, [r3, #0]
	last_dt = readBuff[4] >> 4;
 800067e:	4b3a      	ldr	r3, [pc, #232]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	091b      	lsrs	r3, r3, #4
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b45      	ldr	r3, [pc, #276]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000688:	701a      	strb	r2, [r3, #0]
	date = first_dt + (last_dt*10);
 800068a:	4b44      	ldr	r3, [pc, #272]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	0092      	lsls	r2, r2, #2
 8000692:	4413      	add	r3, r2
 8000694:	005b      	lsls	r3, r3, #1
 8000696:	b2da      	uxtb	r2, r3
 8000698:	4b3f      	ldr	r3, [pc, #252]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4413      	add	r3, r2
 800069e:	b2da      	uxtb	r2, r3
 80006a0:	4b3f      	ldr	r3, [pc, #252]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80006a2:	701a      	strb	r2, [r3, #0]
	// Calculating month
	first_mn = readBuff[5] && 15;
 80006a4:	4b30      	ldr	r3, [pc, #192]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006a6:	795b      	ldrb	r3, [r3, #5]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	bf14      	ite	ne
 80006ac:	2301      	movne	r3, #1
 80006ae:	2300      	moveq	r3, #0
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	461a      	mov	r2, r3
 80006b4:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80006b6:	701a      	strb	r2, [r3, #0]
	last_mn = readBuff[5] >>4;
 80006b8:	4b2b      	ldr	r3, [pc, #172]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006ba:	795b      	ldrb	r3, [r3, #5]
 80006bc:	091b      	lsrs	r3, r3, #4
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b39      	ldr	r3, [pc, #228]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80006c2:	701a      	strb	r2, [r3, #0]
	month =  first_mn +(last_mn*10);
 80006c4:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	461a      	mov	r2, r3
 80006ca:	0092      	lsls	r2, r2, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4413      	add	r3, r2
 80006d8:	b2da      	uxtb	r2, r3
 80006da:	4b34      	ldr	r3, [pc, #208]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80006dc:	701a      	strb	r2, [r3, #0]
	// Calculating Year
	first_yr = readBuff[6] && 15;
 80006de:	4b22      	ldr	r3, [pc, #136]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006e0:	799b      	ldrb	r3, [r3, #6]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	bf14      	ite	ne
 80006e6:	2301      	movne	r3, #1
 80006e8:	2300      	moveq	r3, #0
 80006ea:	b2db      	uxtb	r3, r3
 80006ec:	461a      	mov	r2, r3
 80006ee:	4b30      	ldr	r3, [pc, #192]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80006f0:	701a      	strb	r2, [r3, #0]
	last_yr = readBuff[6] >>4;
 80006f2:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006f4:	799b      	ldrb	r3, [r3, #6]
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80006fc:	701a      	strb	r2, [r3, #0]
	year =  first_yr +(last_yr*10);
 80006fe:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	461a      	mov	r2, r3
 8000704:	0092      	lsls	r2, r2, #2
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	b2da      	uxtb	r2, r3
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000716:	701a      	strb	r2, [r3, #0]

	printf("%d:%d:%s:%d:%d:%d:%d\r\n", year, month, days[day-1] ,date, hours, minutes, seconds );
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	461d      	mov	r5, r3
 800071e:	4b23      	ldr	r3, [pc, #140]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	461e      	mov	r6, r3
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	1e5a      	subs	r2, r3, #1
 800072a:	4613      	mov	r3, r2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	4413      	add	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000734:	4413      	add	r3, r2
 8000736:	4a1a      	ldr	r2, [pc, #104]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000738:	7812      	ldrb	r2, [r2, #0]
 800073a:	4611      	mov	r1, r2
 800073c:	4a14      	ldr	r2, [pc, #80]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	4610      	mov	r0, r2
 8000742:	4a10      	ldr	r2, [pc, #64]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000744:	7812      	ldrb	r2, [r2, #0]
 8000746:	4614      	mov	r4, r2
 8000748:	4a0b      	ldr	r2, [pc, #44]	; (8000778 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	9203      	str	r2, [sp, #12]
 800074e:	9402      	str	r4, [sp, #8]
 8000750:	9001      	str	r0, [sp, #4]
 8000752:	9100      	str	r1, [sp, #0]
 8000754:	4632      	mov	r2, r6
 8000756:	4629      	mov	r1, r5
 8000758:	4819      	ldr	r0, [pc, #100]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800075a:	f003 ff81 	bl	8004660 <iprintf>

}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000766:	bf00      	nop
 8000768:	200000d4 	.word	0x200000d4
 800076c:	200000f0 	.word	0x200000f0
 8000770:	200000dc 	.word	0x200000dc
 8000774:	200000dd 	.word	0x200000dd
 8000778:	200000de 	.word	0x200000de
 800077c:	200000df 	.word	0x200000df
 8000780:	200000e0 	.word	0x200000e0
 8000784:	200000e1 	.word	0x200000e1
 8000788:	200000e2 	.word	0x200000e2
 800078c:	200000e3 	.word	0x200000e3
 8000790:	200000e4 	.word	0x200000e4
 8000794:	200000e5 	.word	0x200000e5
 8000798:	200000e6 	.word	0x200000e6
 800079c:	200000e7 	.word	0x200000e7
 80007a0:	200000e8 	.word	0x200000e8
 80007a4:	200000e9 	.word	0x200000e9
 80007a8:	200000ea 	.word	0x200000ea
 80007ac:	200000eb 	.word	0x200000eb
 80007b0:	200000ec 	.word	0x200000ec
 80007b4:	200000ed 	.word	0x200000ed
 80007b8:	200000ee 	.word	0x200000ee
 80007bc:	20000000 	.word	0x20000000
 80007c0:	08005598 	.word	0x08005598

080007c4 <DateTime_Main>:

void DateTime_Main()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
//	int i =0;
//	int val;
	//	uint8_t data[] = { 0 , 0, 0, 1, 1 ,1, 1, 1};

	HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c8:	2036      	movs	r0, #54	; 0x36
 80007ca:	f000 fcec 	bl	80011a6 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Start_IT(&htim6);
 80007ce:	4802      	ldr	r0, [pc, #8]	; (80007d8 <DateTime_Main+0x14>)
 80007d0:	f002 fed2 	bl	8003578 <HAL_TIM_Base_Start_IT>
//
//    		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
//    	    HAL_TIM_Base_Start_IT(&htim6);
//    	}
//    }
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000144 	.word	0x20000144

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e0:	f000 fb6e 	bl	8000ec0 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f80b 	bl	80007fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f902 	bl	80009f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 f8d0 	bl	8000990 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007f0:	f000 f856 	bl	80008a0 <MX_I2C1_Init>
  MX_TIM6_Init();
 80007f4:	f000 f894 	bl	8000920 <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DateTime_Main();
 80007f8:	f7ff ffe4 	bl	80007c4 <DateTime_Main>


  while (1)
 80007fc:	e7fe      	b.n	80007fc <main+0x20>

080007fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b096      	sub	sp, #88	; 0x58
 8000802:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2244      	movs	r2, #68	; 0x44
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f003 ff1f 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000812:	463b      	mov	r3, r7
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000820:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000824:	f001 fb3e 	bl	8001ea4 <HAL_PWREx_ControlVoltageScaling>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800082e:	f000 f945 	bl	8000abc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000832:	2302      	movs	r3, #2
 8000834:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000848:	2301      	movs	r3, #1
 800084a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800084c:	230a      	movs	r3, #10
 800084e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000850:	2307      	movs	r3, #7
 8000852:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000858:	2302      	movs	r3, #2
 800085a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fb75 	bl	8001f50 <HAL_RCC_OscConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800086c:	f000 f926 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000870:	230f      	movs	r3, #15
 8000872:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000874:	2303      	movs	r3, #3
 8000876:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f001 ff3d 	bl	8002708 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000894:	f000 f912 	bl	8000abc <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	; 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <MX_I2C1_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	; (8000918 <MX_I2C1_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ac:	4a1b      	ldr	r2, [pc, #108]	; (800091c <MX_I2C1_Init+0x7c>)
 80008ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_I2C1_Init+0x74>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_I2C1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_I2C1_Init+0x74>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_I2C1_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008da:	480e      	ldr	r0, [pc, #56]	; (8000914 <MX_I2C1_Init+0x74>)
 80008dc:	f000 fe40 	bl	8001560 <HAL_I2C_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008e6:	f000 f8e9 	bl	8000abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ea:	2100      	movs	r1, #0
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <MX_I2C1_Init+0x74>)
 80008ee:	f001 fa33 	bl	8001d58 <HAL_I2CEx_ConfigAnalogFilter>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008f8:	f000 f8e0 	bl	8000abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008fc:	2100      	movs	r1, #0
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_I2C1_Init+0x74>)
 8000900:	f001 fa75 	bl	8001dee <HAL_I2CEx_ConfigDigitalFilter>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f8d7 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000f0 	.word	0x200000f0
 8000918:	40005400 	.word	0x40005400
 800091c:	10909cec 	.word	0x10909cec

08000920 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000926:	1d3b      	adds	r3, r7, #4
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000930:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_TIM6_Init+0x68>)
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <MX_TIM6_Init+0x6c>)
 8000934:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <MX_TIM6_Init+0x68>)
 8000938:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800093c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_TIM6_Init+0x68>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <MX_TIM6_Init+0x68>)
 8000946:	f242 720f 	movw	r2, #9999	; 0x270f
 800094a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <MX_TIM6_Init+0x68>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000952:	480d      	ldr	r0, [pc, #52]	; (8000988 <MX_TIM6_Init+0x68>)
 8000954:	f002 fdb8 	bl	80034c8 <HAL_TIM_Base_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800095e:	f000 f8ad 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4619      	mov	r1, r3
 800096e:	4806      	ldr	r0, [pc, #24]	; (8000988 <MX_TIM6_Init+0x68>)
 8000970:	f003 f854 	bl	8003a1c <HAL_TIMEx_MasterConfigSynchronization>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f89f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000144 	.word	0x20000144
 800098c:	40001000 	.word	0x40001000

08000990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_USART2_UART_Init+0x5c>)
 8000998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009b6:	220c      	movs	r2, #12
 80009b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_USART2_UART_Init+0x58>)
 80009d4:	f003 f8c8 	bl	8003b68 <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009de:	f000 f86d 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000190 	.word	0x20000190
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
 8000a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a1e:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	4a24      	ldr	r2, [pc, #144]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2a:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3a:	4a1e      	ldr	r2, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a52:	4a18      	ldr	r2, [pc, #96]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_GPIO_Init+0xc4>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2120      	movs	r1, #32
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f000 fd5f 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a78:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	480b      	ldr	r0, [pc, #44]	; (8000ab8 <MX_GPIO_Init+0xc8>)
 8000a8a:	f000 fba7 	bl	80011dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a8e:	2320      	movs	r3, #32
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 fb98 	bl	80011dc <HAL_GPIO_Init>

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40021000 	.word	0x40021000
 8000ab8:	48000800 	.word	0x48000800

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 0301 	orr.w	r3, r3, #1
 8000ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6593      	str	r3, [r2, #88]	; 0x58
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b0ac      	sub	sp, #176	; 0xb0
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2288      	movs	r2, #136	; 0x88
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f003 fd8d 	bl	8004650 <memset>
  if(hi2c->Instance==I2C1)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <HAL_I2C_MspInit+0xb0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d13b      	bne.n	8000bb8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b40:	2340      	movs	r3, #64	; 0x40
 8000b42:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b44:	2300      	movs	r3, #0
 8000b46:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f001 ffff 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000b58:	f7ff ffb0 	bl	8000abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	4a18      	ldr	r2, [pc, #96]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000b62:	f043 0302 	orr.w	r3, r3, #2
 8000b66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6c:	f003 0302 	and.w	r3, r3, #2
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b74:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b98:	4619      	mov	r1, r3
 8000b9a:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <HAL_I2C_MspInit+0xb8>)
 8000b9c:	f000 fb1e 	bl	80011dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_I2C_MspInit+0xb4>)
 8000bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb4:	60fb      	str	r3, [r7, #12]
 8000bb6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bb8:	bf00      	nop
 8000bba:	37b0      	adds	r7, #176	; 0xb0
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	40005400 	.word	0x40005400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	48000400 	.word	0x48000400

08000bcc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a0d      	ldr	r2, [pc, #52]	; (8000c10 <HAL_TIM_Base_MspInit+0x44>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d113      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000be2:	4a0c      	ldr	r2, [pc, #48]	; (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000be4:	f043 0310 	orr.w	r3, r3, #16
 8000be8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bea:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <HAL_TIM_Base_MspInit+0x48>)
 8000bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bee:	f003 0310 	and.w	r3, r3, #16
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2036      	movs	r0, #54	; 0x36
 8000bfc:	f000 fab7 	bl	800116e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c00:	2036      	movs	r0, #54	; 0x36
 8000c02:	f000 fad0 	bl	80011a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40001000 	.word	0x40001000
 8000c14:	40021000 	.word	0x40021000

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0ac      	sub	sp, #176	; 0xb0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	2288      	movs	r2, #136	; 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f003 fd09 	bl	8004650 <memset>
  if(huart->Instance==USART2)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a21      	ldr	r2, [pc, #132]	; (8000cc8 <HAL_UART_MspInit+0xb0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d13b      	bne.n	8000cc0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	4618      	mov	r0, r3
 8000c56:	f001 ff7b 	bl	8002b50 <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c60:	f7ff ff2c 	bl	8000abc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c68:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c70:	4b16      	ldr	r3, [pc, #88]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7c:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c80:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c88:	4b10      	ldr	r3, [pc, #64]	; (8000ccc <HAL_UART_MspInit+0xb4>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c94:	230c      	movs	r3, #12
 8000c96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cac:	2307      	movs	r3, #7
 8000cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f000 fa8e 	bl	80011dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cc0:	bf00      	nop
 8000cc2:	37b0      	adds	r7, #176	; 0xb0
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40004400 	.word	0x40004400
 8000ccc:	40021000 	.word	0x40021000

08000cd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <NMI_Handler+0x4>

08000cd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <HardFault_Handler+0x4>

08000cdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <MemManage_Handler+0x4>

08000ce2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	e7fe      	b.n	8000cec <UsageFault_Handler+0x4>

08000cee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1c:	f000 f92c 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d28:	4802      	ldr	r0, [pc, #8]	; (8000d34 <TIM6_DAC_IRQHandler+0x10>)
 8000d2a:	f002 fc95 	bl	8003658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20000144 	.word	0x20000144

08000d38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	60f8      	str	r0, [r7, #12]
 8000d40:	60b9      	str	r1, [r7, #8]
 8000d42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	e00a      	b.n	8000d60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d4a:	f3af 8000 	nop.w
 8000d4e:	4601      	mov	r1, r0
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	1c5a      	adds	r2, r3, #1
 8000d54:	60ba      	str	r2, [r7, #8]
 8000d56:	b2ca      	uxtb	r2, r1
 8000d58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697a      	ldr	r2, [r7, #20]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	dbf0      	blt.n	8000d4a <_read+0x12>
	}

return len;
 8000d68:	687b      	ldr	r3, [r7, #4]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
	return -1;
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	b083      	sub	sp, #12
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
 8000d92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_isatty>:

int _isatty(int file)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	return 1;
 8000db2:	2301      	movs	r3, #1
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
	return 0;
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3714      	adds	r7, #20
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
	...

08000ddc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000de4:	4a14      	ldr	r2, [pc, #80]	; (8000e38 <_sbrk+0x5c>)
 8000de6:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <_sbrk+0x60>)
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <_sbrk+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d102      	bne.n	8000dfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <_sbrk+0x64>)
 8000dfa:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <_sbrk+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dfe:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d207      	bcs.n	8000e1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e0c:	f003 fbf6 	bl	80045fc <__errno>
 8000e10:	4603      	mov	r3, r0
 8000e12:	220c      	movs	r2, #12
 8000e14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e16:	f04f 33ff 	mov.w	r3, #4294967295
 8000e1a:	e009      	b.n	8000e30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <_sbrk+0x64>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e22:	4b07      	ldr	r3, [pc, #28]	; (8000e40 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	4a05      	ldr	r2, [pc, #20]	; (8000e40 <_sbrk+0x64>)
 8000e2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20018000 	.word	0x20018000
 8000e3c:	00000400 	.word	0x00000400
 8000e40:	20000214 	.word	0x20000214
 8000e44:	20000230 	.word	0x20000230

08000e48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <SystemInit+0x20>)
 8000e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e52:	4a05      	ldr	r2, [pc, #20]	; (8000e68 <SystemInit+0x20>)
 8000e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e70:	f7ff ffea 	bl	8000e48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e74:	480c      	ldr	r0, [pc, #48]	; (8000ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e76:	490d      	ldr	r1, [pc, #52]	; (8000eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e78:	4a0d      	ldr	r2, [pc, #52]	; (8000eb0 <LoopForever+0xe>)
  movs r3, #0
 8000e7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e7c:	e002      	b.n	8000e84 <LoopCopyDataInit>

08000e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e82:	3304      	adds	r3, #4

08000e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e88:	d3f9      	bcc.n	8000e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e8c:	4c0a      	ldr	r4, [pc, #40]	; (8000eb8 <LoopForever+0x16>)
  movs r3, #0
 8000e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e90:	e001      	b.n	8000e96 <LoopFillZerobss>

08000e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e94:	3204      	adds	r2, #4

08000e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e98:	d3fb      	bcc.n	8000e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9a:	f003 fbb5 	bl	8004608 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e9e:	f7ff fc9d 	bl	80007dc <main>

08000ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ea2:	e7fe      	b.n	8000ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ea4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8000eb0:	080056a0 	.word	0x080056a0
  ldr r2, =_sbss
 8000eb4:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8000eb8:	2000022c 	.word	0x2000022c

08000ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <ADC1_2_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eca:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <HAL_Init+0x3c>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a0b      	ldr	r2, [pc, #44]	; (8000efc <HAL_Init+0x3c>)
 8000ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed6:	2003      	movs	r0, #3
 8000ed8:	f000 f93e 	bl	8001158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000edc:	2000      	movs	r0, #0
 8000ede:	f000 f80f 	bl	8000f00 <HAL_InitTick>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d002      	beq.n	8000eee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	e001      	b.n	8000ef2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eee:	f7ff fdeb 	bl	8000ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40022000 	.word	0x40022000

08000f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d023      	beq.n	8000f5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f14:	4b16      	ldr	r3, [pc, #88]	; (8000f70 <HAL_InitTick+0x70>)
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_InitTick+0x6c>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f949 	bl	80011c2 <HAL_SYSTICK_Config>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10f      	bne.n	8000f56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d809      	bhi.n	8000f50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f913 	bl	800116e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f48:	4a0a      	ldr	r2, [pc, #40]	; (8000f74 <HAL_InitTick+0x74>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e007      	b.n	8000f60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	73fb      	strb	r3, [r7, #15]
 8000f54:	e004      	b.n	8000f60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	e001      	b.n	8000f60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000050 	.word	0x20000050
 8000f70:	20000048 	.word	0x20000048
 8000f74:	2000004c 	.word	0x2000004c

08000f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x20>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_IncTick+0x24>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <HAL_IncTick+0x24>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	20000050 	.word	0x20000050
 8000f9c:	20000218 	.word	0x20000218

08000fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <HAL_GetTick+0x14>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000218 	.word	0x20000218

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	2b00      	cmp	r3, #0
 800102c:	db0b      	blt.n	8001046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	f003 021f 	and.w	r2, r3, #31
 8001034:	4907      	ldr	r1, [pc, #28]	; (8001054 <__NVIC_EnableIRQ+0x38>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f202 	lsl.w	r2, r0, r2
 8001042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3b01      	subs	r3, #1
 8001120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001124:	d301      	bcc.n	800112a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001126:	2301      	movs	r3, #1
 8001128:	e00f      	b.n	800114a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <SysTick_Config+0x40>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001132:	210f      	movs	r1, #15
 8001134:	f04f 30ff 	mov.w	r0, #4294967295
 8001138:	f7ff ff8e 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <SysTick_Config+0x40>)
 800113e:	2200      	movs	r2, #0
 8001140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SysTick_Config+0x40>)
 8001144:	2207      	movs	r2, #7
 8001146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	e000e010 	.word	0xe000e010

08001158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff ff29 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	4603      	mov	r3, r0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001180:	f7ff ff3e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	68b9      	ldr	r1, [r7, #8]
 800118a:	6978      	ldr	r0, [r7, #20]
 800118c:	f7ff ff8e 	bl	80010ac <NVIC_EncodePriority>
 8001190:	4602      	mov	r2, r0
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff ff5d 	bl	8001058 <__NVIC_SetPriority>
}
 800119e:	bf00      	nop
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff31 	bl	800101c <__NVIC_EnableIRQ>
}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff ffa2 	bl	8001114 <SysTick_Config>
 80011d0:	4603      	mov	r3, r0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
	...

080011dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ea:	e17f      	b.n	80014ec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	2101      	movs	r1, #1
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	4013      	ands	r3, r2
 80011fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f000 8171 	beq.w	80014e6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d005      	beq.n	800121c <HAL_GPIO_Init+0x40>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b02      	cmp	r3, #2
 800121a:	d130      	bne.n	800127e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68da      	ldr	r2, [r3, #12]
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001252:	2201      	movs	r2, #1
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	f003 0201 	and.w	r2, r3, #1
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 0303 	and.w	r3, r3, #3
 8001286:	2b03      	cmp	r3, #3
 8001288:	d118      	bne.n	80012bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001290:	2201      	movs	r2, #1
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	08db      	lsrs	r3, r3, #3
 80012a6:	f003 0201 	and.w	r2, r3, #1
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 0303 	and.w	r3, r3, #3
 80012c4:	2b03      	cmp	r3, #3
 80012c6:	d017      	beq.n	80012f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	2203      	movs	r2, #3
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d123      	bne.n	800134c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	08da      	lsrs	r2, r3, #3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	3208      	adds	r2, #8
 800130c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	f003 0307 	and.w	r3, r3, #7
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	220f      	movs	r2, #15
 800131c:	fa02 f303 	lsl.w	r3, r2, r3
 8001320:	43db      	mvns	r3, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	4313      	orrs	r3, r2
 800133c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	6939      	ldr	r1, [r7, #16]
 8001348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0203 	and.w	r2, r3, #3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	4313      	orrs	r3, r2
 8001378:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80ac 	beq.w	80014e6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138e:	4b5f      	ldr	r3, [pc, #380]	; (800150c <HAL_GPIO_Init+0x330>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	4a5e      	ldr	r2, [pc, #376]	; (800150c <HAL_GPIO_Init+0x330>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6613      	str	r3, [r2, #96]	; 0x60
 800139a:	4b5c      	ldr	r3, [pc, #368]	; (800150c <HAL_GPIO_Init+0x330>)
 800139c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013a6:	4a5a      	ldr	r2, [pc, #360]	; (8001510 <HAL_GPIO_Init+0x334>)
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	089b      	lsrs	r3, r3, #2
 80013ac:	3302      	adds	r3, #2
 80013ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	220f      	movs	r2, #15
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013d0:	d025      	beq.n	800141e <HAL_GPIO_Init+0x242>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4f      	ldr	r2, [pc, #316]	; (8001514 <HAL_GPIO_Init+0x338>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d01f      	beq.n	800141a <HAL_GPIO_Init+0x23e>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4e      	ldr	r2, [pc, #312]	; (8001518 <HAL_GPIO_Init+0x33c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d019      	beq.n	8001416 <HAL_GPIO_Init+0x23a>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4d      	ldr	r2, [pc, #308]	; (800151c <HAL_GPIO_Init+0x340>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d013      	beq.n	8001412 <HAL_GPIO_Init+0x236>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a4c      	ldr	r2, [pc, #304]	; (8001520 <HAL_GPIO_Init+0x344>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d00d      	beq.n	800140e <HAL_GPIO_Init+0x232>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a4b      	ldr	r2, [pc, #300]	; (8001524 <HAL_GPIO_Init+0x348>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d007      	beq.n	800140a <HAL_GPIO_Init+0x22e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a4a      	ldr	r2, [pc, #296]	; (8001528 <HAL_GPIO_Init+0x34c>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_GPIO_Init+0x22a>
 8001402:	2306      	movs	r3, #6
 8001404:	e00c      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001406:	2307      	movs	r3, #7
 8001408:	e00a      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800140a:	2305      	movs	r3, #5
 800140c:	e008      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800140e:	2304      	movs	r3, #4
 8001410:	e006      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001412:	2303      	movs	r3, #3
 8001414:	e004      	b.n	8001420 <HAL_GPIO_Init+0x244>
 8001416:	2302      	movs	r3, #2
 8001418:	e002      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800141a:	2301      	movs	r3, #1
 800141c:	e000      	b.n	8001420 <HAL_GPIO_Init+0x244>
 800141e:	2300      	movs	r3, #0
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	f002 0203 	and.w	r2, r2, #3
 8001426:	0092      	lsls	r2, r2, #2
 8001428:	4093      	lsls	r3, r2
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001430:	4937      	ldr	r1, [pc, #220]	; (8001510 <HAL_GPIO_Init+0x334>)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	3302      	adds	r3, #2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800143e:	4b3b      	ldr	r3, [pc, #236]	; (800152c <HAL_GPIO_Init+0x350>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001462:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_GPIO_Init+0x350>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001468:	4b30      	ldr	r3, [pc, #192]	; (800152c <HAL_GPIO_Init+0x350>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <HAL_GPIO_Init+0x350>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <HAL_GPIO_Init+0x350>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014b6:	4a1d      	ldr	r2, [pc, #116]	; (800152c <HAL_GPIO_Init+0x350>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014bc:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_GPIO_Init+0x350>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e0:	4a12      	ldr	r2, [pc, #72]	; (800152c <HAL_GPIO_Init+0x350>)
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	fa22 f303 	lsr.w	r3, r2, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f47f ae78 	bne.w	80011ec <HAL_GPIO_Init+0x10>
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	40010000 	.word	0x40010000
 8001514:	48000400 	.word	0x48000400
 8001518:	48000800 	.word	0x48000800
 800151c:	48000c00 	.word	0x48000c00
 8001520:	48001000 	.word	0x48001000
 8001524:	48001400 	.word	0x48001400
 8001528:	48001800 	.word	0x48001800
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
 800153c:	4613      	mov	r3, r2
 800153e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	787b      	ldrb	r3, [r7, #1]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800154c:	e002      	b.n	8001554 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e081      	b.n	8001676 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fac2 	bl	8000b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	; 0x24
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d104      	bne.n	80015fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001608:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800160c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800161c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691a      	ldr	r2, [r3, #16]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	699b      	ldr	r3, [r3, #24]
 800162e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	69d9      	ldr	r1, [r3, #28]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a1a      	ldr	r2, [r3, #32]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2220      	movs	r2, #32
 8001662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b088      	sub	sp, #32
 8001684:	af02      	add	r7, sp, #8
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	461a      	mov	r2, r3
 800168e:	4603      	mov	r3, r0
 8001690:	817b      	strh	r3, [r7, #10]
 8001692:	460b      	mov	r3, r1
 8001694:	813b      	strh	r3, [r7, #8]
 8001696:	4613      	mov	r3, r2
 8001698:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b20      	cmp	r3, #32
 80016a4:	f040 80fd 	bne.w	80018a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80016a8:	6a3b      	ldr	r3, [r7, #32]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d002      	beq.n	80016b4 <HAL_I2C_Mem_Read+0x34>
 80016ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d105      	bne.n	80016c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e0f1      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Mem_Read+0x4e>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e0ea      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2201      	movs	r2, #1
 80016d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016d6:	f7ff fc63 	bl	8000fa0 <HAL_GetTick>
 80016da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	9300      	str	r3, [sp, #0]
 80016e0:	2319      	movs	r3, #25
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f000 f95b 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e0d5      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	2222      	movs	r2, #34	; 0x22
 80016fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2200      	movs	r2, #0
 800170c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6a3a      	ldr	r2, [r7, #32]
 8001712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001720:	88f8      	ldrh	r0, [r7, #6]
 8001722:	893a      	ldrh	r2, [r7, #8]
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	9301      	str	r3, [sp, #4]
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4603      	mov	r3, r0
 8001730:	68f8      	ldr	r0, [r7, #12]
 8001732:	f000 f8bf 	bl	80018b4 <I2C_RequestMemoryRead>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ad      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174c:	b29b      	uxth	r3, r3
 800174e:	2bff      	cmp	r3, #255	; 0xff
 8001750:	d90e      	bls.n	8001770 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	b2da      	uxtb	r2, r3
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	4b52      	ldr	r3, [pc, #328]	; (80018ac <HAL_I2C_Mem_Read+0x22c>)
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001768:	68f8      	ldr	r0, [r7, #12]
 800176a:	f000 fac3 	bl	8001cf4 <I2C_TransferConfig>
 800176e:	e00f      	b.n	8001790 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001774:	b29a      	uxth	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177e:	b2da      	uxtb	r2, r3
 8001780:	8979      	ldrh	r1, [r7, #10]
 8001782:	4b4a      	ldr	r3, [pc, #296]	; (80018ac <HAL_I2C_Mem_Read+0x22c>)
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800178a:	68f8      	ldr	r0, [r7, #12]
 800178c:	f000 fab2 	bl	8001cf4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001796:	2200      	movs	r2, #0
 8001798:	2104      	movs	r1, #4
 800179a:	68f8      	ldr	r0, [r7, #12]
 800179c:	f000 f902 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e07c      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	1c5a      	adds	r2, r3, #1
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c6:	3b01      	subs	r3, #1
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	3b01      	subs	r3, #1
 80017d6:	b29a      	uxth	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d034      	beq.n	8001850 <HAL_I2C_Mem_Read+0x1d0>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d130      	bne.n	8001850 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f4:	2200      	movs	r2, #0
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f000 f8d3 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e04d      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180c:	b29b      	uxth	r3, r3
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d90e      	bls.n	8001830 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	22ff      	movs	r2, #255	; 0xff
 8001816:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800181c:	b2da      	uxtb	r2, r3
 800181e:	8979      	ldrh	r1, [r7, #10]
 8001820:	2300      	movs	r3, #0
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f000 fa63 	bl	8001cf4 <I2C_TransferConfig>
 800182e:	e00f      	b.n	8001850 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001834:	b29a      	uxth	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183e:	b2da      	uxtb	r2, r3
 8001840:	8979      	ldrh	r1, [r7, #10]
 8001842:	2300      	movs	r3, #0
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f000 fa52 	bl	8001cf4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001854:	b29b      	uxth	r3, r3
 8001856:	2b00      	cmp	r3, #0
 8001858:	d19a      	bne.n	8001790 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f920 	bl	8001aa4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e01a      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2220      	movs	r2, #32
 8001874:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6859      	ldr	r1, [r3, #4]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_I2C_Mem_Read+0x230>)
 8001882:	400b      	ands	r3, r1
 8001884:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2220      	movs	r2, #32
 800188a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	80002400 	.word	0x80002400
 80018b0:	fe00e800 	.word	0xfe00e800

080018b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	4608      	mov	r0, r1
 80018be:	4611      	mov	r1, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	4603      	mov	r3, r0
 80018c4:	817b      	strh	r3, [r7, #10]
 80018c6:	460b      	mov	r3, r1
 80018c8:	813b      	strh	r3, [r7, #8]
 80018ca:	4613      	mov	r3, r2
 80018cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	b2da      	uxtb	r2, r3
 80018d2:	8979      	ldrh	r1, [r7, #10]
 80018d4:	4b20      	ldr	r3, [pc, #128]	; (8001958 <I2C_RequestMemoryRead+0xa4>)
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2300      	movs	r3, #0
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa0a 	bl	8001cf4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	69b9      	ldr	r1, [r7, #24]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f89d 	bl	8001a24 <I2C_WaitOnTXISFlagUntilTimeout>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e02c      	b.n	800194e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d105      	bne.n	8001906 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018fa:	893b      	ldrh	r3, [r7, #8]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
 8001904:	e015      	b.n	8001932 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001906:	893b      	ldrh	r3, [r7, #8]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	b29b      	uxth	r3, r3
 800190c:	b2da      	uxtb	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001914:	69fa      	ldr	r2, [r7, #28]
 8001916:	69b9      	ldr	r1, [r7, #24]
 8001918:	68f8      	ldr	r0, [r7, #12]
 800191a:	f000 f883 	bl	8001a24 <I2C_WaitOnTXISFlagUntilTimeout>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e012      	b.n	800194e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001928:	893b      	ldrh	r3, [r7, #8]
 800192a:	b2da      	uxtb	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2200      	movs	r2, #0
 800193a:	2140      	movs	r1, #64	; 0x40
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 f831 	bl	80019a4 <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	80002000 	.word	0x80002000

0800195c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	2b02      	cmp	r3, #2
 8001970:	d103      	bne.n	800197a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2200      	movs	r2, #0
 8001978:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b01      	cmp	r3, #1
 8001986:	d007      	beq.n	8001998 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0201 	orr.w	r2, r2, #1
 8001996:	619a      	str	r2, [r3, #24]
  }
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	4613      	mov	r3, r2
 80019b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019b4:	e022      	b.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d01e      	beq.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019be:	f7ff faef 	bl	8000fa0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d302      	bcc.n	80019d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d113      	bne.n	80019fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e00f      	b.n	8001a1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4013      	ands	r3, r2
 8001a06:	68ba      	ldr	r2, [r7, #8]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d0cd      	beq.n	80019b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a30:	e02c      	b.n	8001a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f870 	bl	8001b1c <I2C_IsErrorOccurred>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e02a      	b.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a4c:	d01e      	beq.n	8001a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a4e:	f7ff faa7 	bl	8000fa0 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	68ba      	ldr	r2, [r7, #8]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d302      	bcc.n	8001a64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d113      	bne.n	8001a8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a68:	f043 0220 	orr.w	r2, r3, #32
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2220      	movs	r2, #32
 8001a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e007      	b.n	8001a9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d1cb      	bne.n	8001a32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ab0:	e028      	b.n	8001b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f830 	bl	8001b1c <I2C_IsErrorOccurred>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e026      	b.n	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ac6:	f7ff fa6b 	bl	8000fa0 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d302      	bcc.n	8001adc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d113      	bne.n	8001b04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae0:	f043 0220 	orr.w	r2, r3, #32
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2220      	movs	r2, #32
 8001aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e007      	b.n	8001b14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d1cf      	bne.n	8001ab2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	f003 0310 	and.w	r3, r3, #16
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d075      	beq.n	8001c34 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b50:	e056      	b.n	8001c00 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d052      	beq.n	8001c00 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b5a:	f7ff fa21 	bl	8000fa0 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d302      	bcc.n	8001b70 <I2C_IsErrorOccurred+0x54>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d147      	bne.n	8001c00 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b7a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b82:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	d12e      	bne.n	8001bf2 <I2C_IsErrorOccurred+0xd6>
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b9a:	d02a      	beq.n	8001bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001b9c:	7cfb      	ldrb	r3, [r7, #19]
 8001b9e:	2b20      	cmp	r3, #32
 8001ba0:	d027      	beq.n	8001bf2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bb0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bb2:	f7ff f9f5 	bl	8000fa0 <HAL_GetTick>
 8001bb6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb8:	e01b      	b.n	8001bf2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001bba:	f7ff f9f1 	bl	8000fa0 <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b19      	cmp	r3, #25
 8001bc6:	d914      	bls.n	8001bf2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bcc:	f043 0220 	orr.w	r2, r3, #32
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f003 0320 	and.w	r3, r3, #32
 8001bfc:	2b20      	cmp	r3, #32
 8001bfe:	d1dc      	bne.n	8001bba <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b20      	cmp	r3, #32
 8001c0c:	d003      	beq.n	8001c16 <I2C_IsErrorOccurred+0xfa>
 8001c0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d09d      	beq.n	8001b52 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d103      	bne.n	8001c26 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2220      	movs	r2, #32
 8001c24:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	f043 0304 	orr.w	r3, r3, #4
 8001c2c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00b      	beq.n	8001c5e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c56:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00b      	beq.n	8001c80 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f043 0308 	orr.w	r3, r3, #8
 8001c6e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c78:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d00b      	beq.n	8001ca2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c9a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ca2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01c      	beq.n	8001ce4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	f7ff fe56 	bl	800195c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6859      	ldr	r1, [r3, #4]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b0d      	ldr	r3, [pc, #52]	; (8001cf0 <I2C_IsErrorOccurred+0x1d4>)
 8001cbc:	400b      	ands	r3, r1
 8001cbe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3728      	adds	r7, #40	; 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	fe00e800 	.word	0xfe00e800

08001cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	460b      	mov	r3, r1
 8001d00:	817b      	strh	r3, [r7, #10]
 8001d02:	4613      	mov	r3, r2
 8001d04:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d06:	897b      	ldrh	r3, [r7, #10]
 8001d08:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d0c:	7a7b      	ldrb	r3, [r7, #9]
 8001d0e:	041b      	lsls	r3, r3, #16
 8001d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d14:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d22:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	6a3b      	ldr	r3, [r7, #32]
 8001d2c:	0d5b      	lsrs	r3, r3, #21
 8001d2e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <I2C_TransferConfig+0x60>)
 8001d34:	430b      	orrs	r3, r1
 8001d36:	43db      	mvns	r3, r3
 8001d38:	ea02 0103 	and.w	r1, r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d46:	bf00      	nop
 8001d48:	371c      	adds	r7, #28
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	03ff63ff 	.word	0x03ff63ff

08001d58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b20      	cmp	r3, #32
 8001d6c:	d138      	bne.n	8001de0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e032      	b.n	8001de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2224      	movs	r2, #36	; 0x24
 8001d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0201 	bic.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001daa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	430a      	orrs	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0201 	orr.w	r2, r2, #1
 8001dca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	e000      	b.n	8001de2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001de0:	2302      	movs	r3, #2
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d139      	bne.n	8001e78 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d101      	bne.n	8001e12 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e0e:	2302      	movs	r3, #2
 8001e10:	e033      	b.n	8001e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2224      	movs	r2, #36	; 0x24
 8001e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e40:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	021b      	lsls	r3, r3, #8
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2220      	movs	r2, #32
 8001e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e000      	b.n	8001e7a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e78:	2302      	movs	r3, #2
  }
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e8c:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b085      	sub	sp, #20
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eb2:	d130      	bne.n	8001f16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001eb4:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ec0:	d038      	beq.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001eca:	4a1e      	ldr	r2, [pc, #120]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ecc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	; (8001f48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2232      	movs	r2, #50	; 0x32
 8001ed8:	fb02 f303 	mul.w	r3, r2, r3
 8001edc:	4a1b      	ldr	r2, [pc, #108]	; (8001f4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee8:	e002      	b.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef0:	4b14      	ldr	r3, [pc, #80]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ef2:	695b      	ldr	r3, [r3, #20]
 8001ef4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001efc:	d102      	bne.n	8001f04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f2      	bne.n	8001eea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f04:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f10:	d110      	bne.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e00f      	b.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f22:	d007      	beq.n	8001f34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f2c:	4a05      	ldr	r2, [pc, #20]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40007000 	.word	0x40007000
 8001f48:	20000048 	.word	0x20000048
 8001f4c:	431bde83 	.word	0x431bde83

08001f50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b088      	sub	sp, #32
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e3ca      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f62:	4b97      	ldr	r3, [pc, #604]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
 8001f6a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f6c:	4b94      	ldr	r3, [pc, #592]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0310 	and.w	r3, r3, #16
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	f000 80e4 	beq.w	800214c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_RCC_OscConfig+0x4a>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2b0c      	cmp	r3, #12
 8001f8e:	f040 808b 	bne.w	80020a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	f040 8087 	bne.w	80020a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f9a:	4b89      	ldr	r3, [pc, #548]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x62>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e3a2      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d004      	beq.n	8001fcc <HAL_RCC_OscConfig+0x7c>
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fca:	e005      	b.n	8001fd8 <HAL_RCC_OscConfig+0x88>
 8001fcc:	4b7c      	ldr	r3, [pc, #496]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	091b      	lsrs	r3, r3, #4
 8001fd4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d223      	bcs.n	8002024 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f000 fd55 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e383      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ff0:	4b73      	ldr	r3, [pc, #460]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a72      	ldr	r2, [pc, #456]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001ff6:	f043 0308 	orr.w	r3, r3, #8
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	496d      	ldr	r1, [pc, #436]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800200e:	4b6c      	ldr	r3, [pc, #432]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69db      	ldr	r3, [r3, #28]
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	4968      	ldr	r1, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800201e:	4313      	orrs	r3, r2
 8002020:	604b      	str	r3, [r1, #4]
 8002022:	e025      	b.n	8002070 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002024:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a65      	ldr	r2, [pc, #404]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800202a:	f043 0308 	orr.w	r3, r3, #8
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b63      	ldr	r3, [pc, #396]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	4960      	ldr	r1, [pc, #384]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800203e:	4313      	orrs	r3, r2
 8002040:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002042:	4b5f      	ldr	r3, [pc, #380]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	495b      	ldr	r1, [pc, #364]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d109      	bne.n	8002070 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	4618      	mov	r0, r3
 8002062:	f000 fd15 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e343      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002070:	f000 fc4a 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8002074:	4602      	mov	r2, r0
 8002076:	4b52      	ldr	r3, [pc, #328]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	4950      	ldr	r1, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x274>)
 8002082:	5ccb      	ldrb	r3, [r1, r3]
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	4a4e      	ldr	r2, [pc, #312]	; (80021c8 <HAL_RCC_OscConfig+0x278>)
 800208e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002090:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <HAL_RCC_OscConfig+0x27c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe ff33 	bl	8000f00 <HAL_InitTick>
 800209a:	4603      	mov	r3, r0
 800209c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d052      	beq.n	800214a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
 80020a6:	e327      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d032      	beq.n	8002116 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020b0:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a42      	ldr	r2, [pc, #264]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020b6:	f043 0301 	orr.w	r3, r3, #1
 80020ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020bc:	f7fe ff70 	bl	8000fa0 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020c4:	f7fe ff6c 	bl	8000fa0 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e310      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020d6:	4b3a      	ldr	r3, [pc, #232]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e2:	4b37      	ldr	r3, [pc, #220]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a36      	ldr	r2, [pc, #216]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b34      	ldr	r3, [pc, #208]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	4931      	ldr	r1, [pc, #196]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002100:	4b2f      	ldr	r3, [pc, #188]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	021b      	lsls	r3, r3, #8
 800210e:	492c      	ldr	r1, [pc, #176]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]
 8002114:	e01a      	b.n	800214c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002116:	4b2a      	ldr	r3, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a29      	ldr	r2, [pc, #164]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002122:	f7fe ff3d 	bl	8000fa0 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800212a:	f7fe ff39 	bl	8000fa0 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e2dd      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800213c:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1f0      	bne.n	800212a <HAL_RCC_OscConfig+0x1da>
 8002148:	e000      	b.n	800214c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800214a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d074      	beq.n	8002242 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b08      	cmp	r3, #8
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x21a>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b0c      	cmp	r3, #12
 8002162:	d10e      	bne.n	8002182 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d10b      	bne.n	8002182 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d064      	beq.n	8002240 <HAL_RCC_OscConfig+0x2f0>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d160      	bne.n	8002240 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e2ba      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800218a:	d106      	bne.n	800219a <HAL_RCC_OscConfig+0x24a>
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a0b      	ldr	r2, [pc, #44]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	e026      	b.n	80021e8 <HAL_RCC_OscConfig+0x298>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a2:	d115      	bne.n	80021d0 <HAL_RCC_OscConfig+0x280>
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80021aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a02      	ldr	r2, [pc, #8]	; (80021c0 <HAL_RCC_OscConfig+0x270>)
 80021b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	e014      	b.n	80021e8 <HAL_RCC_OscConfig+0x298>
 80021be:	bf00      	nop
 80021c0:	40021000 	.word	0x40021000
 80021c4:	080055b0 	.word	0x080055b0
 80021c8:	20000048 	.word	0x20000048
 80021cc:	2000004c 	.word	0x2000004c
 80021d0:	4ba0      	ldr	r3, [pc, #640]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a9f      	ldr	r2, [pc, #636]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	6013      	str	r3, [r2, #0]
 80021dc:	4b9d      	ldr	r3, [pc, #628]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a9c      	ldr	r2, [pc, #624]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80021e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d013      	beq.n	8002218 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7fe fed6 	bl	8000fa0 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7fe fed2 	bl	8000fa0 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	; 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e276      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800220a:	4b92      	ldr	r3, [pc, #584]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2a8>
 8002216:	e014      	b.n	8002242 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002218:	f7fe fec2 	bl	8000fa0 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002220:	f7fe febe 	bl	8000fa0 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b64      	cmp	r3, #100	; 0x64
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e262      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002232:	4b88      	ldr	r3, [pc, #544]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x2d0>
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d060      	beq.n	8002310 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b04      	cmp	r3, #4
 8002252:	d005      	beq.n	8002260 <HAL_RCC_OscConfig+0x310>
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d119      	bne.n	800228e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d116      	bne.n	800228e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002260:	4b7c      	ldr	r3, [pc, #496]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_OscConfig+0x328>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e23f      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002278:	4b76      	ldr	r3, [pc, #472]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	061b      	lsls	r3, r3, #24
 8002286:	4973      	ldr	r1, [pc, #460]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002288:	4313      	orrs	r3, r2
 800228a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800228c:	e040      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d023      	beq.n	80022de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002296:	4b6f      	ldr	r3, [pc, #444]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a6e      	ldr	r2, [pc, #440]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7fe fe7d 	bl	8000fa0 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe fe79 	bl	8000fa0 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e21d      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022bc:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c8:	4b62      	ldr	r3, [pc, #392]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	061b      	lsls	r3, r3, #24
 80022d6:	495f      	ldr	r1, [pc, #380]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	604b      	str	r3, [r1, #4]
 80022dc:	e018      	b.n	8002310 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022de:	4b5d      	ldr	r3, [pc, #372]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a5c      	ldr	r2, [pc, #368]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80022e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ea:	f7fe fe59 	bl	8000fa0 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f2:	f7fe fe55 	bl	8000fa0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1f9      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002304:	4b53      	ldr	r3, [pc, #332]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1f0      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0308 	and.w	r3, r3, #8
 8002318:	2b00      	cmp	r3, #0
 800231a:	d03c      	beq.n	8002396 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01c      	beq.n	800235e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002324:	4b4b      	ldr	r3, [pc, #300]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800232a:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fe34 	bl	8000fa0 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fe30 	bl	8000fa0 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1d4      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800234e:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0ef      	beq.n	800233c <HAL_RCC_OscConfig+0x3ec>
 800235c:	e01b      	b.n	8002396 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800235e:	4b3d      	ldr	r3, [pc, #244]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002364:	4a3b      	ldr	r2, [pc, #236]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236e:	f7fe fe17 	bl	8000fa0 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002376:	f7fe fe13 	bl	8000fa0 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e1b7      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002388:	4b32      	ldr	r3, [pc, #200]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800238a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ef      	bne.n	8002376 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 80a6 	beq.w	80024f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023a4:	2300      	movs	r3, #0
 80023a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b27      	ldr	r3, [pc, #156]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	4a26      	ldr	r2, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6593      	str	r3, [r2, #88]	; 0x58
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60bb      	str	r3, [r7, #8]
 80023ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023cc:	2301      	movs	r3, #1
 80023ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_OscConfig+0x508>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d118      	bne.n	800240e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023dc:	4b1e      	ldr	r3, [pc, #120]	; (8002458 <HAL_RCC_OscConfig+0x508>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1d      	ldr	r2, [pc, #116]	; (8002458 <HAL_RCC_OscConfig+0x508>)
 80023e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023e8:	f7fe fdda 	bl	8000fa0 <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f0:	f7fe fdd6 	bl	8000fa0 <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e17a      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_RCC_OscConfig+0x508>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0f0      	beq.n	80023f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_RCC_OscConfig+0x4d8>
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241c:	4a0d      	ldr	r2, [pc, #52]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002426:	e029      	b.n	800247c <HAL_RCC_OscConfig+0x52c>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	2b05      	cmp	r3, #5
 800242e:	d115      	bne.n	800245c <HAL_RCC_OscConfig+0x50c>
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	4a07      	ldr	r2, [pc, #28]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002442:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002446:	4a03      	ldr	r2, [pc, #12]	; (8002454 <HAL_RCC_OscConfig+0x504>)
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002450:	e014      	b.n	800247c <HAL_RCC_OscConfig+0x52c>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
 800245c:	4b9c      	ldr	r3, [pc, #624]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	4a9b      	ldr	r2, [pc, #620]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002464:	f023 0301 	bic.w	r3, r3, #1
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800246c:	4b98      	ldr	r3, [pc, #608]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800246e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002472:	4a97      	ldr	r2, [pc, #604]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002474:	f023 0304 	bic.w	r3, r3, #4
 8002478:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d016      	beq.n	80024b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002484:	f7fe fd8c 	bl	8000fa0 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	e00a      	b.n	80024a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248c:	f7fe fd88 	bl	8000fa0 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	f241 3288 	movw	r2, #5000	; 0x1388
 800249a:	4293      	cmp	r3, r2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e12a      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a2:	4b8b      	ldr	r3, [pc, #556]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80024a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0ed      	beq.n	800248c <HAL_RCC_OscConfig+0x53c>
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7fe fd75 	bl	8000fa0 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fd71 	bl	8000fa0 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d901      	bls.n	80024d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e113      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024d0:	4b7f      	ldr	r3, [pc, #508]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1ed      	bne.n	80024ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024de:	7ffb      	ldrb	r3, [r7, #31]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d105      	bne.n	80024f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e4:	4b7a      	ldr	r3, [pc, #488]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a79      	ldr	r2, [pc, #484]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80024ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f000 80fe 	beq.w	80026f6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	2b02      	cmp	r3, #2
 8002500:	f040 80d0 	bne.w	80026a4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002504:	4b72      	ldr	r3, [pc, #456]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002514:	429a      	cmp	r2, r3
 8002516:	d130      	bne.n	800257a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	3b01      	subs	r3, #1
 8002524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d127      	bne.n	800257a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002534:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d11f      	bne.n	800257a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002544:	2a07      	cmp	r2, #7
 8002546:	bf14      	ite	ne
 8002548:	2201      	movne	r2, #1
 800254a:	2200      	moveq	r2, #0
 800254c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254e:	4293      	cmp	r3, r2
 8002550:	d113      	bne.n	800257a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255c:	085b      	lsrs	r3, r3, #1
 800255e:	3b01      	subs	r3, #1
 8002560:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002562:	429a      	cmp	r2, r3
 8002564:	d109      	bne.n	800257a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	085b      	lsrs	r3, r3, #1
 8002572:	3b01      	subs	r3, #1
 8002574:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d06e      	beq.n	8002658 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b0c      	cmp	r3, #12
 800257e:	d069      	beq.n	8002654 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002580:	4b53      	ldr	r3, [pc, #332]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d105      	bne.n	8002598 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e0ad      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800259c:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a4b      	ldr	r2, [pc, #300]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80025a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a8:	f7fe fcfa 	bl	8000fa0 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b0:	f7fe fcf6 	bl	8000fa0 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e09a      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c2:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025ce:	4b40      	ldr	r3, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	4b40      	ldr	r3, [pc, #256]	; (80026d4 <HAL_RCC_OscConfig+0x784>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025de:	3a01      	subs	r2, #1
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	4311      	orrs	r1, r2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025e8:	0212      	lsls	r2, r2, #8
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025f0:	0852      	lsrs	r2, r2, #1
 80025f2:	3a01      	subs	r2, #1
 80025f4:	0552      	lsls	r2, r2, #21
 80025f6:	4311      	orrs	r1, r2
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0652      	lsls	r2, r2, #25
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002608:	0912      	lsrs	r2, r2, #4
 800260a:	0452      	lsls	r2, r2, #17
 800260c:	430a      	orrs	r2, r1
 800260e:	4930      	ldr	r1, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002610:	4313      	orrs	r3, r2
 8002612:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a2d      	ldr	r2, [pc, #180]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800261a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800261e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800262c:	f7fe fcb8 	bl	8000fa0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fcb4 	bl	8000fa0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e058      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002646:	4b22      	ldr	r3, [pc, #136]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002652:	e050      	b.n	80026f6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e04f      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d148      	bne.n	80026f6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a19      	ldr	r2, [pc, #100]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 800266a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800267a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800267c:	f7fe fc90 	bl	8000fa0 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fc8c 	bl	8000fa0 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e030      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002696:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x734>
 80026a2:	e028      	b.n	80026f6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b0c      	cmp	r3, #12
 80026a8:	d023      	beq.n	80026f2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_RCC_OscConfig+0x780>)
 80026b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b6:	f7fe fc73 	bl	8000fa0 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	e00c      	b.n	80026d8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026be:	f7fe fc6f 	bl	8000fa0 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d905      	bls.n	80026d8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e013      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x7b0>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ec      	bne.n	80026be <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x7b0>)
 80026e6:	68da      	ldr	r2, [r3, #12]
 80026e8:	4905      	ldr	r1, [pc, #20]	; (8002700 <HAL_RCC_OscConfig+0x7b0>)
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_RCC_OscConfig+0x7b4>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	60cb      	str	r3, [r1, #12]
 80026f0:	e001      	b.n	80026f6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3720      	adds	r7, #32
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	feeefffc 	.word	0xfeeefffc

08002708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0e7      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b72      	ldr	r3, [pc, #456]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 0207 	bic.w	r2, r3, #7
 8002732:	4970      	ldr	r1, [pc, #448]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b6e      	ldr	r3, [pc, #440]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0cf      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b66      	ldr	r3, [pc, #408]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002764:	429a      	cmp	r2, r3
 8002766:	d908      	bls.n	800277a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4960      	ldr	r1, [pc, #384]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d04c      	beq.n	8002820 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b5a      	ldr	r3, [pc, #360]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d121      	bne.n	80027de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0a6      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a6:	4b54      	ldr	r3, [pc, #336]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d115      	bne.n	80027de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e09a      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d107      	bne.n	80027ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027be:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d109      	bne.n	80027de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e08e      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e086      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 0203 	bic.w	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	4943      	ldr	r1, [pc, #268]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f0:	f7fe fbd6 	bl	8000fa0 <HAL_GetTick>
 80027f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	e00a      	b.n	800280e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f8:	f7fe fbd2 	bl	8000fa0 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	f241 3288 	movw	r2, #5000	; 0x1388
 8002806:	4293      	cmp	r3, r2
 8002808:	d901      	bls.n	800280e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e06e      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280e:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 020c 	and.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	429a      	cmp	r2, r3
 800281e:	d1eb      	bne.n	80027f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002838:	429a      	cmp	r2, r3
 800283a:	d208      	bcs.n	800284e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800283c:	4b2e      	ldr	r3, [pc, #184]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	492b      	ldr	r1, [pc, #172]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d210      	bcs.n	800287e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f023 0207 	bic.w	r2, r3, #7
 8002864:	4923      	ldr	r1, [pc, #140]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	4313      	orrs	r3, r2
 800286a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_RCC_ClockConfig+0x1ec>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0307 	and.w	r3, r3, #7
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e036      	b.n	80028ec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	2b00      	cmp	r3, #0
 8002888:	d008      	beq.n	800289c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800288a:	4b1b      	ldr	r3, [pc, #108]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4918      	ldr	r1, [pc, #96]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d009      	beq.n	80028bc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4910      	ldr	r1, [pc, #64]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028bc:	f000 f824 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b0d      	ldr	r3, [pc, #52]	; (80028f8 <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	091b      	lsrs	r3, r3, #4
 80028c8:	f003 030f 	and.w	r3, r3, #15
 80028cc:	490b      	ldr	r1, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1f4>)
 80028ce:	5ccb      	ldrb	r3, [r1, r3]
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	fa22 f303 	lsr.w	r3, r2, r3
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x1f8>)
 80028da:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1fc>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe fb0d 	bl	8000f00 <HAL_InitTick>
 80028e6:	4603      	mov	r3, r0
 80028e8:	72fb      	strb	r3, [r7, #11]

  return status;
 80028ea:	7afb      	ldrb	r3, [r7, #11]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40022000 	.word	0x40022000
 80028f8:	40021000 	.word	0x40021000
 80028fc:	080055b0 	.word	0x080055b0
 8002900:	20000048 	.word	0x20000048
 8002904:	2000004c 	.word	0x2000004c

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	b089      	sub	sp, #36	; 0x24
 800290c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002920:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f003 0303 	and.w	r3, r3, #3
 8002928:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x34>
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d121      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d11e      	bne.n	800297a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800293c:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294e:	0a1b      	lsrs	r3, r3, #8
 8002950:	f003 030f 	and.w	r3, r3, #15
 8002954:	61fb      	str	r3, [r7, #28]
 8002956:	e005      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002964:	4a2b      	ldr	r2, [pc, #172]	; (8002a14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d102      	bne.n	8002986 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002980:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x110>)
 8002982:	61bb      	str	r3, [r7, #24]
 8002984:	e004      	b.n	8002990 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	2b08      	cmp	r3, #8
 800298a:	d101      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800298c:	4b23      	ldr	r3, [pc, #140]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x114>)
 800298e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d134      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0303 	and.w	r3, r3, #3
 800299e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d003      	beq.n	80029ae <HAL_RCC_GetSysClockFreq+0xa6>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d003      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0xac>
 80029ac:	e005      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029ae:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <HAL_RCC_GetSysClockFreq+0x110>)
 80029b0:	617b      	str	r3, [r7, #20]
      break;
 80029b2:	e005      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <HAL_RCC_GetSysClockFreq+0x114>)
 80029b6:	617b      	str	r3, [r7, #20]
      break;
 80029b8:	e002      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	617b      	str	r3, [r7, #20]
      break;
 80029be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029c0:	4b13      	ldr	r3, [pc, #76]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	3301      	adds	r3, #1
 80029cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	0a1b      	lsrs	r3, r3, #8
 80029d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	fb03 f202 	mul.w	r2, r3, r2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	0e5b      	lsrs	r3, r3, #25
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	3301      	adds	r3, #1
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a00:	69bb      	ldr	r3, [r7, #24]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3724      	adds	r7, #36	; 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	080055c8 	.word	0x080055c8
 8002a18:	00f42400 	.word	0x00f42400
 8002a1c:	007a1200 	.word	0x007a1200

08002a20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a24:	4b03      	ldr	r3, [pc, #12]	; (8002a34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a26:	681b      	ldr	r3, [r3, #0]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000048 	.word	0x20000048

08002a38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a3c:	f7ff fff0 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a40:	4602      	mov	r2, r0
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	0a1b      	lsrs	r3, r3, #8
 8002a48:	f003 0307 	and.w	r3, r3, #7
 8002a4c:	4904      	ldr	r1, [pc, #16]	; (8002a60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a4e:	5ccb      	ldrb	r3, [r1, r3]
 8002a50:	f003 031f 	and.w	r3, r3, #31
 8002a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	080055c0 	.word	0x080055c0

08002a64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a68:	f7ff ffda 	bl	8002a20 <HAL_RCC_GetHCLKFreq>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	0adb      	lsrs	r3, r3, #11
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	4904      	ldr	r1, [pc, #16]	; (8002a8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a7a:	5ccb      	ldrb	r3, [r1, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	080055c0 	.word	0x080055c0

08002a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa8:	f7ff f9ee 	bl	8001e88 <HAL_PWREx_GetVoltageRange>
 8002aac:	6178      	str	r0, [r7, #20]
 8002aae:	e014      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
 8002abc:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac8:	f7ff f9de 	bl	8001e88 <HAL_PWREx_GetVoltageRange>
 8002acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b1e      	ldr	r3, [pc, #120]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae0:	d10b      	bne.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d919      	bls.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2ba0      	cmp	r3, #160	; 0xa0
 8002aec:	d902      	bls.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aee:	2302      	movs	r3, #2
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e013      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af4:	2301      	movs	r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e010      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b80      	cmp	r3, #128	; 0x80
 8002afe:	d902      	bls.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b00:	2303      	movs	r3, #3
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e00a      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d102      	bne.n	8002b12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	e004      	b.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d101      	bne.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b18:	2301      	movs	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 0207 	bic.w	r2, r3, #7
 8002b24:	4909      	ldr	r1, [pc, #36]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b2c:	4b07      	ldr	r3, [pc, #28]	; (8002b4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d001      	beq.n	8002b3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	40022000 	.word	0x40022000

08002b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b58:	2300      	movs	r3, #0
 8002b5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d041      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b74:	d02a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b7a:	d824      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b86:	d81e      	bhi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002b8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b92:	e018      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b94:	4b86      	ldr	r3, [pc, #536]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a85      	ldr	r2, [pc, #532]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ba0:	e015      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fabb 	bl	8003124 <RCCEx_PLLSAI1_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bb2:	e00c      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3320      	adds	r3, #32
 8002bb8:	2100      	movs	r1, #0
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 fba6 	bl	800330c <RCCEx_PLLSAI2_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc4:	e003      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	74fb      	strb	r3, [r7, #19]
      break;
 8002bca:	e000      	b.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bce:	7cfb      	ldrb	r3, [r7, #19]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bd4:	4b76      	ldr	r3, [pc, #472]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002be2:	4973      	ldr	r1, [pc, #460]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bea:	e001      	b.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d041      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c00:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c04:	d02a      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c06:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c0a:	d824      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c10:	d008      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c16:	d81e      	bhi.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c20:	d010      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c22:	e018      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c24:	4b62      	ldr	r3, [pc, #392]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4a61      	ldr	r2, [pc, #388]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c2e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c30:	e015      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3304      	adds	r3, #4
 8002c36:	2100      	movs	r1, #0
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fa73 	bl	8003124 <RCCEx_PLLSAI1_Config>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c42:	e00c      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3320      	adds	r3, #32
 8002c48:	2100      	movs	r1, #0
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 fb5e 	bl	800330c <RCCEx_PLLSAI2_Config>
 8002c50:	4603      	mov	r3, r0
 8002c52:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c54:	e003      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	74fb      	strb	r3, [r7, #19]
      break;
 8002c5a:	e000      	b.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c5e:	7cfb      	ldrb	r3, [r7, #19]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c64:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c72:	494f      	ldr	r1, [pc, #316]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c7a:	e001      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80a0 	beq.w	8002dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c92:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00d      	beq.n	8002cc4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca8:	4b41      	ldr	r3, [pc, #260]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	4a40      	ldr	r2, [pc, #256]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cb2:	6593      	str	r3, [r2, #88]	; 0x58
 8002cb4:	4b3e      	ldr	r3, [pc, #248]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc4:	4b3b      	ldr	r3, [pc, #236]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a3a      	ldr	r2, [pc, #232]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cd0:	f7fe f966 	bl	8000fa0 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cd6:	e009      	b.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7fe f962 	bl	8000fa0 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d902      	bls.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	74fb      	strb	r3, [r7, #19]
        break;
 8002cea:	e005      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cec:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ef      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002cf8:	7cfb      	ldrb	r3, [r7, #19]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d15c      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d08:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d01f      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d019      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d26:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d38:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d016      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f921 	bl	8000fa0 <HAL_GetTick>
 8002d5e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d60:	e00b      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe f91d 	bl	8000fa0 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d902      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	74fb      	strb	r3, [r7, #19]
            break;
 8002d78:	e006      	b.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d7a:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0ec      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8e:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d9e:	4904      	ldr	r1, [pc, #16]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002da6:	e009      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	74bb      	strb	r3, [r7, #18]
 8002dac:	e006      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dbc:	7c7b      	ldrb	r3, [r7, #17]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d105      	bne.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc2:	4b9e      	ldr	r3, [pc, #632]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc6:	4a9d      	ldr	r2, [pc, #628]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dda:	4b98      	ldr	r3, [pc, #608]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f023 0203 	bic.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de8:	4994      	ldr	r1, [pc, #592]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0302 	and.w	r3, r3, #2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfc:	4b8f      	ldr	r3, [pc, #572]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f023 020c 	bic.w	r2, r3, #12
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e0a:	498c      	ldr	r1, [pc, #560]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0304 	and.w	r3, r3, #4
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00a      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e1e:	4b87      	ldr	r3, [pc, #540]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	4983      	ldr	r1, [pc, #524]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0308 	and.w	r3, r3, #8
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00a      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e40:	4b7e      	ldr	r3, [pc, #504]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	497b      	ldr	r1, [pc, #492]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0310 	and.w	r3, r3, #16
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00a      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e62:	4b76      	ldr	r3, [pc, #472]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e70:	4972      	ldr	r1, [pc, #456]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 0320 	and.w	r3, r3, #32
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e84:	4b6d      	ldr	r3, [pc, #436]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e92:	496a      	ldr	r1, [pc, #424]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ea6:	4b65      	ldr	r3, [pc, #404]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb4:	4961      	ldr	r1, [pc, #388]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ec8:	4b5c      	ldr	r3, [pc, #368]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ed6:	4959      	ldr	r1, [pc, #356]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eea:	4b54      	ldr	r3, [pc, #336]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	4950      	ldr	r1, [pc, #320]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	4948      	ldr	r1, [pc, #288]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f2e:	4b43      	ldr	r3, [pc, #268]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3c:	493f      	ldr	r1, [pc, #252]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d028      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5e:	4937      	ldr	r1, [pc, #220]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f6e:	d106      	bne.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f70:	4b32      	ldr	r3, [pc, #200]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	4a31      	ldr	r2, [pc, #196]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7a:	60d3      	str	r3, [r2, #12]
 8002f7c:	e011      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f86:	d10c      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 f8c8 	bl	8003124 <RCCEx_PLLSAI1_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002f9e:	7cfb      	ldrb	r3, [r7, #19]
 8002fa0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fae:	4b23      	ldr	r3, [pc, #140]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	491f      	ldr	r1, [pc, #124]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fd8:	60d3      	str	r3, [r2, #12]
 8002fda:	e011      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 f899 	bl	8003124 <RCCEx_PLLSAI1_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ff6:	7cfb      	ldrb	r3, [r7, #19]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d02b      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800300e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003012:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800301a:	4908      	ldr	r1, [pc, #32]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800302a:	d109      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800302c:	4b03      	ldr	r3, [pc, #12]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	4a02      	ldr	r2, [pc, #8]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003036:	60d3      	str	r3, [r2, #12]
 8003038:	e014      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f867 	bl	8003124 <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02f      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003070:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800307e:	4928      	ldr	r1, [pc, #160]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d10d      	bne.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f844 	bl	8003124 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d014      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
 80030aa:	e011      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	3320      	adds	r3, #32
 80030ba:	2102      	movs	r1, #2
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f925 	bl	800330c <RCCEx_PLLSAI2_Config>
 80030c2:	4603      	mov	r3, r0
 80030c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c6:	7cfb      	ldrb	r3, [r7, #19]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030cc:	7cfb      	ldrb	r3, [r7, #19]
 80030ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030dc:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030ea:	490d      	ldr	r1, [pc, #52]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030fe:	4b08      	ldr	r3, [pc, #32]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003104:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800310e:	4904      	ldr	r1, [pc, #16]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003116:	7cbb      	ldrb	r3, [r7, #18]
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000

08003124 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003132:	4b75      	ldr	r3, [pc, #468]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d018      	beq.n	8003170 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0203 	and.w	r2, r3, #3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d10d      	bne.n	800316a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
       ||
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003156:	4b6c      	ldr	r3, [pc, #432]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	091b      	lsrs	r3, r3, #4
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	1c5a      	adds	r2, r3, #1
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
       ||
 8003166:	429a      	cmp	r2, r3
 8003168:	d047      	beq.n	80031fa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
 800316e:	e044      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b03      	cmp	r3, #3
 8003176:	d018      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0x86>
 8003178:	2b03      	cmp	r3, #3
 800317a:	d825      	bhi.n	80031c8 <RCCEx_PLLSAI1_Config+0xa4>
 800317c:	2b01      	cmp	r3, #1
 800317e:	d002      	beq.n	8003186 <RCCEx_PLLSAI1_Config+0x62>
 8003180:	2b02      	cmp	r3, #2
 8003182:	d009      	beq.n	8003198 <RCCEx_PLLSAI1_Config+0x74>
 8003184:	e020      	b.n	80031c8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003186:	4b60      	ldr	r3, [pc, #384]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d11d      	bne.n	80031ce <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003196:	e01a      	b.n	80031ce <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003198:	4b5b      	ldr	r3, [pc, #364]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d116      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a8:	e013      	b.n	80031d2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031aa:	4b57      	ldr	r3, [pc, #348]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10f      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031b6:	4b54      	ldr	r3, [pc, #336]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d109      	bne.n	80031d6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031c6:	e006      	b.n	80031d6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e004      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ce:	bf00      	nop
 80031d0:	e002      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031d2:	bf00      	nop
 80031d4:	e000      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031d6:	bf00      	nop
    }

    if(status == HAL_OK)
 80031d8:	7bfb      	ldrb	r3, [r7, #15]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10d      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031de:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6819      	ldr	r1, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	430b      	orrs	r3, r1
 80031f4:	4944      	ldr	r1, [pc, #272]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d17d      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003200:	4b41      	ldr	r3, [pc, #260]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a40      	ldr	r2, [pc, #256]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003206:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800320a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800320c:	f7fd fec8 	bl	8000fa0 <HAL_GetTick>
 8003210:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003212:	e009      	b.n	8003228 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003214:	f7fd fec4 	bl	8000fa0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d902      	bls.n	8003228 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	73fb      	strb	r3, [r7, #15]
        break;
 8003226:	e005      	b.n	8003234 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003228:	4b37      	ldr	r3, [pc, #220]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1ef      	bne.n	8003214 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003234:	7bfb      	ldrb	r3, [r7, #15]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d160      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d111      	bne.n	8003264 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003240:	4b31      	ldr	r3, [pc, #196]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6892      	ldr	r2, [r2, #8]
 8003250:	0211      	lsls	r1, r2, #8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68d2      	ldr	r2, [r2, #12]
 8003256:	0912      	lsrs	r2, r2, #4
 8003258:	0452      	lsls	r2, r2, #17
 800325a:	430a      	orrs	r2, r1
 800325c:	492a      	ldr	r1, [pc, #168]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	610b      	str	r3, [r1, #16]
 8003262:	e027      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d112      	bne.n	8003290 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800326a:	4b27      	ldr	r3, [pc, #156]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003272:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6892      	ldr	r2, [r2, #8]
 800327a:	0211      	lsls	r1, r2, #8
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6912      	ldr	r2, [r2, #16]
 8003280:	0852      	lsrs	r2, r2, #1
 8003282:	3a01      	subs	r2, #1
 8003284:	0552      	lsls	r2, r2, #21
 8003286:	430a      	orrs	r2, r1
 8003288:	491f      	ldr	r1, [pc, #124]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	610b      	str	r3, [r1, #16]
 800328e:	e011      	b.n	80032b4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003298:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6892      	ldr	r2, [r2, #8]
 80032a0:	0211      	lsls	r1, r2, #8
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6952      	ldr	r2, [r2, #20]
 80032a6:	0852      	lsrs	r2, r2, #1
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0652      	lsls	r2, r2, #25
 80032ac:	430a      	orrs	r2, r1
 80032ae:	4916      	ldr	r1, [pc, #88]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a13      	ldr	r2, [pc, #76]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd fe6e 	bl	8000fa0 <HAL_GetTick>
 80032c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c6:	e009      	b.n	80032dc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032c8:	f7fd fe6a 	bl	8000fa0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d902      	bls.n	80032dc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	73fb      	strb	r3, [r7, #15]
          break;
 80032da:	e005      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032dc:	4b0a      	ldr	r3, [pc, #40]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ef      	beq.n	80032c8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d106      	bne.n	80032fc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032ee:	4b06      	ldr	r3, [pc, #24]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f0:	691a      	ldr	r2, [r3, #16]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	4904      	ldr	r1, [pc, #16]	; (8003308 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3710      	adds	r7, #16
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40021000 	.word	0x40021000

0800330c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003316:	2300      	movs	r3, #0
 8003318:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800331a:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d018      	beq.n	8003358 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0203 	and.w	r2, r3, #3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d10d      	bne.n	8003352 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
       ||
 800333a:	2b00      	cmp	r3, #0
 800333c:	d009      	beq.n	8003352 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800333e:	4b61      	ldr	r3, [pc, #388]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	1c5a      	adds	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
       ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d047      	beq.n	80033e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
 8003356:	e044      	b.n	80033e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d018      	beq.n	8003392 <RCCEx_PLLSAI2_Config+0x86>
 8003360:	2b03      	cmp	r3, #3
 8003362:	d825      	bhi.n	80033b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003364:	2b01      	cmp	r3, #1
 8003366:	d002      	beq.n	800336e <RCCEx_PLLSAI2_Config+0x62>
 8003368:	2b02      	cmp	r3, #2
 800336a:	d009      	beq.n	8003380 <RCCEx_PLLSAI2_Config+0x74>
 800336c:	e020      	b.n	80033b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800336e:	4b55      	ldr	r3, [pc, #340]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d11d      	bne.n	80033b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337e:	e01a      	b.n	80033b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003380:	4b50      	ldr	r3, [pc, #320]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d116      	bne.n	80033ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e013      	b.n	80033ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003392:	4b4c      	ldr	r3, [pc, #304]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10f      	bne.n	80033be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800339e:	4b49      	ldr	r3, [pc, #292]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033ae:	e006      	b.n	80033be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e004      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033b6:	bf00      	nop
 80033b8:	e002      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033be:	bf00      	nop
    }

    if(status == HAL_OK)
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10d      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033c6:	4b3f      	ldr	r3, [pc, #252]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6819      	ldr	r1, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	011b      	lsls	r3, r3, #4
 80033da:	430b      	orrs	r3, r1
 80033dc:	4939      	ldr	r1, [pc, #228]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d167      	bne.n	80034b8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80033e8:	4b36      	ldr	r3, [pc, #216]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a35      	ldr	r2, [pc, #212]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fd fdd4 	bl	8000fa0 <HAL_GetTick>
 80033f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033fa:	e009      	b.n	8003410 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033fc:	f7fd fdd0 	bl	8000fa0 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	73fb      	strb	r3, [r7, #15]
        break;
 800340e:	e005      	b.n	800341c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003410:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ef      	bne.n	80033fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d14a      	bne.n	80034b8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d111      	bne.n	800344c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003428:	4b26      	ldr	r3, [pc, #152]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	0211      	lsls	r1, r2, #8
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	68d2      	ldr	r2, [r2, #12]
 800343e:	0912      	lsrs	r2, r2, #4
 8003440:	0452      	lsls	r2, r2, #17
 8003442:	430a      	orrs	r2, r1
 8003444:	491f      	ldr	r1, [pc, #124]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	614b      	str	r3, [r1, #20]
 800344a:	e011      	b.n	8003470 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800344c:	4b1d      	ldr	r3, [pc, #116]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003454:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	6912      	ldr	r2, [r2, #16]
 8003462:	0852      	lsrs	r2, r2, #1
 8003464:	3a01      	subs	r2, #1
 8003466:	0652      	lsls	r2, r2, #25
 8003468:	430a      	orrs	r2, r1
 800346a:	4916      	ldr	r1, [pc, #88]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346c:	4313      	orrs	r3, r2
 800346e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003470:	4b14      	ldr	r3, [pc, #80]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347c:	f7fd fd90 	bl	8000fa0 <HAL_GetTick>
 8003480:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003482:	e009      	b.n	8003498 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003484:	f7fd fd8c 	bl	8000fa0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d902      	bls.n	8003498 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	73fb      	strb	r3, [r7, #15]
          break;
 8003496:	e005      	b.n	80034a4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0ef      	beq.n	8003484 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4904      	ldr	r1, [pc, #16]	; (80034c4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e049      	b.n	800356e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7fd fb6c 	bl	8000bcc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f000 f9ee 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	d001      	beq.n	8003590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e04f      	b.n	8003630 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a23      	ldr	r2, [pc, #140]	; (800363c <HAL_TIM_Base_Start_IT+0xc4>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d01d      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ba:	d018      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a1f      	ldr	r2, [pc, #124]	; (8003640 <HAL_TIM_Base_Start_IT+0xc8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d013      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a1e      	ldr	r2, [pc, #120]	; (8003644 <HAL_TIM_Base_Start_IT+0xcc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00e      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1c      	ldr	r2, [pc, #112]	; (8003648 <HAL_TIM_Base_Start_IT+0xd0>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d009      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1b      	ldr	r2, [pc, #108]	; (800364c <HAL_TIM_Base_Start_IT+0xd4>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_TIM_Base_Start_IT+0x76>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a19      	ldr	r2, [pc, #100]	; (8003650 <HAL_TIM_Base_Start_IT+0xd8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d115      	bne.n	800361a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <HAL_TIM_Base_Start_IT+0xdc>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b06      	cmp	r3, #6
 80035fe:	d015      	beq.n	800362c <HAL_TIM_Base_Start_IT+0xb4>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003606:	d011      	beq.n	800362c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0201 	orr.w	r2, r2, #1
 8003616:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	e008      	b.n	800362c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0201 	orr.w	r2, r2, #1
 8003628:	601a      	str	r2, [r3, #0]
 800362a:	e000      	b.n	800362e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40013400 	.word	0x40013400
 8003650:	40014000 	.word	0x40014000
 8003654:	00010007 	.word	0x00010007

08003658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d122      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b02      	cmp	r3, #2
 800367a:	d11b      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f06f 0202 	mvn.w	r2, #2
 8003684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2201      	movs	r2, #1
 800368a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f003 0303 	and.w	r3, r3, #3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d003      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f905 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036a0:	e005      	b.n	80036ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f000 f8f7 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f908 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d122      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0304 	and.w	r3, r3, #4
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d11b      	bne.n	8003708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0204 	mvn.w	r2, #4
 80036d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2202      	movs	r2, #2
 80036de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f8db 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 80036f4:	e005      	b.n	8003702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f8cd 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f8de 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b08      	cmp	r3, #8
 8003714:	d122      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b08      	cmp	r3, #8
 8003722:	d11b      	bne.n	800375c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 0208 	mvn.w	r2, #8
 800372c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2204      	movs	r2, #4
 8003732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f8b1 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 8003748:	e005      	b.n	8003756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8a3 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 f8b4 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	f003 0310 	and.w	r3, r3, #16
 8003766:	2b10      	cmp	r3, #16
 8003768:	d122      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	f003 0310 	and.w	r3, r3, #16
 8003774:	2b10      	cmp	r3, #16
 8003776:	d11b      	bne.n	80037b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0210 	mvn.w	r2, #16
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2208      	movs	r2, #8
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f887 	bl	80038aa <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f879 	bl	8003896 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f88a 	bl	80038be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d10e      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d107      	bne.n	80037dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0201 	mvn.w	r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f7fc fee2 	bl	80005a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d10e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037f4:	2b80      	cmp	r3, #128	; 0x80
 80037f6:	d107      	bne.n	8003808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f99c 	bl	8003b40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003816:	d10e      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003822:	2b80      	cmp	r3, #128	; 0x80
 8003824:	d107      	bne.n	8003836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800382e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f98f 	bl	8003b54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003840:	2b40      	cmp	r3, #64	; 0x40
 8003842:	d10e      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800384e:	2b40      	cmp	r3, #64	; 0x40
 8003850:	d107      	bne.n	8003862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800385a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 f838 	bl	80038d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b20      	cmp	r3, #32
 800386e:	d10e      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0320 	and.w	r3, r3, #32
 800387a:	2b20      	cmp	r3, #32
 800387c:	d107      	bne.n	800388e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0220 	mvn.w	r2, #32
 8003886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f94f 	bl	8003b2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800388e:	bf00      	nop
 8003890:	3708      	adds	r7, #8
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b2:	bf00      	nop
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c6:	bf00      	nop
 80038c8:	370c      	adds	r7, #12
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b083      	sub	sp, #12
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
	...

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a40      	ldr	r2, [pc, #256]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a3d      	ldr	r2, [pc, #244]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3c      	ldr	r2, [pc, #240]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3b      	ldr	r2, [pc, #236]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3a      	ldr	r2, [pc, #232]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a2f      	ldr	r2, [pc, #188]	; (80039fc <TIM_Base_SetConfig+0x114>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01f      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003948:	d01b      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <TIM_Base_SetConfig+0x118>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d017      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2b      	ldr	r2, [pc, #172]	; (8003a04 <TIM_Base_SetConfig+0x11c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <TIM_Base_SetConfig+0x120>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a27      	ldr	r2, [pc, #156]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a26      	ldr	r2, [pc, #152]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	689a      	ldr	r2, [r3, #8]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a10      	ldr	r2, [pc, #64]	; (80039fc <TIM_Base_SetConfig+0x114>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d00f      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <TIM_Base_SetConfig+0x124>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00b      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <TIM_Base_SetConfig+0x128>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d007      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <TIM_Base_SetConfig+0x12c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d003      	beq.n	80039e0 <TIM_Base_SetConfig+0xf8>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <TIM_Base_SetConfig+0x130>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800
 8003a08:	40000c00 	.word	0x40000c00
 8003a0c:	40013400 	.word	0x40013400
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800

08003a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e068      	b.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2e      	ldr	r2, [pc, #184]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2d      	ldr	r2, [pc, #180]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d108      	bne.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003a6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a80:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a1e      	ldr	r2, [pc, #120]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01d      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d018      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a1b      	ldr	r2, [pc, #108]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a1a      	ldr	r2, [pc, #104]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a18      	ldr	r2, [pc, #96]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a13      	ldr	r2, [pc, #76]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a14      	ldr	r2, [pc, #80]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10c      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40013400 	.word	0x40013400
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800
 8003b24:	40000c00 	.word	0x40000c00
 8003b28:	40014000 	.word	0x40014000

08003b2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e040      	b.n	8003bfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d106      	bne.n	8003b90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7fd f844 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2224      	movs	r2, #36	; 0x24
 8003b94:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 f8c0 	bl	8003d2c <UART_SetConfig>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d101      	bne.n	8003bb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e022      	b.n	8003bfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fb6c 	bl	800429c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0201 	orr.w	r2, r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 fbf3 	bl	80043e0 <UART_CheckIdleState>
 8003bfa:	4603      	mov	r3, r0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	603b      	str	r3, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	f040 8082 	bne.w	8003d22 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d002      	beq.n	8003c2a <HAL_UART_Transmit+0x26>
 8003c24:	88fb      	ldrh	r3, [r7, #6]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07a      	b.n	8003d24 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d101      	bne.n	8003c3c <HAL_UART_Transmit+0x38>
 8003c38:	2302      	movs	r3, #2
 8003c3a:	e073      	b.n	8003d24 <HAL_UART_Transmit+0x120>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2221      	movs	r2, #33	; 0x21
 8003c50:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c52:	f7fd f9a5 	bl	8000fa0 <HAL_GetTick>
 8003c56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	88fa      	ldrh	r2, [r7, #6]
 8003c5c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	88fa      	ldrh	r2, [r7, #6]
 8003c64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	d108      	bne.n	8003c84 <HAL_UART_Transmit+0x80>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d104      	bne.n	8003c84 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	61bb      	str	r3, [r7, #24]
 8003c82:	e003      	b.n	8003c8c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003c94:	e02d      	b.n	8003cf2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2180      	movs	r1, #128	; 0x80
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 fbe6 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e039      	b.n	8003d24 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10b      	bne.n	8003cce <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	881a      	ldrh	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cc2:	b292      	uxth	r2, r2
 8003cc4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	3302      	adds	r3, #2
 8003cca:	61bb      	str	r3, [r7, #24]
 8003ccc:	e008      	b.n	8003ce0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	b292      	uxth	r2, r2
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3301      	adds	r3, #1
 8003cde:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1cb      	bne.n	8003c96 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2200      	movs	r2, #0
 8003d06:	2140      	movs	r1, #64	; 0x40
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fbb2 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e005      	b.n	8003d24 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	e000      	b.n	8003d24 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d22:	2302      	movs	r3, #2
  }
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3720      	adds	r7, #32
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d30:	b08a      	sub	sp, #40	; 0x28
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	4ba4      	ldr	r3, [pc, #656]	; (8003fec <UART_SetConfig+0x2c0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a99      	ldr	r2, [pc, #612]	; (8003ff0 <UART_SetConfig+0x2c4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d94:	4313      	orrs	r3, r2
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da8:	430a      	orrs	r2, r1
 8003daa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a90      	ldr	r2, [pc, #576]	; (8003ff4 <UART_SetConfig+0x2c8>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d126      	bne.n	8003e04 <UART_SetConfig+0xd8>
 8003db6:	4b90      	ldr	r3, [pc, #576]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d81b      	bhi.n	8003dfc <UART_SetConfig+0xd0>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0xa0>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ddd 	.word	0x08003ddd
 8003dd0:	08003ded 	.word	0x08003ded
 8003dd4:	08003de5 	.word	0x08003de5
 8003dd8:	08003df5 	.word	0x08003df5
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e116      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e112      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e10e      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e10a      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e106      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a7c      	ldr	r2, [pc, #496]	; (8003ffc <UART_SetConfig+0x2d0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d138      	bne.n	8003e80 <UART_SetConfig+0x154>
 8003e0e:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d82d      	bhi.n	8003e78 <UART_SetConfig+0x14c>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0xf8>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e79 	.word	0x08003e79
 8003e2c:	08003e79 	.word	0x08003e79
 8003e30:	08003e79 	.word	0x08003e79
 8003e34:	08003e69 	.word	0x08003e69
 8003e38:	08003e79 	.word	0x08003e79
 8003e3c:	08003e79 	.word	0x08003e79
 8003e40:	08003e79 	.word	0x08003e79
 8003e44:	08003e61 	.word	0x08003e61
 8003e48:	08003e79 	.word	0x08003e79
 8003e4c:	08003e79 	.word	0x08003e79
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e71 	.word	0x08003e71
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5e:	e0d8      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e60:	2302      	movs	r3, #2
 8003e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e66:	e0d4      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e68:	2304      	movs	r3, #4
 8003e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6e:	e0d0      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e70:	2308      	movs	r3, #8
 8003e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e76:	e0cc      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e78:	2310      	movs	r3, #16
 8003e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7e:	e0c8      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <UART_SetConfig+0x2d4>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d125      	bne.n	8003ed6 <UART_SetConfig+0x1aa>
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e94:	2b30      	cmp	r3, #48	; 0x30
 8003e96:	d016      	beq.n	8003ec6 <UART_SetConfig+0x19a>
 8003e98:	2b30      	cmp	r3, #48	; 0x30
 8003e9a:	d818      	bhi.n	8003ece <UART_SetConfig+0x1a2>
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d00a      	beq.n	8003eb6 <UART_SetConfig+0x18a>
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d814      	bhi.n	8003ece <UART_SetConfig+0x1a2>
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <UART_SetConfig+0x182>
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d008      	beq.n	8003ebe <UART_SetConfig+0x192>
 8003eac:	e00f      	b.n	8003ece <UART_SetConfig+0x1a2>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb4:	e0ad      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ebc:	e0a9      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec4:	e0a5      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ecc:	e0a1      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003ece:	2310      	movs	r3, #16
 8003ed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed4:	e09d      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4a      	ldr	r2, [pc, #296]	; (8004004 <UART_SetConfig+0x2d8>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d125      	bne.n	8003f2c <UART_SetConfig+0x200>
 8003ee0:	4b45      	ldr	r3, [pc, #276]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003eea:	2bc0      	cmp	r3, #192	; 0xc0
 8003eec:	d016      	beq.n	8003f1c <UART_SetConfig+0x1f0>
 8003eee:	2bc0      	cmp	r3, #192	; 0xc0
 8003ef0:	d818      	bhi.n	8003f24 <UART_SetConfig+0x1f8>
 8003ef2:	2b80      	cmp	r3, #128	; 0x80
 8003ef4:	d00a      	beq.n	8003f0c <UART_SetConfig+0x1e0>
 8003ef6:	2b80      	cmp	r3, #128	; 0x80
 8003ef8:	d814      	bhi.n	8003f24 <UART_SetConfig+0x1f8>
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <UART_SetConfig+0x1d8>
 8003efe:	2b40      	cmp	r3, #64	; 0x40
 8003f00:	d008      	beq.n	8003f14 <UART_SetConfig+0x1e8>
 8003f02:	e00f      	b.n	8003f24 <UART_SetConfig+0x1f8>
 8003f04:	2300      	movs	r3, #0
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0a:	e082      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f12:	e07e      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f14:	2304      	movs	r3, #4
 8003f16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1a:	e07a      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f22:	e076      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f24:	2310      	movs	r3, #16
 8003f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f2a:	e072      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	; (8004008 <UART_SetConfig+0x2dc>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d12a      	bne.n	8003f8c <UART_SetConfig+0x260>
 8003f36:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f44:	d01a      	beq.n	8003f7c <UART_SetConfig+0x250>
 8003f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f4a:	d81b      	bhi.n	8003f84 <UART_SetConfig+0x258>
 8003f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f50:	d00c      	beq.n	8003f6c <UART_SetConfig+0x240>
 8003f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f56:	d815      	bhi.n	8003f84 <UART_SetConfig+0x258>
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <UART_SetConfig+0x238>
 8003f5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f60:	d008      	beq.n	8003f74 <UART_SetConfig+0x248>
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x258>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f6a:	e052      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f6c:	2302      	movs	r3, #2
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f72:	e04e      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f74:	2304      	movs	r3, #4
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e04a      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e046      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f84:	2310      	movs	r3, #16
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e042      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <UART_SetConfig+0x2c4>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d13a      	bne.n	800400c <UART_SetConfig+0x2e0>
 8003f96:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <UART_SetConfig+0x2cc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003fa0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fa4:	d01a      	beq.n	8003fdc <UART_SetConfig+0x2b0>
 8003fa6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003faa:	d81b      	bhi.n	8003fe4 <UART_SetConfig+0x2b8>
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d00c      	beq.n	8003fcc <UART_SetConfig+0x2a0>
 8003fb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb6:	d815      	bhi.n	8003fe4 <UART_SetConfig+0x2b8>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d003      	beq.n	8003fc4 <UART_SetConfig+0x298>
 8003fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc0:	d008      	beq.n	8003fd4 <UART_SetConfig+0x2a8>
 8003fc2:	e00f      	b.n	8003fe4 <UART_SetConfig+0x2b8>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fca:	e022      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd2:	e01e      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fda:	e01a      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe2:	e016      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fea:	e012      	b.n	8004012 <UART_SetConfig+0x2e6>
 8003fec:	efff69f3 	.word	0xefff69f3
 8003ff0:	40008000 	.word	0x40008000
 8003ff4:	40013800 	.word	0x40013800
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	40004400 	.word	0x40004400
 8004000:	40004800 	.word	0x40004800
 8004004:	40004c00 	.word	0x40004c00
 8004008:	40005000 	.word	0x40005000
 800400c:	2310      	movs	r3, #16
 800400e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a9f      	ldr	r2, [pc, #636]	; (8004294 <UART_SetConfig+0x568>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d17a      	bne.n	8004112 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800401c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004020:	2b08      	cmp	r3, #8
 8004022:	d824      	bhi.n	800406e <UART_SetConfig+0x342>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x300>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	0800406f 	.word	0x0800406f
 8004034:	08004059 	.word	0x08004059
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800405f 	.word	0x0800405f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	0800406f 	.word	0x0800406f
 8004048:	0800406f 	.word	0x0800406f
 800404c:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fcf2 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8004054:	61f8      	str	r0, [r7, #28]
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b8f      	ldr	r3, [pc, #572]	; (8004298 <UART_SetConfig+0x56c>)
 800405a:	61fb      	str	r3, [r7, #28]
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe fc53 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8004062:	61f8      	str	r0, [r7, #28]
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004078:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80fb 	beq.w	8004278 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	4413      	add	r3, r2
 800408c:	69fa      	ldr	r2, [r7, #28]
 800408e:	429a      	cmp	r2, r3
 8004090:	d305      	bcc.n	800409e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004098:	69fa      	ldr	r2, [r7, #28]
 800409a:	429a      	cmp	r2, r3
 800409c:	d903      	bls.n	80040a6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040a4:	e0e8      	b.n	8004278 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2200      	movs	r2, #0
 80040aa:	461c      	mov	r4, r3
 80040ac:	4615      	mov	r5, r2
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	022b      	lsls	r3, r5, #8
 80040b8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80040bc:	0222      	lsls	r2, r4, #8
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6849      	ldr	r1, [r1, #4]
 80040c2:	0849      	lsrs	r1, r1, #1
 80040c4:	2000      	movs	r0, #0
 80040c6:	4688      	mov	r8, r1
 80040c8:	4681      	mov	r9, r0
 80040ca:	eb12 0a08 	adds.w	sl, r2, r8
 80040ce:	eb43 0b09 	adc.w	fp, r3, r9
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e0:	4650      	mov	r0, sl
 80040e2:	4659      	mov	r1, fp
 80040e4:	f7fc f8c4 	bl	8000270 <__aeabi_uldivmod>
 80040e8:	4602      	mov	r2, r0
 80040ea:	460b      	mov	r3, r1
 80040ec:	4613      	mov	r3, r2
 80040ee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f6:	d308      	bcc.n	800410a <UART_SetConfig+0x3de>
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d204      	bcs.n	800410a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	60da      	str	r2, [r3, #12]
 8004108:	e0b6      	b.n	8004278 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004110:	e0b2      	b.n	8004278 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411a:	d15e      	bne.n	80041da <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800411c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004120:	2b08      	cmp	r3, #8
 8004122:	d828      	bhi.n	8004176 <UART_SetConfig+0x44a>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <UART_SetConfig+0x400>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	08004151 	.word	0x08004151
 8004130:	08004159 	.word	0x08004159
 8004134:	08004161 	.word	0x08004161
 8004138:	08004177 	.word	0x08004177
 800413c:	08004167 	.word	0x08004167
 8004140:	08004177 	.word	0x08004177
 8004144:	08004177 	.word	0x08004177
 8004148:	08004177 	.word	0x08004177
 800414c:	0800416f 	.word	0x0800416f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004150:	f7fe fc72 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8004154:	61f8      	str	r0, [r7, #28]
        break;
 8004156:	e014      	b.n	8004182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004158:	f7fe fc84 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 800415c:	61f8      	str	r0, [r7, #28]
        break;
 800415e:	e010      	b.n	8004182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004160:	4b4d      	ldr	r3, [pc, #308]	; (8004298 <UART_SetConfig+0x56c>)
 8004162:	61fb      	str	r3, [r7, #28]
        break;
 8004164:	e00d      	b.n	8004182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004166:	f7fe fbcf 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 800416a:	61f8      	str	r0, [r7, #28]
        break;
 800416c:	e009      	b.n	8004182 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	61fb      	str	r3, [r7, #28]
        break;
 8004174:	e005      	b.n	8004182 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004176:	2300      	movs	r3, #0
 8004178:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004180:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d077      	beq.n	8004278 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	005a      	lsls	r2, r3, #1
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	085b      	lsrs	r3, r3, #1
 8004192:	441a      	add	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b0f      	cmp	r3, #15
 80041a2:	d916      	bls.n	80041d2 <UART_SetConfig+0x4a6>
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041aa:	d212      	bcs.n	80041d2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80041ac:	69bb      	ldr	r3, [r7, #24]
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	f023 030f 	bic.w	r3, r3, #15
 80041b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f003 0307 	and.w	r3, r3, #7
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	8afb      	ldrh	r3, [r7, #22]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	8afa      	ldrh	r2, [r7, #22]
 80041ce:	60da      	str	r2, [r3, #12]
 80041d0:	e052      	b.n	8004278 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80041d8:	e04e      	b.n	8004278 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80041de:	2b08      	cmp	r3, #8
 80041e0:	d827      	bhi.n	8004232 <UART_SetConfig+0x506>
 80041e2:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0x4bc>)
 80041e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e8:	0800420d 	.word	0x0800420d
 80041ec:	08004215 	.word	0x08004215
 80041f0:	0800421d 	.word	0x0800421d
 80041f4:	08004233 	.word	0x08004233
 80041f8:	08004223 	.word	0x08004223
 80041fc:	08004233 	.word	0x08004233
 8004200:	08004233 	.word	0x08004233
 8004204:	08004233 	.word	0x08004233
 8004208:	0800422b 	.word	0x0800422b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800420c:	f7fe fc14 	bl	8002a38 <HAL_RCC_GetPCLK1Freq>
 8004210:	61f8      	str	r0, [r7, #28]
        break;
 8004212:	e014      	b.n	800423e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004214:	f7fe fc26 	bl	8002a64 <HAL_RCC_GetPCLK2Freq>
 8004218:	61f8      	str	r0, [r7, #28]
        break;
 800421a:	e010      	b.n	800423e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800421c:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <UART_SetConfig+0x56c>)
 800421e:	61fb      	str	r3, [r7, #28]
        break;
 8004220:	e00d      	b.n	800423e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004222:	f7fe fb71 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8004226:	61f8      	str	r0, [r7, #28]
        break;
 8004228:	e009      	b.n	800423e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800422a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800422e:	61fb      	str	r3, [r7, #28]
        break;
 8004230:	e005      	b.n	800423e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800423c:	bf00      	nop
    }

    if (pclk != 0U)
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d019      	beq.n	8004278 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	085a      	lsrs	r2, r3, #1
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	fbb2 f3f3 	udiv	r3, r2, r3
 8004256:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b0f      	cmp	r3, #15
 800425c:	d909      	bls.n	8004272 <UART_SetConfig+0x546>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004264:	d205      	bcs.n	8004272 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60da      	str	r2, [r3, #12]
 8004270:	e002      	b.n	8004278 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004284:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004288:	4618      	mov	r0, r3
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004292:	bf00      	nop
 8004294:	40008000 	.word	0x40008000
 8004298:	00f42400 	.word	0x00f42400

0800429c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	f003 0310 	and.w	r3, r3, #16
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00a      	beq.n	800434e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00a      	beq.n	8004370 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	430a      	orrs	r2, r1
 800436e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004378:	2b00      	cmp	r3, #0
 800437a:	d01a      	beq.n	80043b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	430a      	orrs	r2, r1
 8004390:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439a:	d10a      	bne.n	80043b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	605a      	str	r2, [r3, #4]
  }
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af02      	add	r7, sp, #8
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043f0:	f7fc fdd6 	bl	8000fa0 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b08      	cmp	r3, #8
 8004402:	d10e      	bne.n	8004422 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004404:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004408:	9300      	str	r3, [sp, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f82d 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d001      	beq.n	8004422 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800441e:	2303      	movs	r3, #3
 8004420:	e023      	b.n	800446a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d10e      	bne.n	800444e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004430:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f817 	bl	8004472 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00d      	b.n	800446a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2220      	movs	r2, #32
 8004458:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b09c      	sub	sp, #112	; 0x70
 8004476:	af00      	add	r7, sp, #0
 8004478:	60f8      	str	r0, [r7, #12]
 800447a:	60b9      	str	r1, [r7, #8]
 800447c:	603b      	str	r3, [r7, #0]
 800447e:	4613      	mov	r3, r2
 8004480:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	e0a5      	b.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	f000 80a1 	beq.w	80045d0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448e:	f7fc fd87 	bl	8000fa0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800449a:	429a      	cmp	r2, r3
 800449c:	d302      	bcc.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800449e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d13e      	bne.n	8004522 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80044b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80044b8:	667b      	str	r3, [r7, #100]	; 0x64
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80044c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80044c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80044d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e6      	bne.n	80044a4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3308      	adds	r3, #8
 80044dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	f023 0301 	bic.w	r3, r3, #1
 80044ec:	663b      	str	r3, [r7, #96]	; 0x60
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3308      	adds	r3, #8
 80044f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80044f6:	64ba      	str	r2, [r7, #72]	; 0x48
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80044fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004504:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e067      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d04f      	beq.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800453e:	d147      	bne.n	80045d0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004548:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	e853 3f00 	ldrex	r3, [r3]
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800455e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	461a      	mov	r2, r3
 8004566:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004568:	637b      	str	r3, [r7, #52]	; 0x34
 800456a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800456c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800456e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004570:	e841 2300 	strex	r3, r2, [r1]
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1e6      	bne.n	800454a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3308      	adds	r3, #8
 8004582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	e853 3f00 	ldrex	r3, [r3]
 800458a:	613b      	str	r3, [r7, #16]
   return(result);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	66bb      	str	r3, [r7, #104]	; 0x68
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3308      	adds	r3, #8
 800459a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800459c:	623a      	str	r2, [r7, #32]
 800459e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a0:	69f9      	ldr	r1, [r7, #28]
 80045a2:	6a3a      	ldr	r2, [r7, #32]
 80045a4:	e841 2300 	strex	r3, r2, [r1]
 80045a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1e5      	bne.n	800457c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2220      	movs	r2, #32
 80045ba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e010      	b.n	80045f2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	69da      	ldr	r2, [r3, #28]
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4013      	ands	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	429a      	cmp	r2, r3
 80045de:	bf0c      	ite	eq
 80045e0:	2301      	moveq	r3, #1
 80045e2:	2300      	movne	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	461a      	mov	r2, r3
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	f43f af4a 	beq.w	8004484 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3770      	adds	r7, #112	; 0x70
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
	...

080045fc <__errno>:
 80045fc:	4b01      	ldr	r3, [pc, #4]	; (8004604 <__errno+0x8>)
 80045fe:	6818      	ldr	r0, [r3, #0]
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000054 	.word	0x20000054

08004608 <__libc_init_array>:
 8004608:	b570      	push	{r4, r5, r6, lr}
 800460a:	4d0d      	ldr	r5, [pc, #52]	; (8004640 <__libc_init_array+0x38>)
 800460c:	4c0d      	ldr	r4, [pc, #52]	; (8004644 <__libc_init_array+0x3c>)
 800460e:	1b64      	subs	r4, r4, r5
 8004610:	10a4      	asrs	r4, r4, #2
 8004612:	2600      	movs	r6, #0
 8004614:	42a6      	cmp	r6, r4
 8004616:	d109      	bne.n	800462c <__libc_init_array+0x24>
 8004618:	4d0b      	ldr	r5, [pc, #44]	; (8004648 <__libc_init_array+0x40>)
 800461a:	4c0c      	ldr	r4, [pc, #48]	; (800464c <__libc_init_array+0x44>)
 800461c:	f000 ffae 	bl	800557c <_init>
 8004620:	1b64      	subs	r4, r4, r5
 8004622:	10a4      	asrs	r4, r4, #2
 8004624:	2600      	movs	r6, #0
 8004626:	42a6      	cmp	r6, r4
 8004628:	d105      	bne.n	8004636 <__libc_init_array+0x2e>
 800462a:	bd70      	pop	{r4, r5, r6, pc}
 800462c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004630:	4798      	blx	r3
 8004632:	3601      	adds	r6, #1
 8004634:	e7ee      	b.n	8004614 <__libc_init_array+0xc>
 8004636:	f855 3b04 	ldr.w	r3, [r5], #4
 800463a:	4798      	blx	r3
 800463c:	3601      	adds	r6, #1
 800463e:	e7f2      	b.n	8004626 <__libc_init_array+0x1e>
 8004640:	08005698 	.word	0x08005698
 8004644:	08005698 	.word	0x08005698
 8004648:	08005698 	.word	0x08005698
 800464c:	0800569c 	.word	0x0800569c

08004650 <memset>:
 8004650:	4402      	add	r2, r0
 8004652:	4603      	mov	r3, r0
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	f803 1b01 	strb.w	r1, [r3], #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <iprintf>:
 8004660:	b40f      	push	{r0, r1, r2, r3}
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <iprintf+0x2c>)
 8004664:	b513      	push	{r0, r1, r4, lr}
 8004666:	681c      	ldr	r4, [r3, #0]
 8004668:	b124      	cbz	r4, 8004674 <iprintf+0x14>
 800466a:	69a3      	ldr	r3, [r4, #24]
 800466c:	b913      	cbnz	r3, 8004674 <iprintf+0x14>
 800466e:	4620      	mov	r0, r4
 8004670:	f000 f866 	bl	8004740 <__sinit>
 8004674:	ab05      	add	r3, sp, #20
 8004676:	9a04      	ldr	r2, [sp, #16]
 8004678:	68a1      	ldr	r1, [r4, #8]
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	4620      	mov	r0, r4
 800467e:	f000 f9bd 	bl	80049fc <_vfiprintf_r>
 8004682:	b002      	add	sp, #8
 8004684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004688:	b004      	add	sp, #16
 800468a:	4770      	bx	lr
 800468c:	20000054 	.word	0x20000054

08004690 <std>:
 8004690:	2300      	movs	r3, #0
 8004692:	b510      	push	{r4, lr}
 8004694:	4604      	mov	r4, r0
 8004696:	e9c0 3300 	strd	r3, r3, [r0]
 800469a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800469e:	6083      	str	r3, [r0, #8]
 80046a0:	8181      	strh	r1, [r0, #12]
 80046a2:	6643      	str	r3, [r0, #100]	; 0x64
 80046a4:	81c2      	strh	r2, [r0, #14]
 80046a6:	6183      	str	r3, [r0, #24]
 80046a8:	4619      	mov	r1, r3
 80046aa:	2208      	movs	r2, #8
 80046ac:	305c      	adds	r0, #92	; 0x5c
 80046ae:	f7ff ffcf 	bl	8004650 <memset>
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <std+0x38>)
 80046b4:	6263      	str	r3, [r4, #36]	; 0x24
 80046b6:	4b05      	ldr	r3, [pc, #20]	; (80046cc <std+0x3c>)
 80046b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80046ba:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <std+0x40>)
 80046bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80046be:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <std+0x44>)
 80046c0:	6224      	str	r4, [r4, #32]
 80046c2:	6323      	str	r3, [r4, #48]	; 0x30
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	bf00      	nop
 80046c8:	08004fa5 	.word	0x08004fa5
 80046cc:	08004fc7 	.word	0x08004fc7
 80046d0:	08004fff 	.word	0x08004fff
 80046d4:	08005023 	.word	0x08005023

080046d8 <_cleanup_r>:
 80046d8:	4901      	ldr	r1, [pc, #4]	; (80046e0 <_cleanup_r+0x8>)
 80046da:	f000 b8af 	b.w	800483c <_fwalk_reent>
 80046de:	bf00      	nop
 80046e0:	080052fd 	.word	0x080052fd

080046e4 <__sfmoreglue>:
 80046e4:	b570      	push	{r4, r5, r6, lr}
 80046e6:	2268      	movs	r2, #104	; 0x68
 80046e8:	1e4d      	subs	r5, r1, #1
 80046ea:	4355      	muls	r5, r2
 80046ec:	460e      	mov	r6, r1
 80046ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80046f2:	f000 f8e5 	bl	80048c0 <_malloc_r>
 80046f6:	4604      	mov	r4, r0
 80046f8:	b140      	cbz	r0, 800470c <__sfmoreglue+0x28>
 80046fa:	2100      	movs	r1, #0
 80046fc:	e9c0 1600 	strd	r1, r6, [r0]
 8004700:	300c      	adds	r0, #12
 8004702:	60a0      	str	r0, [r4, #8]
 8004704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004708:	f7ff ffa2 	bl	8004650 <memset>
 800470c:	4620      	mov	r0, r4
 800470e:	bd70      	pop	{r4, r5, r6, pc}

08004710 <__sfp_lock_acquire>:
 8004710:	4801      	ldr	r0, [pc, #4]	; (8004718 <__sfp_lock_acquire+0x8>)
 8004712:	f000 b8b3 	b.w	800487c <__retarget_lock_acquire_recursive>
 8004716:	bf00      	nop
 8004718:	2000021d 	.word	0x2000021d

0800471c <__sfp_lock_release>:
 800471c:	4801      	ldr	r0, [pc, #4]	; (8004724 <__sfp_lock_release+0x8>)
 800471e:	f000 b8ae 	b.w	800487e <__retarget_lock_release_recursive>
 8004722:	bf00      	nop
 8004724:	2000021d 	.word	0x2000021d

08004728 <__sinit_lock_acquire>:
 8004728:	4801      	ldr	r0, [pc, #4]	; (8004730 <__sinit_lock_acquire+0x8>)
 800472a:	f000 b8a7 	b.w	800487c <__retarget_lock_acquire_recursive>
 800472e:	bf00      	nop
 8004730:	2000021e 	.word	0x2000021e

08004734 <__sinit_lock_release>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__sinit_lock_release+0x8>)
 8004736:	f000 b8a2 	b.w	800487e <__retarget_lock_release_recursive>
 800473a:	bf00      	nop
 800473c:	2000021e 	.word	0x2000021e

08004740 <__sinit>:
 8004740:	b510      	push	{r4, lr}
 8004742:	4604      	mov	r4, r0
 8004744:	f7ff fff0 	bl	8004728 <__sinit_lock_acquire>
 8004748:	69a3      	ldr	r3, [r4, #24]
 800474a:	b11b      	cbz	r3, 8004754 <__sinit+0x14>
 800474c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004750:	f7ff bff0 	b.w	8004734 <__sinit_lock_release>
 8004754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004758:	6523      	str	r3, [r4, #80]	; 0x50
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <__sinit+0x68>)
 800475c:	4a13      	ldr	r2, [pc, #76]	; (80047ac <__sinit+0x6c>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	62a2      	str	r2, [r4, #40]	; 0x28
 8004762:	42a3      	cmp	r3, r4
 8004764:	bf04      	itt	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	61a3      	streq	r3, [r4, #24]
 800476a:	4620      	mov	r0, r4
 800476c:	f000 f820 	bl	80047b0 <__sfp>
 8004770:	6060      	str	r0, [r4, #4]
 8004772:	4620      	mov	r0, r4
 8004774:	f000 f81c 	bl	80047b0 <__sfp>
 8004778:	60a0      	str	r0, [r4, #8]
 800477a:	4620      	mov	r0, r4
 800477c:	f000 f818 	bl	80047b0 <__sfp>
 8004780:	2200      	movs	r2, #0
 8004782:	60e0      	str	r0, [r4, #12]
 8004784:	2104      	movs	r1, #4
 8004786:	6860      	ldr	r0, [r4, #4]
 8004788:	f7ff ff82 	bl	8004690 <std>
 800478c:	68a0      	ldr	r0, [r4, #8]
 800478e:	2201      	movs	r2, #1
 8004790:	2109      	movs	r1, #9
 8004792:	f7ff ff7d 	bl	8004690 <std>
 8004796:	68e0      	ldr	r0, [r4, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	2112      	movs	r1, #18
 800479c:	f7ff ff78 	bl	8004690 <std>
 80047a0:	2301      	movs	r3, #1
 80047a2:	61a3      	str	r3, [r4, #24]
 80047a4:	e7d2      	b.n	800474c <__sinit+0xc>
 80047a6:	bf00      	nop
 80047a8:	080055f8 	.word	0x080055f8
 80047ac:	080046d9 	.word	0x080046d9

080047b0 <__sfp>:
 80047b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b2:	4607      	mov	r7, r0
 80047b4:	f7ff ffac 	bl	8004710 <__sfp_lock_acquire>
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <__sfp+0x84>)
 80047ba:	681e      	ldr	r6, [r3, #0]
 80047bc:	69b3      	ldr	r3, [r6, #24]
 80047be:	b913      	cbnz	r3, 80047c6 <__sfp+0x16>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f7ff ffbd 	bl	8004740 <__sinit>
 80047c6:	3648      	adds	r6, #72	; 0x48
 80047c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80047cc:	3b01      	subs	r3, #1
 80047ce:	d503      	bpl.n	80047d8 <__sfp+0x28>
 80047d0:	6833      	ldr	r3, [r6, #0]
 80047d2:	b30b      	cbz	r3, 8004818 <__sfp+0x68>
 80047d4:	6836      	ldr	r6, [r6, #0]
 80047d6:	e7f7      	b.n	80047c8 <__sfp+0x18>
 80047d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80047dc:	b9d5      	cbnz	r5, 8004814 <__sfp+0x64>
 80047de:	4b16      	ldr	r3, [pc, #88]	; (8004838 <__sfp+0x88>)
 80047e0:	60e3      	str	r3, [r4, #12]
 80047e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80047e6:	6665      	str	r5, [r4, #100]	; 0x64
 80047e8:	f000 f847 	bl	800487a <__retarget_lock_init_recursive>
 80047ec:	f7ff ff96 	bl	800471c <__sfp_lock_release>
 80047f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80047f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80047f8:	6025      	str	r5, [r4, #0]
 80047fa:	61a5      	str	r5, [r4, #24]
 80047fc:	2208      	movs	r2, #8
 80047fe:	4629      	mov	r1, r5
 8004800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004804:	f7ff ff24 	bl	8004650 <memset>
 8004808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800480c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004810:	4620      	mov	r0, r4
 8004812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004814:	3468      	adds	r4, #104	; 0x68
 8004816:	e7d9      	b.n	80047cc <__sfp+0x1c>
 8004818:	2104      	movs	r1, #4
 800481a:	4638      	mov	r0, r7
 800481c:	f7ff ff62 	bl	80046e4 <__sfmoreglue>
 8004820:	4604      	mov	r4, r0
 8004822:	6030      	str	r0, [r6, #0]
 8004824:	2800      	cmp	r0, #0
 8004826:	d1d5      	bne.n	80047d4 <__sfp+0x24>
 8004828:	f7ff ff78 	bl	800471c <__sfp_lock_release>
 800482c:	230c      	movs	r3, #12
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	e7ee      	b.n	8004810 <__sfp+0x60>
 8004832:	bf00      	nop
 8004834:	080055f8 	.word	0x080055f8
 8004838:	ffff0001 	.word	0xffff0001

0800483c <_fwalk_reent>:
 800483c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004840:	4606      	mov	r6, r0
 8004842:	4688      	mov	r8, r1
 8004844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004848:	2700      	movs	r7, #0
 800484a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800484e:	f1b9 0901 	subs.w	r9, r9, #1
 8004852:	d505      	bpl.n	8004860 <_fwalk_reent+0x24>
 8004854:	6824      	ldr	r4, [r4, #0]
 8004856:	2c00      	cmp	r4, #0
 8004858:	d1f7      	bne.n	800484a <_fwalk_reent+0xe>
 800485a:	4638      	mov	r0, r7
 800485c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004860:	89ab      	ldrh	r3, [r5, #12]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d907      	bls.n	8004876 <_fwalk_reent+0x3a>
 8004866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800486a:	3301      	adds	r3, #1
 800486c:	d003      	beq.n	8004876 <_fwalk_reent+0x3a>
 800486e:	4629      	mov	r1, r5
 8004870:	4630      	mov	r0, r6
 8004872:	47c0      	blx	r8
 8004874:	4307      	orrs	r7, r0
 8004876:	3568      	adds	r5, #104	; 0x68
 8004878:	e7e9      	b.n	800484e <_fwalk_reent+0x12>

0800487a <__retarget_lock_init_recursive>:
 800487a:	4770      	bx	lr

0800487c <__retarget_lock_acquire_recursive>:
 800487c:	4770      	bx	lr

0800487e <__retarget_lock_release_recursive>:
 800487e:	4770      	bx	lr

08004880 <sbrk_aligned>:
 8004880:	b570      	push	{r4, r5, r6, lr}
 8004882:	4e0e      	ldr	r6, [pc, #56]	; (80048bc <sbrk_aligned+0x3c>)
 8004884:	460c      	mov	r4, r1
 8004886:	6831      	ldr	r1, [r6, #0]
 8004888:	4605      	mov	r5, r0
 800488a:	b911      	cbnz	r1, 8004892 <sbrk_aligned+0x12>
 800488c:	f000 fb7a 	bl	8004f84 <_sbrk_r>
 8004890:	6030      	str	r0, [r6, #0]
 8004892:	4621      	mov	r1, r4
 8004894:	4628      	mov	r0, r5
 8004896:	f000 fb75 	bl	8004f84 <_sbrk_r>
 800489a:	1c43      	adds	r3, r0, #1
 800489c:	d00a      	beq.n	80048b4 <sbrk_aligned+0x34>
 800489e:	1cc4      	adds	r4, r0, #3
 80048a0:	f024 0403 	bic.w	r4, r4, #3
 80048a4:	42a0      	cmp	r0, r4
 80048a6:	d007      	beq.n	80048b8 <sbrk_aligned+0x38>
 80048a8:	1a21      	subs	r1, r4, r0
 80048aa:	4628      	mov	r0, r5
 80048ac:	f000 fb6a 	bl	8004f84 <_sbrk_r>
 80048b0:	3001      	adds	r0, #1
 80048b2:	d101      	bne.n	80048b8 <sbrk_aligned+0x38>
 80048b4:	f04f 34ff 	mov.w	r4, #4294967295
 80048b8:	4620      	mov	r0, r4
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	20000224 	.word	0x20000224

080048c0 <_malloc_r>:
 80048c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048c4:	1ccd      	adds	r5, r1, #3
 80048c6:	f025 0503 	bic.w	r5, r5, #3
 80048ca:	3508      	adds	r5, #8
 80048cc:	2d0c      	cmp	r5, #12
 80048ce:	bf38      	it	cc
 80048d0:	250c      	movcc	r5, #12
 80048d2:	2d00      	cmp	r5, #0
 80048d4:	4607      	mov	r7, r0
 80048d6:	db01      	blt.n	80048dc <_malloc_r+0x1c>
 80048d8:	42a9      	cmp	r1, r5
 80048da:	d905      	bls.n	80048e8 <_malloc_r+0x28>
 80048dc:	230c      	movs	r3, #12
 80048de:	603b      	str	r3, [r7, #0]
 80048e0:	2600      	movs	r6, #0
 80048e2:	4630      	mov	r0, r6
 80048e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048e8:	4e2e      	ldr	r6, [pc, #184]	; (80049a4 <_malloc_r+0xe4>)
 80048ea:	f000 fdbb 	bl	8005464 <__malloc_lock>
 80048ee:	6833      	ldr	r3, [r6, #0]
 80048f0:	461c      	mov	r4, r3
 80048f2:	bb34      	cbnz	r4, 8004942 <_malloc_r+0x82>
 80048f4:	4629      	mov	r1, r5
 80048f6:	4638      	mov	r0, r7
 80048f8:	f7ff ffc2 	bl	8004880 <sbrk_aligned>
 80048fc:	1c43      	adds	r3, r0, #1
 80048fe:	4604      	mov	r4, r0
 8004900:	d14d      	bne.n	800499e <_malloc_r+0xde>
 8004902:	6834      	ldr	r4, [r6, #0]
 8004904:	4626      	mov	r6, r4
 8004906:	2e00      	cmp	r6, #0
 8004908:	d140      	bne.n	800498c <_malloc_r+0xcc>
 800490a:	6823      	ldr	r3, [r4, #0]
 800490c:	4631      	mov	r1, r6
 800490e:	4638      	mov	r0, r7
 8004910:	eb04 0803 	add.w	r8, r4, r3
 8004914:	f000 fb36 	bl	8004f84 <_sbrk_r>
 8004918:	4580      	cmp	r8, r0
 800491a:	d13a      	bne.n	8004992 <_malloc_r+0xd2>
 800491c:	6821      	ldr	r1, [r4, #0]
 800491e:	3503      	adds	r5, #3
 8004920:	1a6d      	subs	r5, r5, r1
 8004922:	f025 0503 	bic.w	r5, r5, #3
 8004926:	3508      	adds	r5, #8
 8004928:	2d0c      	cmp	r5, #12
 800492a:	bf38      	it	cc
 800492c:	250c      	movcc	r5, #12
 800492e:	4629      	mov	r1, r5
 8004930:	4638      	mov	r0, r7
 8004932:	f7ff ffa5 	bl	8004880 <sbrk_aligned>
 8004936:	3001      	adds	r0, #1
 8004938:	d02b      	beq.n	8004992 <_malloc_r+0xd2>
 800493a:	6823      	ldr	r3, [r4, #0]
 800493c:	442b      	add	r3, r5
 800493e:	6023      	str	r3, [r4, #0]
 8004940:	e00e      	b.n	8004960 <_malloc_r+0xa0>
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	1b52      	subs	r2, r2, r5
 8004946:	d41e      	bmi.n	8004986 <_malloc_r+0xc6>
 8004948:	2a0b      	cmp	r2, #11
 800494a:	d916      	bls.n	800497a <_malloc_r+0xba>
 800494c:	1961      	adds	r1, r4, r5
 800494e:	42a3      	cmp	r3, r4
 8004950:	6025      	str	r5, [r4, #0]
 8004952:	bf18      	it	ne
 8004954:	6059      	strne	r1, [r3, #4]
 8004956:	6863      	ldr	r3, [r4, #4]
 8004958:	bf08      	it	eq
 800495a:	6031      	streq	r1, [r6, #0]
 800495c:	5162      	str	r2, [r4, r5]
 800495e:	604b      	str	r3, [r1, #4]
 8004960:	4638      	mov	r0, r7
 8004962:	f104 060b 	add.w	r6, r4, #11
 8004966:	f000 fd83 	bl	8005470 <__malloc_unlock>
 800496a:	f026 0607 	bic.w	r6, r6, #7
 800496e:	1d23      	adds	r3, r4, #4
 8004970:	1af2      	subs	r2, r6, r3
 8004972:	d0b6      	beq.n	80048e2 <_malloc_r+0x22>
 8004974:	1b9b      	subs	r3, r3, r6
 8004976:	50a3      	str	r3, [r4, r2]
 8004978:	e7b3      	b.n	80048e2 <_malloc_r+0x22>
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	42a3      	cmp	r3, r4
 800497e:	bf0c      	ite	eq
 8004980:	6032      	streq	r2, [r6, #0]
 8004982:	605a      	strne	r2, [r3, #4]
 8004984:	e7ec      	b.n	8004960 <_malloc_r+0xa0>
 8004986:	4623      	mov	r3, r4
 8004988:	6864      	ldr	r4, [r4, #4]
 800498a:	e7b2      	b.n	80048f2 <_malloc_r+0x32>
 800498c:	4634      	mov	r4, r6
 800498e:	6876      	ldr	r6, [r6, #4]
 8004990:	e7b9      	b.n	8004906 <_malloc_r+0x46>
 8004992:	230c      	movs	r3, #12
 8004994:	603b      	str	r3, [r7, #0]
 8004996:	4638      	mov	r0, r7
 8004998:	f000 fd6a 	bl	8005470 <__malloc_unlock>
 800499c:	e7a1      	b.n	80048e2 <_malloc_r+0x22>
 800499e:	6025      	str	r5, [r4, #0]
 80049a0:	e7de      	b.n	8004960 <_malloc_r+0xa0>
 80049a2:	bf00      	nop
 80049a4:	20000220 	.word	0x20000220

080049a8 <__sfputc_r>:
 80049a8:	6893      	ldr	r3, [r2, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	b410      	push	{r4}
 80049b0:	6093      	str	r3, [r2, #8]
 80049b2:	da08      	bge.n	80049c6 <__sfputc_r+0x1e>
 80049b4:	6994      	ldr	r4, [r2, #24]
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	db01      	blt.n	80049be <__sfputc_r+0x16>
 80049ba:	290a      	cmp	r1, #10
 80049bc:	d103      	bne.n	80049c6 <__sfputc_r+0x1e>
 80049be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049c2:	f000 bb33 	b.w	800502c <__swbuf_r>
 80049c6:	6813      	ldr	r3, [r2, #0]
 80049c8:	1c58      	adds	r0, r3, #1
 80049ca:	6010      	str	r0, [r2, #0]
 80049cc:	7019      	strb	r1, [r3, #0]
 80049ce:	4608      	mov	r0, r1
 80049d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <__sfputs_r>:
 80049d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049d8:	4606      	mov	r6, r0
 80049da:	460f      	mov	r7, r1
 80049dc:	4614      	mov	r4, r2
 80049de:	18d5      	adds	r5, r2, r3
 80049e0:	42ac      	cmp	r4, r5
 80049e2:	d101      	bne.n	80049e8 <__sfputs_r+0x12>
 80049e4:	2000      	movs	r0, #0
 80049e6:	e007      	b.n	80049f8 <__sfputs_r+0x22>
 80049e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049ec:	463a      	mov	r2, r7
 80049ee:	4630      	mov	r0, r6
 80049f0:	f7ff ffda 	bl	80049a8 <__sfputc_r>
 80049f4:	1c43      	adds	r3, r0, #1
 80049f6:	d1f3      	bne.n	80049e0 <__sfputs_r+0xa>
 80049f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080049fc <_vfiprintf_r>:
 80049fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a00:	460d      	mov	r5, r1
 8004a02:	b09d      	sub	sp, #116	; 0x74
 8004a04:	4614      	mov	r4, r2
 8004a06:	4698      	mov	r8, r3
 8004a08:	4606      	mov	r6, r0
 8004a0a:	b118      	cbz	r0, 8004a14 <_vfiprintf_r+0x18>
 8004a0c:	6983      	ldr	r3, [r0, #24]
 8004a0e:	b90b      	cbnz	r3, 8004a14 <_vfiprintf_r+0x18>
 8004a10:	f7ff fe96 	bl	8004740 <__sinit>
 8004a14:	4b89      	ldr	r3, [pc, #548]	; (8004c3c <_vfiprintf_r+0x240>)
 8004a16:	429d      	cmp	r5, r3
 8004a18:	d11b      	bne.n	8004a52 <_vfiprintf_r+0x56>
 8004a1a:	6875      	ldr	r5, [r6, #4]
 8004a1c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a1e:	07d9      	lsls	r1, r3, #31
 8004a20:	d405      	bmi.n	8004a2e <_vfiprintf_r+0x32>
 8004a22:	89ab      	ldrh	r3, [r5, #12]
 8004a24:	059a      	lsls	r2, r3, #22
 8004a26:	d402      	bmi.n	8004a2e <_vfiprintf_r+0x32>
 8004a28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a2a:	f7ff ff27 	bl	800487c <__retarget_lock_acquire_recursive>
 8004a2e:	89ab      	ldrh	r3, [r5, #12]
 8004a30:	071b      	lsls	r3, r3, #28
 8004a32:	d501      	bpl.n	8004a38 <_vfiprintf_r+0x3c>
 8004a34:	692b      	ldr	r3, [r5, #16]
 8004a36:	b9eb      	cbnz	r3, 8004a74 <_vfiprintf_r+0x78>
 8004a38:	4629      	mov	r1, r5
 8004a3a:	4630      	mov	r0, r6
 8004a3c:	f000 fb5a 	bl	80050f4 <__swsetup_r>
 8004a40:	b1c0      	cbz	r0, 8004a74 <_vfiprintf_r+0x78>
 8004a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a44:	07dc      	lsls	r4, r3, #31
 8004a46:	d50e      	bpl.n	8004a66 <_vfiprintf_r+0x6a>
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295
 8004a4c:	b01d      	add	sp, #116	; 0x74
 8004a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a52:	4b7b      	ldr	r3, [pc, #492]	; (8004c40 <_vfiprintf_r+0x244>)
 8004a54:	429d      	cmp	r5, r3
 8004a56:	d101      	bne.n	8004a5c <_vfiprintf_r+0x60>
 8004a58:	68b5      	ldr	r5, [r6, #8]
 8004a5a:	e7df      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004a5c:	4b79      	ldr	r3, [pc, #484]	; (8004c44 <_vfiprintf_r+0x248>)
 8004a5e:	429d      	cmp	r5, r3
 8004a60:	bf08      	it	eq
 8004a62:	68f5      	ldreq	r5, [r6, #12]
 8004a64:	e7da      	b.n	8004a1c <_vfiprintf_r+0x20>
 8004a66:	89ab      	ldrh	r3, [r5, #12]
 8004a68:	0598      	lsls	r0, r3, #22
 8004a6a:	d4ed      	bmi.n	8004a48 <_vfiprintf_r+0x4c>
 8004a6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a6e:	f7ff ff06 	bl	800487e <__retarget_lock_release_recursive>
 8004a72:	e7e9      	b.n	8004a48 <_vfiprintf_r+0x4c>
 8004a74:	2300      	movs	r3, #0
 8004a76:	9309      	str	r3, [sp, #36]	; 0x24
 8004a78:	2320      	movs	r3, #32
 8004a7a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a82:	2330      	movs	r3, #48	; 0x30
 8004a84:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004c48 <_vfiprintf_r+0x24c>
 8004a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a8c:	f04f 0901 	mov.w	r9, #1
 8004a90:	4623      	mov	r3, r4
 8004a92:	469a      	mov	sl, r3
 8004a94:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a98:	b10a      	cbz	r2, 8004a9e <_vfiprintf_r+0xa2>
 8004a9a:	2a25      	cmp	r2, #37	; 0x25
 8004a9c:	d1f9      	bne.n	8004a92 <_vfiprintf_r+0x96>
 8004a9e:	ebba 0b04 	subs.w	fp, sl, r4
 8004aa2:	d00b      	beq.n	8004abc <_vfiprintf_r+0xc0>
 8004aa4:	465b      	mov	r3, fp
 8004aa6:	4622      	mov	r2, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ff93 	bl	80049d6 <__sfputs_r>
 8004ab0:	3001      	adds	r0, #1
 8004ab2:	f000 80aa 	beq.w	8004c0a <_vfiprintf_r+0x20e>
 8004ab6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ab8:	445a      	add	r2, fp
 8004aba:	9209      	str	r2, [sp, #36]	; 0x24
 8004abc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 80a2 	beq.w	8004c0a <_vfiprintf_r+0x20e>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad0:	f10a 0a01 	add.w	sl, sl, #1
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004adc:	931a      	str	r3, [sp, #104]	; 0x68
 8004ade:	4654      	mov	r4, sl
 8004ae0:	2205      	movs	r2, #5
 8004ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ae6:	4858      	ldr	r0, [pc, #352]	; (8004c48 <_vfiprintf_r+0x24c>)
 8004ae8:	f7fb fb72 	bl	80001d0 <memchr>
 8004aec:	9a04      	ldr	r2, [sp, #16]
 8004aee:	b9d8      	cbnz	r0, 8004b28 <_vfiprintf_r+0x12c>
 8004af0:	06d1      	lsls	r1, r2, #27
 8004af2:	bf44      	itt	mi
 8004af4:	2320      	movmi	r3, #32
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afa:	0713      	lsls	r3, r2, #28
 8004afc:	bf44      	itt	mi
 8004afe:	232b      	movmi	r3, #43	; 0x2b
 8004b00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b04:	f89a 3000 	ldrb.w	r3, [sl]
 8004b08:	2b2a      	cmp	r3, #42	; 0x2a
 8004b0a:	d015      	beq.n	8004b38 <_vfiprintf_r+0x13c>
 8004b0c:	9a07      	ldr	r2, [sp, #28]
 8004b0e:	4654      	mov	r4, sl
 8004b10:	2000      	movs	r0, #0
 8004b12:	f04f 0c0a 	mov.w	ip, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b1c:	3b30      	subs	r3, #48	; 0x30
 8004b1e:	2b09      	cmp	r3, #9
 8004b20:	d94e      	bls.n	8004bc0 <_vfiprintf_r+0x1c4>
 8004b22:	b1b0      	cbz	r0, 8004b52 <_vfiprintf_r+0x156>
 8004b24:	9207      	str	r2, [sp, #28]
 8004b26:	e014      	b.n	8004b52 <_vfiprintf_r+0x156>
 8004b28:	eba0 0308 	sub.w	r3, r0, r8
 8004b2c:	fa09 f303 	lsl.w	r3, r9, r3
 8004b30:	4313      	orrs	r3, r2
 8004b32:	9304      	str	r3, [sp, #16]
 8004b34:	46a2      	mov	sl, r4
 8004b36:	e7d2      	b.n	8004ade <_vfiprintf_r+0xe2>
 8004b38:	9b03      	ldr	r3, [sp, #12]
 8004b3a:	1d19      	adds	r1, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	9103      	str	r1, [sp, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bfbb      	ittet	lt
 8004b44:	425b      	neglt	r3, r3
 8004b46:	f042 0202 	orrlt.w	r2, r2, #2
 8004b4a:	9307      	strge	r3, [sp, #28]
 8004b4c:	9307      	strlt	r3, [sp, #28]
 8004b4e:	bfb8      	it	lt
 8004b50:	9204      	strlt	r2, [sp, #16]
 8004b52:	7823      	ldrb	r3, [r4, #0]
 8004b54:	2b2e      	cmp	r3, #46	; 0x2e
 8004b56:	d10c      	bne.n	8004b72 <_vfiprintf_r+0x176>
 8004b58:	7863      	ldrb	r3, [r4, #1]
 8004b5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b5c:	d135      	bne.n	8004bca <_vfiprintf_r+0x1ce>
 8004b5e:	9b03      	ldr	r3, [sp, #12]
 8004b60:	1d1a      	adds	r2, r3, #4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	9203      	str	r2, [sp, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	bfb8      	it	lt
 8004b6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b6e:	3402      	adds	r4, #2
 8004b70:	9305      	str	r3, [sp, #20]
 8004b72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004c58 <_vfiprintf_r+0x25c>
 8004b76:	7821      	ldrb	r1, [r4, #0]
 8004b78:	2203      	movs	r2, #3
 8004b7a:	4650      	mov	r0, sl
 8004b7c:	f7fb fb28 	bl	80001d0 <memchr>
 8004b80:	b140      	cbz	r0, 8004b94 <_vfiprintf_r+0x198>
 8004b82:	2340      	movs	r3, #64	; 0x40
 8004b84:	eba0 000a 	sub.w	r0, r0, sl
 8004b88:	fa03 f000 	lsl.w	r0, r3, r0
 8004b8c:	9b04      	ldr	r3, [sp, #16]
 8004b8e:	4303      	orrs	r3, r0
 8004b90:	3401      	adds	r4, #1
 8004b92:	9304      	str	r3, [sp, #16]
 8004b94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b98:	482c      	ldr	r0, [pc, #176]	; (8004c4c <_vfiprintf_r+0x250>)
 8004b9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b9e:	2206      	movs	r2, #6
 8004ba0:	f7fb fb16 	bl	80001d0 <memchr>
 8004ba4:	2800      	cmp	r0, #0
 8004ba6:	d03f      	beq.n	8004c28 <_vfiprintf_r+0x22c>
 8004ba8:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <_vfiprintf_r+0x254>)
 8004baa:	bb1b      	cbnz	r3, 8004bf4 <_vfiprintf_r+0x1f8>
 8004bac:	9b03      	ldr	r3, [sp, #12]
 8004bae:	3307      	adds	r3, #7
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	9303      	str	r3, [sp, #12]
 8004bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bba:	443b      	add	r3, r7
 8004bbc:	9309      	str	r3, [sp, #36]	; 0x24
 8004bbe:	e767      	b.n	8004a90 <_vfiprintf_r+0x94>
 8004bc0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	2001      	movs	r0, #1
 8004bc8:	e7a5      	b.n	8004b16 <_vfiprintf_r+0x11a>
 8004bca:	2300      	movs	r3, #0
 8004bcc:	3401      	adds	r4, #1
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f04f 0c0a 	mov.w	ip, #10
 8004bd6:	4620      	mov	r0, r4
 8004bd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bdc:	3a30      	subs	r2, #48	; 0x30
 8004bde:	2a09      	cmp	r2, #9
 8004be0:	d903      	bls.n	8004bea <_vfiprintf_r+0x1ee>
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d0c5      	beq.n	8004b72 <_vfiprintf_r+0x176>
 8004be6:	9105      	str	r1, [sp, #20]
 8004be8:	e7c3      	b.n	8004b72 <_vfiprintf_r+0x176>
 8004bea:	fb0c 2101 	mla	r1, ip, r1, r2
 8004bee:	4604      	mov	r4, r0
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e7f0      	b.n	8004bd6 <_vfiprintf_r+0x1da>
 8004bf4:	ab03      	add	r3, sp, #12
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	462a      	mov	r2, r5
 8004bfa:	4b16      	ldr	r3, [pc, #88]	; (8004c54 <_vfiprintf_r+0x258>)
 8004bfc:	a904      	add	r1, sp, #16
 8004bfe:	4630      	mov	r0, r6
 8004c00:	f3af 8000 	nop.w
 8004c04:	4607      	mov	r7, r0
 8004c06:	1c78      	adds	r0, r7, #1
 8004c08:	d1d6      	bne.n	8004bb8 <_vfiprintf_r+0x1bc>
 8004c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	d405      	bmi.n	8004c1c <_vfiprintf_r+0x220>
 8004c10:	89ab      	ldrh	r3, [r5, #12]
 8004c12:	059a      	lsls	r2, r3, #22
 8004c14:	d402      	bmi.n	8004c1c <_vfiprintf_r+0x220>
 8004c16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c18:	f7ff fe31 	bl	800487e <__retarget_lock_release_recursive>
 8004c1c:	89ab      	ldrh	r3, [r5, #12]
 8004c1e:	065b      	lsls	r3, r3, #25
 8004c20:	f53f af12 	bmi.w	8004a48 <_vfiprintf_r+0x4c>
 8004c24:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c26:	e711      	b.n	8004a4c <_vfiprintf_r+0x50>
 8004c28:	ab03      	add	r3, sp, #12
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4b09      	ldr	r3, [pc, #36]	; (8004c54 <_vfiprintf_r+0x258>)
 8004c30:	a904      	add	r1, sp, #16
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f880 	bl	8004d38 <_printf_i>
 8004c38:	e7e4      	b.n	8004c04 <_vfiprintf_r+0x208>
 8004c3a:	bf00      	nop
 8004c3c:	0800561c 	.word	0x0800561c
 8004c40:	0800563c 	.word	0x0800563c
 8004c44:	080055fc 	.word	0x080055fc
 8004c48:	0800565c 	.word	0x0800565c
 8004c4c:	08005666 	.word	0x08005666
 8004c50:	00000000 	.word	0x00000000
 8004c54:	080049d7 	.word	0x080049d7
 8004c58:	08005662 	.word	0x08005662

08004c5c <_printf_common>:
 8004c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c60:	4616      	mov	r6, r2
 8004c62:	4699      	mov	r9, r3
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	690b      	ldr	r3, [r1, #16]
 8004c68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	bfb8      	it	lt
 8004c70:	4613      	movlt	r3, r2
 8004c72:	6033      	str	r3, [r6, #0]
 8004c74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c78:	4607      	mov	r7, r0
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	b10a      	cbz	r2, 8004c82 <_printf_common+0x26>
 8004c7e:	3301      	adds	r3, #1
 8004c80:	6033      	str	r3, [r6, #0]
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	0699      	lsls	r1, r3, #26
 8004c86:	bf42      	ittt	mi
 8004c88:	6833      	ldrmi	r3, [r6, #0]
 8004c8a:	3302      	addmi	r3, #2
 8004c8c:	6033      	strmi	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	f015 0506 	ands.w	r5, r5, #6
 8004c94:	d106      	bne.n	8004ca4 <_printf_common+0x48>
 8004c96:	f104 0a19 	add.w	sl, r4, #25
 8004c9a:	68e3      	ldr	r3, [r4, #12]
 8004c9c:	6832      	ldr	r2, [r6, #0]
 8004c9e:	1a9b      	subs	r3, r3, r2
 8004ca0:	42ab      	cmp	r3, r5
 8004ca2:	dc26      	bgt.n	8004cf2 <_printf_common+0x96>
 8004ca4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ca8:	1e13      	subs	r3, r2, #0
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	bf18      	it	ne
 8004cae:	2301      	movne	r3, #1
 8004cb0:	0692      	lsls	r2, r2, #26
 8004cb2:	d42b      	bmi.n	8004d0c <_printf_common+0xb0>
 8004cb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cb8:	4649      	mov	r1, r9
 8004cba:	4638      	mov	r0, r7
 8004cbc:	47c0      	blx	r8
 8004cbe:	3001      	adds	r0, #1
 8004cc0:	d01e      	beq.n	8004d00 <_printf_common+0xa4>
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	68e5      	ldr	r5, [r4, #12]
 8004cc6:	6832      	ldr	r2, [r6, #0]
 8004cc8:	f003 0306 	and.w	r3, r3, #6
 8004ccc:	2b04      	cmp	r3, #4
 8004cce:	bf08      	it	eq
 8004cd0:	1aad      	subeq	r5, r5, r2
 8004cd2:	68a3      	ldr	r3, [r4, #8]
 8004cd4:	6922      	ldr	r2, [r4, #16]
 8004cd6:	bf0c      	ite	eq
 8004cd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cdc:	2500      	movne	r5, #0
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	bfc4      	itt	gt
 8004ce2:	1a9b      	subgt	r3, r3, r2
 8004ce4:	18ed      	addgt	r5, r5, r3
 8004ce6:	2600      	movs	r6, #0
 8004ce8:	341a      	adds	r4, #26
 8004cea:	42b5      	cmp	r5, r6
 8004cec:	d11a      	bne.n	8004d24 <_printf_common+0xc8>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e008      	b.n	8004d04 <_printf_common+0xa8>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4652      	mov	r2, sl
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4638      	mov	r0, r7
 8004cfa:	47c0      	blx	r8
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d103      	bne.n	8004d08 <_printf_common+0xac>
 8004d00:	f04f 30ff 	mov.w	r0, #4294967295
 8004d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d08:	3501      	adds	r5, #1
 8004d0a:	e7c6      	b.n	8004c9a <_printf_common+0x3e>
 8004d0c:	18e1      	adds	r1, r4, r3
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	2030      	movs	r0, #48	; 0x30
 8004d12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d16:	4422      	add	r2, r4
 8004d18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d20:	3302      	adds	r3, #2
 8004d22:	e7c7      	b.n	8004cb4 <_printf_common+0x58>
 8004d24:	2301      	movs	r3, #1
 8004d26:	4622      	mov	r2, r4
 8004d28:	4649      	mov	r1, r9
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	47c0      	blx	r8
 8004d2e:	3001      	adds	r0, #1
 8004d30:	d0e6      	beq.n	8004d00 <_printf_common+0xa4>
 8004d32:	3601      	adds	r6, #1
 8004d34:	e7d9      	b.n	8004cea <_printf_common+0x8e>
	...

08004d38 <_printf_i>:
 8004d38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d3c:	7e0f      	ldrb	r7, [r1, #24]
 8004d3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d40:	2f78      	cmp	r7, #120	; 0x78
 8004d42:	4691      	mov	r9, r2
 8004d44:	4680      	mov	r8, r0
 8004d46:	460c      	mov	r4, r1
 8004d48:	469a      	mov	sl, r3
 8004d4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d4e:	d807      	bhi.n	8004d60 <_printf_i+0x28>
 8004d50:	2f62      	cmp	r7, #98	; 0x62
 8004d52:	d80a      	bhi.n	8004d6a <_printf_i+0x32>
 8004d54:	2f00      	cmp	r7, #0
 8004d56:	f000 80d8 	beq.w	8004f0a <_printf_i+0x1d2>
 8004d5a:	2f58      	cmp	r7, #88	; 0x58
 8004d5c:	f000 80a3 	beq.w	8004ea6 <_printf_i+0x16e>
 8004d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d68:	e03a      	b.n	8004de0 <_printf_i+0xa8>
 8004d6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d6e:	2b15      	cmp	r3, #21
 8004d70:	d8f6      	bhi.n	8004d60 <_printf_i+0x28>
 8004d72:	a101      	add	r1, pc, #4	; (adr r1, 8004d78 <_printf_i+0x40>)
 8004d74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d78:	08004dd1 	.word	0x08004dd1
 8004d7c:	08004de5 	.word	0x08004de5
 8004d80:	08004d61 	.word	0x08004d61
 8004d84:	08004d61 	.word	0x08004d61
 8004d88:	08004d61 	.word	0x08004d61
 8004d8c:	08004d61 	.word	0x08004d61
 8004d90:	08004de5 	.word	0x08004de5
 8004d94:	08004d61 	.word	0x08004d61
 8004d98:	08004d61 	.word	0x08004d61
 8004d9c:	08004d61 	.word	0x08004d61
 8004da0:	08004d61 	.word	0x08004d61
 8004da4:	08004ef1 	.word	0x08004ef1
 8004da8:	08004e15 	.word	0x08004e15
 8004dac:	08004ed3 	.word	0x08004ed3
 8004db0:	08004d61 	.word	0x08004d61
 8004db4:	08004d61 	.word	0x08004d61
 8004db8:	08004f13 	.word	0x08004f13
 8004dbc:	08004d61 	.word	0x08004d61
 8004dc0:	08004e15 	.word	0x08004e15
 8004dc4:	08004d61 	.word	0x08004d61
 8004dc8:	08004d61 	.word	0x08004d61
 8004dcc:	08004edb 	.word	0x08004edb
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	1d1a      	adds	r2, r3, #4
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	602a      	str	r2, [r5, #0]
 8004dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ddc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0a3      	b.n	8004f2c <_printf_i+0x1f4>
 8004de4:	6820      	ldr	r0, [r4, #0]
 8004de6:	6829      	ldr	r1, [r5, #0]
 8004de8:	0606      	lsls	r6, r0, #24
 8004dea:	f101 0304 	add.w	r3, r1, #4
 8004dee:	d50a      	bpl.n	8004e06 <_printf_i+0xce>
 8004df0:	680e      	ldr	r6, [r1, #0]
 8004df2:	602b      	str	r3, [r5, #0]
 8004df4:	2e00      	cmp	r6, #0
 8004df6:	da03      	bge.n	8004e00 <_printf_i+0xc8>
 8004df8:	232d      	movs	r3, #45	; 0x2d
 8004dfa:	4276      	negs	r6, r6
 8004dfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e00:	485e      	ldr	r0, [pc, #376]	; (8004f7c <_printf_i+0x244>)
 8004e02:	230a      	movs	r3, #10
 8004e04:	e019      	b.n	8004e3a <_printf_i+0x102>
 8004e06:	680e      	ldr	r6, [r1, #0]
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e0e:	bf18      	it	ne
 8004e10:	b236      	sxthne	r6, r6
 8004e12:	e7ef      	b.n	8004df4 <_printf_i+0xbc>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	1d19      	adds	r1, r3, #4
 8004e1a:	6029      	str	r1, [r5, #0]
 8004e1c:	0601      	lsls	r1, r0, #24
 8004e1e:	d501      	bpl.n	8004e24 <_printf_i+0xec>
 8004e20:	681e      	ldr	r6, [r3, #0]
 8004e22:	e002      	b.n	8004e2a <_printf_i+0xf2>
 8004e24:	0646      	lsls	r6, r0, #25
 8004e26:	d5fb      	bpl.n	8004e20 <_printf_i+0xe8>
 8004e28:	881e      	ldrh	r6, [r3, #0]
 8004e2a:	4854      	ldr	r0, [pc, #336]	; (8004f7c <_printf_i+0x244>)
 8004e2c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e2e:	bf0c      	ite	eq
 8004e30:	2308      	moveq	r3, #8
 8004e32:	230a      	movne	r3, #10
 8004e34:	2100      	movs	r1, #0
 8004e36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e3a:	6865      	ldr	r5, [r4, #4]
 8004e3c:	60a5      	str	r5, [r4, #8]
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	bfa2      	ittt	ge
 8004e42:	6821      	ldrge	r1, [r4, #0]
 8004e44:	f021 0104 	bicge.w	r1, r1, #4
 8004e48:	6021      	strge	r1, [r4, #0]
 8004e4a:	b90e      	cbnz	r6, 8004e50 <_printf_i+0x118>
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	d04d      	beq.n	8004eec <_printf_i+0x1b4>
 8004e50:	4615      	mov	r5, r2
 8004e52:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e56:	fb03 6711 	mls	r7, r3, r1, r6
 8004e5a:	5dc7      	ldrb	r7, [r0, r7]
 8004e5c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e60:	4637      	mov	r7, r6
 8004e62:	42bb      	cmp	r3, r7
 8004e64:	460e      	mov	r6, r1
 8004e66:	d9f4      	bls.n	8004e52 <_printf_i+0x11a>
 8004e68:	2b08      	cmp	r3, #8
 8004e6a:	d10b      	bne.n	8004e84 <_printf_i+0x14c>
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	07de      	lsls	r6, r3, #31
 8004e70:	d508      	bpl.n	8004e84 <_printf_i+0x14c>
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	4299      	cmp	r1, r3
 8004e78:	bfde      	ittt	le
 8004e7a:	2330      	movle	r3, #48	; 0x30
 8004e7c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e80:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e84:	1b52      	subs	r2, r2, r5
 8004e86:	6122      	str	r2, [r4, #16]
 8004e88:	f8cd a000 	str.w	sl, [sp]
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	aa03      	add	r2, sp, #12
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f7ff fee2 	bl	8004c5c <_printf_common>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d14c      	bne.n	8004f36 <_printf_i+0x1fe>
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	b004      	add	sp, #16
 8004ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ea6:	4835      	ldr	r0, [pc, #212]	; (8004f7c <_printf_i+0x244>)
 8004ea8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eac:	6829      	ldr	r1, [r5, #0]
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004eb4:	6029      	str	r1, [r5, #0]
 8004eb6:	061d      	lsls	r5, r3, #24
 8004eb8:	d514      	bpl.n	8004ee4 <_printf_i+0x1ac>
 8004eba:	07df      	lsls	r7, r3, #31
 8004ebc:	bf44      	itt	mi
 8004ebe:	f043 0320 	orrmi.w	r3, r3, #32
 8004ec2:	6023      	strmi	r3, [r4, #0]
 8004ec4:	b91e      	cbnz	r6, 8004ece <_printf_i+0x196>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	f023 0320 	bic.w	r3, r3, #32
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	2310      	movs	r3, #16
 8004ed0:	e7b0      	b.n	8004e34 <_printf_i+0xfc>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	f043 0320 	orr.w	r3, r3, #32
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	2378      	movs	r3, #120	; 0x78
 8004edc:	4828      	ldr	r0, [pc, #160]	; (8004f80 <_printf_i+0x248>)
 8004ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ee2:	e7e3      	b.n	8004eac <_printf_i+0x174>
 8004ee4:	0659      	lsls	r1, r3, #25
 8004ee6:	bf48      	it	mi
 8004ee8:	b2b6      	uxthmi	r6, r6
 8004eea:	e7e6      	b.n	8004eba <_printf_i+0x182>
 8004eec:	4615      	mov	r5, r2
 8004eee:	e7bb      	b.n	8004e68 <_printf_i+0x130>
 8004ef0:	682b      	ldr	r3, [r5, #0]
 8004ef2:	6826      	ldr	r6, [r4, #0]
 8004ef4:	6961      	ldr	r1, [r4, #20]
 8004ef6:	1d18      	adds	r0, r3, #4
 8004ef8:	6028      	str	r0, [r5, #0]
 8004efa:	0635      	lsls	r5, r6, #24
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	d501      	bpl.n	8004f04 <_printf_i+0x1cc>
 8004f00:	6019      	str	r1, [r3, #0]
 8004f02:	e002      	b.n	8004f0a <_printf_i+0x1d2>
 8004f04:	0670      	lsls	r0, r6, #25
 8004f06:	d5fb      	bpl.n	8004f00 <_printf_i+0x1c8>
 8004f08:	8019      	strh	r1, [r3, #0]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6123      	str	r3, [r4, #16]
 8004f0e:	4615      	mov	r5, r2
 8004f10:	e7ba      	b.n	8004e88 <_printf_i+0x150>
 8004f12:	682b      	ldr	r3, [r5, #0]
 8004f14:	1d1a      	adds	r2, r3, #4
 8004f16:	602a      	str	r2, [r5, #0]
 8004f18:	681d      	ldr	r5, [r3, #0]
 8004f1a:	6862      	ldr	r2, [r4, #4]
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7fb f956 	bl	80001d0 <memchr>
 8004f24:	b108      	cbz	r0, 8004f2a <_printf_i+0x1f2>
 8004f26:	1b40      	subs	r0, r0, r5
 8004f28:	6060      	str	r0, [r4, #4]
 8004f2a:	6863      	ldr	r3, [r4, #4]
 8004f2c:	6123      	str	r3, [r4, #16]
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f34:	e7a8      	b.n	8004e88 <_printf_i+0x150>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	462a      	mov	r2, r5
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	47d0      	blx	sl
 8004f40:	3001      	adds	r0, #1
 8004f42:	d0ab      	beq.n	8004e9c <_printf_i+0x164>
 8004f44:	6823      	ldr	r3, [r4, #0]
 8004f46:	079b      	lsls	r3, r3, #30
 8004f48:	d413      	bmi.n	8004f72 <_printf_i+0x23a>
 8004f4a:	68e0      	ldr	r0, [r4, #12]
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	4298      	cmp	r0, r3
 8004f50:	bfb8      	it	lt
 8004f52:	4618      	movlt	r0, r3
 8004f54:	e7a4      	b.n	8004ea0 <_printf_i+0x168>
 8004f56:	2301      	movs	r3, #1
 8004f58:	4632      	mov	r2, r6
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	4640      	mov	r0, r8
 8004f5e:	47d0      	blx	sl
 8004f60:	3001      	adds	r0, #1
 8004f62:	d09b      	beq.n	8004e9c <_printf_i+0x164>
 8004f64:	3501      	adds	r5, #1
 8004f66:	68e3      	ldr	r3, [r4, #12]
 8004f68:	9903      	ldr	r1, [sp, #12]
 8004f6a:	1a5b      	subs	r3, r3, r1
 8004f6c:	42ab      	cmp	r3, r5
 8004f6e:	dcf2      	bgt.n	8004f56 <_printf_i+0x21e>
 8004f70:	e7eb      	b.n	8004f4a <_printf_i+0x212>
 8004f72:	2500      	movs	r5, #0
 8004f74:	f104 0619 	add.w	r6, r4, #25
 8004f78:	e7f5      	b.n	8004f66 <_printf_i+0x22e>
 8004f7a:	bf00      	nop
 8004f7c:	0800566d 	.word	0x0800566d
 8004f80:	0800567e 	.word	0x0800567e

08004f84 <_sbrk_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d06      	ldr	r5, [pc, #24]	; (8004fa0 <_sbrk_r+0x1c>)
 8004f88:	2300      	movs	r3, #0
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fb ff24 	bl	8000ddc <_sbrk>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d102      	bne.n	8004f9e <_sbrk_r+0x1a>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	b103      	cbz	r3, 8004f9e <_sbrk_r+0x1a>
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}
 8004fa0:	20000228 	.word	0x20000228

08004fa4 <__sread>:
 8004fa4:	b510      	push	{r4, lr}
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fac:	f000 fab2 	bl	8005514 <_read_r>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	bfab      	itete	ge
 8004fb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004fb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004fb8:	181b      	addge	r3, r3, r0
 8004fba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fbe:	bfac      	ite	ge
 8004fc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fc2:	81a3      	strhlt	r3, [r4, #12]
 8004fc4:	bd10      	pop	{r4, pc}

08004fc6 <__swrite>:
 8004fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fca:	461f      	mov	r7, r3
 8004fcc:	898b      	ldrh	r3, [r1, #12]
 8004fce:	05db      	lsls	r3, r3, #23
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	460c      	mov	r4, r1
 8004fd4:	4616      	mov	r6, r2
 8004fd6:	d505      	bpl.n	8004fe4 <__swrite+0x1e>
 8004fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fdc:	2302      	movs	r3, #2
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f000 f9c8 	bl	8005374 <_lseek_r>
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	4632      	mov	r2, r6
 8004ff2:	463b      	mov	r3, r7
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffa:	f000 b869 	b.w	80050d0 <_write_r>

08004ffe <__sseek>:
 8004ffe:	b510      	push	{r4, lr}
 8005000:	460c      	mov	r4, r1
 8005002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005006:	f000 f9b5 	bl	8005374 <_lseek_r>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	89a3      	ldrh	r3, [r4, #12]
 800500e:	bf15      	itete	ne
 8005010:	6560      	strne	r0, [r4, #84]	; 0x54
 8005012:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005016:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800501a:	81a3      	strheq	r3, [r4, #12]
 800501c:	bf18      	it	ne
 800501e:	81a3      	strhne	r3, [r4, #12]
 8005020:	bd10      	pop	{r4, pc}

08005022 <__sclose>:
 8005022:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005026:	f000 b8d3 	b.w	80051d0 <_close_r>
	...

0800502c <__swbuf_r>:
 800502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800502e:	460e      	mov	r6, r1
 8005030:	4614      	mov	r4, r2
 8005032:	4605      	mov	r5, r0
 8005034:	b118      	cbz	r0, 800503e <__swbuf_r+0x12>
 8005036:	6983      	ldr	r3, [r0, #24]
 8005038:	b90b      	cbnz	r3, 800503e <__swbuf_r+0x12>
 800503a:	f7ff fb81 	bl	8004740 <__sinit>
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <__swbuf_r+0x98>)
 8005040:	429c      	cmp	r4, r3
 8005042:	d12b      	bne.n	800509c <__swbuf_r+0x70>
 8005044:	686c      	ldr	r4, [r5, #4]
 8005046:	69a3      	ldr	r3, [r4, #24]
 8005048:	60a3      	str	r3, [r4, #8]
 800504a:	89a3      	ldrh	r3, [r4, #12]
 800504c:	071a      	lsls	r2, r3, #28
 800504e:	d52f      	bpl.n	80050b0 <__swbuf_r+0x84>
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	b36b      	cbz	r3, 80050b0 <__swbuf_r+0x84>
 8005054:	6923      	ldr	r3, [r4, #16]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1ac0      	subs	r0, r0, r3
 800505a:	6963      	ldr	r3, [r4, #20]
 800505c:	b2f6      	uxtb	r6, r6
 800505e:	4283      	cmp	r3, r0
 8005060:	4637      	mov	r7, r6
 8005062:	dc04      	bgt.n	800506e <__swbuf_r+0x42>
 8005064:	4621      	mov	r1, r4
 8005066:	4628      	mov	r0, r5
 8005068:	f000 f948 	bl	80052fc <_fflush_r>
 800506c:	bb30      	cbnz	r0, 80050bc <__swbuf_r+0x90>
 800506e:	68a3      	ldr	r3, [r4, #8]
 8005070:	3b01      	subs	r3, #1
 8005072:	60a3      	str	r3, [r4, #8]
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	6022      	str	r2, [r4, #0]
 800507a:	701e      	strb	r6, [r3, #0]
 800507c:	6963      	ldr	r3, [r4, #20]
 800507e:	3001      	adds	r0, #1
 8005080:	4283      	cmp	r3, r0
 8005082:	d004      	beq.n	800508e <__swbuf_r+0x62>
 8005084:	89a3      	ldrh	r3, [r4, #12]
 8005086:	07db      	lsls	r3, r3, #31
 8005088:	d506      	bpl.n	8005098 <__swbuf_r+0x6c>
 800508a:	2e0a      	cmp	r6, #10
 800508c:	d104      	bne.n	8005098 <__swbuf_r+0x6c>
 800508e:	4621      	mov	r1, r4
 8005090:	4628      	mov	r0, r5
 8005092:	f000 f933 	bl	80052fc <_fflush_r>
 8005096:	b988      	cbnz	r0, 80050bc <__swbuf_r+0x90>
 8005098:	4638      	mov	r0, r7
 800509a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800509c:	4b0a      	ldr	r3, [pc, #40]	; (80050c8 <__swbuf_r+0x9c>)
 800509e:	429c      	cmp	r4, r3
 80050a0:	d101      	bne.n	80050a6 <__swbuf_r+0x7a>
 80050a2:	68ac      	ldr	r4, [r5, #8]
 80050a4:	e7cf      	b.n	8005046 <__swbuf_r+0x1a>
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <__swbuf_r+0xa0>)
 80050a8:	429c      	cmp	r4, r3
 80050aa:	bf08      	it	eq
 80050ac:	68ec      	ldreq	r4, [r5, #12]
 80050ae:	e7ca      	b.n	8005046 <__swbuf_r+0x1a>
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f81e 	bl	80050f4 <__swsetup_r>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d0cb      	beq.n	8005054 <__swbuf_r+0x28>
 80050bc:	f04f 37ff 	mov.w	r7, #4294967295
 80050c0:	e7ea      	b.n	8005098 <__swbuf_r+0x6c>
 80050c2:	bf00      	nop
 80050c4:	0800561c 	.word	0x0800561c
 80050c8:	0800563c 	.word	0x0800563c
 80050cc:	080055fc 	.word	0x080055fc

080050d0 <_write_r>:
 80050d0:	b538      	push	{r3, r4, r5, lr}
 80050d2:	4d07      	ldr	r5, [pc, #28]	; (80050f0 <_write_r+0x20>)
 80050d4:	4604      	mov	r4, r0
 80050d6:	4608      	mov	r0, r1
 80050d8:	4611      	mov	r1, r2
 80050da:	2200      	movs	r2, #0
 80050dc:	602a      	str	r2, [r5, #0]
 80050de:	461a      	mov	r2, r3
 80050e0:	f7fb fa48 	bl	8000574 <_write>
 80050e4:	1c43      	adds	r3, r0, #1
 80050e6:	d102      	bne.n	80050ee <_write_r+0x1e>
 80050e8:	682b      	ldr	r3, [r5, #0]
 80050ea:	b103      	cbz	r3, 80050ee <_write_r+0x1e>
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	bd38      	pop	{r3, r4, r5, pc}
 80050f0:	20000228 	.word	0x20000228

080050f4 <__swsetup_r>:
 80050f4:	4b32      	ldr	r3, [pc, #200]	; (80051c0 <__swsetup_r+0xcc>)
 80050f6:	b570      	push	{r4, r5, r6, lr}
 80050f8:	681d      	ldr	r5, [r3, #0]
 80050fa:	4606      	mov	r6, r0
 80050fc:	460c      	mov	r4, r1
 80050fe:	b125      	cbz	r5, 800510a <__swsetup_r+0x16>
 8005100:	69ab      	ldr	r3, [r5, #24]
 8005102:	b913      	cbnz	r3, 800510a <__swsetup_r+0x16>
 8005104:	4628      	mov	r0, r5
 8005106:	f7ff fb1b 	bl	8004740 <__sinit>
 800510a:	4b2e      	ldr	r3, [pc, #184]	; (80051c4 <__swsetup_r+0xd0>)
 800510c:	429c      	cmp	r4, r3
 800510e:	d10f      	bne.n	8005130 <__swsetup_r+0x3c>
 8005110:	686c      	ldr	r4, [r5, #4]
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005118:	0719      	lsls	r1, r3, #28
 800511a:	d42c      	bmi.n	8005176 <__swsetup_r+0x82>
 800511c:	06dd      	lsls	r5, r3, #27
 800511e:	d411      	bmi.n	8005144 <__swsetup_r+0x50>
 8005120:	2309      	movs	r3, #9
 8005122:	6033      	str	r3, [r6, #0]
 8005124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	e03e      	b.n	80051ae <__swsetup_r+0xba>
 8005130:	4b25      	ldr	r3, [pc, #148]	; (80051c8 <__swsetup_r+0xd4>)
 8005132:	429c      	cmp	r4, r3
 8005134:	d101      	bne.n	800513a <__swsetup_r+0x46>
 8005136:	68ac      	ldr	r4, [r5, #8]
 8005138:	e7eb      	b.n	8005112 <__swsetup_r+0x1e>
 800513a:	4b24      	ldr	r3, [pc, #144]	; (80051cc <__swsetup_r+0xd8>)
 800513c:	429c      	cmp	r4, r3
 800513e:	bf08      	it	eq
 8005140:	68ec      	ldreq	r4, [r5, #12]
 8005142:	e7e6      	b.n	8005112 <__swsetup_r+0x1e>
 8005144:	0758      	lsls	r0, r3, #29
 8005146:	d512      	bpl.n	800516e <__swsetup_r+0x7a>
 8005148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800514a:	b141      	cbz	r1, 800515e <__swsetup_r+0x6a>
 800514c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005150:	4299      	cmp	r1, r3
 8005152:	d002      	beq.n	800515a <__swsetup_r+0x66>
 8005154:	4630      	mov	r0, r6
 8005156:	f000 f991 	bl	800547c <_free_r>
 800515a:	2300      	movs	r3, #0
 800515c:	6363      	str	r3, [r4, #52]	; 0x34
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	2300      	movs	r3, #0
 8005168:	6063      	str	r3, [r4, #4]
 800516a:	6923      	ldr	r3, [r4, #16]
 800516c:	6023      	str	r3, [r4, #0]
 800516e:	89a3      	ldrh	r3, [r4, #12]
 8005170:	f043 0308 	orr.w	r3, r3, #8
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	6923      	ldr	r3, [r4, #16]
 8005178:	b94b      	cbnz	r3, 800518e <__swsetup_r+0x9a>
 800517a:	89a3      	ldrh	r3, [r4, #12]
 800517c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005184:	d003      	beq.n	800518e <__swsetup_r+0x9a>
 8005186:	4621      	mov	r1, r4
 8005188:	4630      	mov	r0, r6
 800518a:	f000 f92b 	bl	80053e4 <__smakebuf_r>
 800518e:	89a0      	ldrh	r0, [r4, #12]
 8005190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005194:	f010 0301 	ands.w	r3, r0, #1
 8005198:	d00a      	beq.n	80051b0 <__swsetup_r+0xbc>
 800519a:	2300      	movs	r3, #0
 800519c:	60a3      	str	r3, [r4, #8]
 800519e:	6963      	ldr	r3, [r4, #20]
 80051a0:	425b      	negs	r3, r3
 80051a2:	61a3      	str	r3, [r4, #24]
 80051a4:	6923      	ldr	r3, [r4, #16]
 80051a6:	b943      	cbnz	r3, 80051ba <__swsetup_r+0xc6>
 80051a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051ac:	d1ba      	bne.n	8005124 <__swsetup_r+0x30>
 80051ae:	bd70      	pop	{r4, r5, r6, pc}
 80051b0:	0781      	lsls	r1, r0, #30
 80051b2:	bf58      	it	pl
 80051b4:	6963      	ldrpl	r3, [r4, #20]
 80051b6:	60a3      	str	r3, [r4, #8]
 80051b8:	e7f4      	b.n	80051a4 <__swsetup_r+0xb0>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e7f7      	b.n	80051ae <__swsetup_r+0xba>
 80051be:	bf00      	nop
 80051c0:	20000054 	.word	0x20000054
 80051c4:	0800561c 	.word	0x0800561c
 80051c8:	0800563c 	.word	0x0800563c
 80051cc:	080055fc 	.word	0x080055fc

080051d0 <_close_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	; (80051ec <_close_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fb fdc9 	bl	8000d72 <_close>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_close_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_close_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000228 	.word	0x20000228

080051f0 <__sflush_r>:
 80051f0:	898a      	ldrh	r2, [r1, #12]
 80051f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051f6:	4605      	mov	r5, r0
 80051f8:	0710      	lsls	r0, r2, #28
 80051fa:	460c      	mov	r4, r1
 80051fc:	d458      	bmi.n	80052b0 <__sflush_r+0xc0>
 80051fe:	684b      	ldr	r3, [r1, #4]
 8005200:	2b00      	cmp	r3, #0
 8005202:	dc05      	bgt.n	8005210 <__sflush_r+0x20>
 8005204:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	dc02      	bgt.n	8005210 <__sflush_r+0x20>
 800520a:	2000      	movs	r0, #0
 800520c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005210:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005212:	2e00      	cmp	r6, #0
 8005214:	d0f9      	beq.n	800520a <__sflush_r+0x1a>
 8005216:	2300      	movs	r3, #0
 8005218:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800521c:	682f      	ldr	r7, [r5, #0]
 800521e:	602b      	str	r3, [r5, #0]
 8005220:	d032      	beq.n	8005288 <__sflush_r+0x98>
 8005222:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005224:	89a3      	ldrh	r3, [r4, #12]
 8005226:	075a      	lsls	r2, r3, #29
 8005228:	d505      	bpl.n	8005236 <__sflush_r+0x46>
 800522a:	6863      	ldr	r3, [r4, #4]
 800522c:	1ac0      	subs	r0, r0, r3
 800522e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005230:	b10b      	cbz	r3, 8005236 <__sflush_r+0x46>
 8005232:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005234:	1ac0      	subs	r0, r0, r3
 8005236:	2300      	movs	r3, #0
 8005238:	4602      	mov	r2, r0
 800523a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800523c:	6a21      	ldr	r1, [r4, #32]
 800523e:	4628      	mov	r0, r5
 8005240:	47b0      	blx	r6
 8005242:	1c43      	adds	r3, r0, #1
 8005244:	89a3      	ldrh	r3, [r4, #12]
 8005246:	d106      	bne.n	8005256 <__sflush_r+0x66>
 8005248:	6829      	ldr	r1, [r5, #0]
 800524a:	291d      	cmp	r1, #29
 800524c:	d82c      	bhi.n	80052a8 <__sflush_r+0xb8>
 800524e:	4a2a      	ldr	r2, [pc, #168]	; (80052f8 <__sflush_r+0x108>)
 8005250:	40ca      	lsrs	r2, r1
 8005252:	07d6      	lsls	r6, r2, #31
 8005254:	d528      	bpl.n	80052a8 <__sflush_r+0xb8>
 8005256:	2200      	movs	r2, #0
 8005258:	6062      	str	r2, [r4, #4]
 800525a:	04d9      	lsls	r1, r3, #19
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	6022      	str	r2, [r4, #0]
 8005260:	d504      	bpl.n	800526c <__sflush_r+0x7c>
 8005262:	1c42      	adds	r2, r0, #1
 8005264:	d101      	bne.n	800526a <__sflush_r+0x7a>
 8005266:	682b      	ldr	r3, [r5, #0]
 8005268:	b903      	cbnz	r3, 800526c <__sflush_r+0x7c>
 800526a:	6560      	str	r0, [r4, #84]	; 0x54
 800526c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800526e:	602f      	str	r7, [r5, #0]
 8005270:	2900      	cmp	r1, #0
 8005272:	d0ca      	beq.n	800520a <__sflush_r+0x1a>
 8005274:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005278:	4299      	cmp	r1, r3
 800527a:	d002      	beq.n	8005282 <__sflush_r+0x92>
 800527c:	4628      	mov	r0, r5
 800527e:	f000 f8fd 	bl	800547c <_free_r>
 8005282:	2000      	movs	r0, #0
 8005284:	6360      	str	r0, [r4, #52]	; 0x34
 8005286:	e7c1      	b.n	800520c <__sflush_r+0x1c>
 8005288:	6a21      	ldr	r1, [r4, #32]
 800528a:	2301      	movs	r3, #1
 800528c:	4628      	mov	r0, r5
 800528e:	47b0      	blx	r6
 8005290:	1c41      	adds	r1, r0, #1
 8005292:	d1c7      	bne.n	8005224 <__sflush_r+0x34>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0c4      	beq.n	8005224 <__sflush_r+0x34>
 800529a:	2b1d      	cmp	r3, #29
 800529c:	d001      	beq.n	80052a2 <__sflush_r+0xb2>
 800529e:	2b16      	cmp	r3, #22
 80052a0:	d101      	bne.n	80052a6 <__sflush_r+0xb6>
 80052a2:	602f      	str	r7, [r5, #0]
 80052a4:	e7b1      	b.n	800520a <__sflush_r+0x1a>
 80052a6:	89a3      	ldrh	r3, [r4, #12]
 80052a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ac:	81a3      	strh	r3, [r4, #12]
 80052ae:	e7ad      	b.n	800520c <__sflush_r+0x1c>
 80052b0:	690f      	ldr	r7, [r1, #16]
 80052b2:	2f00      	cmp	r7, #0
 80052b4:	d0a9      	beq.n	800520a <__sflush_r+0x1a>
 80052b6:	0793      	lsls	r3, r2, #30
 80052b8:	680e      	ldr	r6, [r1, #0]
 80052ba:	bf08      	it	eq
 80052bc:	694b      	ldreq	r3, [r1, #20]
 80052be:	600f      	str	r7, [r1, #0]
 80052c0:	bf18      	it	ne
 80052c2:	2300      	movne	r3, #0
 80052c4:	eba6 0807 	sub.w	r8, r6, r7
 80052c8:	608b      	str	r3, [r1, #8]
 80052ca:	f1b8 0f00 	cmp.w	r8, #0
 80052ce:	dd9c      	ble.n	800520a <__sflush_r+0x1a>
 80052d0:	6a21      	ldr	r1, [r4, #32]
 80052d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052d4:	4643      	mov	r3, r8
 80052d6:	463a      	mov	r2, r7
 80052d8:	4628      	mov	r0, r5
 80052da:	47b0      	blx	r6
 80052dc:	2800      	cmp	r0, #0
 80052de:	dc06      	bgt.n	80052ee <__sflush_r+0xfe>
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e6:	81a3      	strh	r3, [r4, #12]
 80052e8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ec:	e78e      	b.n	800520c <__sflush_r+0x1c>
 80052ee:	4407      	add	r7, r0
 80052f0:	eba8 0800 	sub.w	r8, r8, r0
 80052f4:	e7e9      	b.n	80052ca <__sflush_r+0xda>
 80052f6:	bf00      	nop
 80052f8:	20400001 	.word	0x20400001

080052fc <_fflush_r>:
 80052fc:	b538      	push	{r3, r4, r5, lr}
 80052fe:	690b      	ldr	r3, [r1, #16]
 8005300:	4605      	mov	r5, r0
 8005302:	460c      	mov	r4, r1
 8005304:	b913      	cbnz	r3, 800530c <_fflush_r+0x10>
 8005306:	2500      	movs	r5, #0
 8005308:	4628      	mov	r0, r5
 800530a:	bd38      	pop	{r3, r4, r5, pc}
 800530c:	b118      	cbz	r0, 8005316 <_fflush_r+0x1a>
 800530e:	6983      	ldr	r3, [r0, #24]
 8005310:	b90b      	cbnz	r3, 8005316 <_fflush_r+0x1a>
 8005312:	f7ff fa15 	bl	8004740 <__sinit>
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <_fflush_r+0x6c>)
 8005318:	429c      	cmp	r4, r3
 800531a:	d11b      	bne.n	8005354 <_fflush_r+0x58>
 800531c:	686c      	ldr	r4, [r5, #4]
 800531e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0ef      	beq.n	8005306 <_fflush_r+0xa>
 8005326:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005328:	07d0      	lsls	r0, r2, #31
 800532a:	d404      	bmi.n	8005336 <_fflush_r+0x3a>
 800532c:	0599      	lsls	r1, r3, #22
 800532e:	d402      	bmi.n	8005336 <_fflush_r+0x3a>
 8005330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005332:	f7ff faa3 	bl	800487c <__retarget_lock_acquire_recursive>
 8005336:	4628      	mov	r0, r5
 8005338:	4621      	mov	r1, r4
 800533a:	f7ff ff59 	bl	80051f0 <__sflush_r>
 800533e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005340:	07da      	lsls	r2, r3, #31
 8005342:	4605      	mov	r5, r0
 8005344:	d4e0      	bmi.n	8005308 <_fflush_r+0xc>
 8005346:	89a3      	ldrh	r3, [r4, #12]
 8005348:	059b      	lsls	r3, r3, #22
 800534a:	d4dd      	bmi.n	8005308 <_fflush_r+0xc>
 800534c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534e:	f7ff fa96 	bl	800487e <__retarget_lock_release_recursive>
 8005352:	e7d9      	b.n	8005308 <_fflush_r+0xc>
 8005354:	4b05      	ldr	r3, [pc, #20]	; (800536c <_fflush_r+0x70>)
 8005356:	429c      	cmp	r4, r3
 8005358:	d101      	bne.n	800535e <_fflush_r+0x62>
 800535a:	68ac      	ldr	r4, [r5, #8]
 800535c:	e7df      	b.n	800531e <_fflush_r+0x22>
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <_fflush_r+0x74>)
 8005360:	429c      	cmp	r4, r3
 8005362:	bf08      	it	eq
 8005364:	68ec      	ldreq	r4, [r5, #12]
 8005366:	e7da      	b.n	800531e <_fflush_r+0x22>
 8005368:	0800561c 	.word	0x0800561c
 800536c:	0800563c 	.word	0x0800563c
 8005370:	080055fc 	.word	0x080055fc

08005374 <_lseek_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	4d07      	ldr	r5, [pc, #28]	; (8005394 <_lseek_r+0x20>)
 8005378:	4604      	mov	r4, r0
 800537a:	4608      	mov	r0, r1
 800537c:	4611      	mov	r1, r2
 800537e:	2200      	movs	r2, #0
 8005380:	602a      	str	r2, [r5, #0]
 8005382:	461a      	mov	r2, r3
 8005384:	f7fb fd1c 	bl	8000dc0 <_lseek>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_lseek_r+0x1e>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_lseek_r+0x1e>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	20000228 	.word	0x20000228

08005398 <__swhatbuf_r>:
 8005398:	b570      	push	{r4, r5, r6, lr}
 800539a:	460e      	mov	r6, r1
 800539c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053a0:	2900      	cmp	r1, #0
 80053a2:	b096      	sub	sp, #88	; 0x58
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	da08      	bge.n	80053bc <__swhatbuf_r+0x24>
 80053aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	061a      	lsls	r2, r3, #24
 80053b4:	d410      	bmi.n	80053d8 <__swhatbuf_r+0x40>
 80053b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ba:	e00e      	b.n	80053da <__swhatbuf_r+0x42>
 80053bc:	466a      	mov	r2, sp
 80053be:	f000 f8bb 	bl	8005538 <_fstat_r>
 80053c2:	2800      	cmp	r0, #0
 80053c4:	dbf1      	blt.n	80053aa <__swhatbuf_r+0x12>
 80053c6:	9a01      	ldr	r2, [sp, #4]
 80053c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80053cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80053d0:	425a      	negs	r2, r3
 80053d2:	415a      	adcs	r2, r3
 80053d4:	602a      	str	r2, [r5, #0]
 80053d6:	e7ee      	b.n	80053b6 <__swhatbuf_r+0x1e>
 80053d8:	2340      	movs	r3, #64	; 0x40
 80053da:	2000      	movs	r0, #0
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	b016      	add	sp, #88	; 0x58
 80053e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080053e4 <__smakebuf_r>:
 80053e4:	898b      	ldrh	r3, [r1, #12]
 80053e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053e8:	079d      	lsls	r5, r3, #30
 80053ea:	4606      	mov	r6, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	d507      	bpl.n	8005400 <__smakebuf_r+0x1c>
 80053f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053f4:	6023      	str	r3, [r4, #0]
 80053f6:	6123      	str	r3, [r4, #16]
 80053f8:	2301      	movs	r3, #1
 80053fa:	6163      	str	r3, [r4, #20]
 80053fc:	b002      	add	sp, #8
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	ab01      	add	r3, sp, #4
 8005402:	466a      	mov	r2, sp
 8005404:	f7ff ffc8 	bl	8005398 <__swhatbuf_r>
 8005408:	9900      	ldr	r1, [sp, #0]
 800540a:	4605      	mov	r5, r0
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff fa57 	bl	80048c0 <_malloc_r>
 8005412:	b948      	cbnz	r0, 8005428 <__smakebuf_r+0x44>
 8005414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005418:	059a      	lsls	r2, r3, #22
 800541a:	d4ef      	bmi.n	80053fc <__smakebuf_r+0x18>
 800541c:	f023 0303 	bic.w	r3, r3, #3
 8005420:	f043 0302 	orr.w	r3, r3, #2
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	e7e3      	b.n	80053f0 <__smakebuf_r+0xc>
 8005428:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <__smakebuf_r+0x7c>)
 800542a:	62b3      	str	r3, [r6, #40]	; 0x28
 800542c:	89a3      	ldrh	r3, [r4, #12]
 800542e:	6020      	str	r0, [r4, #0]
 8005430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	9b00      	ldr	r3, [sp, #0]
 8005438:	6163      	str	r3, [r4, #20]
 800543a:	9b01      	ldr	r3, [sp, #4]
 800543c:	6120      	str	r0, [r4, #16]
 800543e:	b15b      	cbz	r3, 8005458 <__smakebuf_r+0x74>
 8005440:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005444:	4630      	mov	r0, r6
 8005446:	f000 f889 	bl	800555c <_isatty_r>
 800544a:	b128      	cbz	r0, 8005458 <__smakebuf_r+0x74>
 800544c:	89a3      	ldrh	r3, [r4, #12]
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	f043 0301 	orr.w	r3, r3, #1
 8005456:	81a3      	strh	r3, [r4, #12]
 8005458:	89a0      	ldrh	r0, [r4, #12]
 800545a:	4305      	orrs	r5, r0
 800545c:	81a5      	strh	r5, [r4, #12]
 800545e:	e7cd      	b.n	80053fc <__smakebuf_r+0x18>
 8005460:	080046d9 	.word	0x080046d9

08005464 <__malloc_lock>:
 8005464:	4801      	ldr	r0, [pc, #4]	; (800546c <__malloc_lock+0x8>)
 8005466:	f7ff ba09 	b.w	800487c <__retarget_lock_acquire_recursive>
 800546a:	bf00      	nop
 800546c:	2000021c 	.word	0x2000021c

08005470 <__malloc_unlock>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__malloc_unlock+0x8>)
 8005472:	f7ff ba04 	b.w	800487e <__retarget_lock_release_recursive>
 8005476:	bf00      	nop
 8005478:	2000021c 	.word	0x2000021c

0800547c <_free_r>:
 800547c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800547e:	2900      	cmp	r1, #0
 8005480:	d044      	beq.n	800550c <_free_r+0x90>
 8005482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005486:	9001      	str	r0, [sp, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	f1a1 0404 	sub.w	r4, r1, #4
 800548e:	bfb8      	it	lt
 8005490:	18e4      	addlt	r4, r4, r3
 8005492:	f7ff ffe7 	bl	8005464 <__malloc_lock>
 8005496:	4a1e      	ldr	r2, [pc, #120]	; (8005510 <_free_r+0x94>)
 8005498:	9801      	ldr	r0, [sp, #4]
 800549a:	6813      	ldr	r3, [r2, #0]
 800549c:	b933      	cbnz	r3, 80054ac <_free_r+0x30>
 800549e:	6063      	str	r3, [r4, #4]
 80054a0:	6014      	str	r4, [r2, #0]
 80054a2:	b003      	add	sp, #12
 80054a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054a8:	f7ff bfe2 	b.w	8005470 <__malloc_unlock>
 80054ac:	42a3      	cmp	r3, r4
 80054ae:	d908      	bls.n	80054c2 <_free_r+0x46>
 80054b0:	6825      	ldr	r5, [r4, #0]
 80054b2:	1961      	adds	r1, r4, r5
 80054b4:	428b      	cmp	r3, r1
 80054b6:	bf01      	itttt	eq
 80054b8:	6819      	ldreq	r1, [r3, #0]
 80054ba:	685b      	ldreq	r3, [r3, #4]
 80054bc:	1949      	addeq	r1, r1, r5
 80054be:	6021      	streq	r1, [r4, #0]
 80054c0:	e7ed      	b.n	800549e <_free_r+0x22>
 80054c2:	461a      	mov	r2, r3
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b10b      	cbz	r3, 80054cc <_free_r+0x50>
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	d9fa      	bls.n	80054c2 <_free_r+0x46>
 80054cc:	6811      	ldr	r1, [r2, #0]
 80054ce:	1855      	adds	r5, r2, r1
 80054d0:	42a5      	cmp	r5, r4
 80054d2:	d10b      	bne.n	80054ec <_free_r+0x70>
 80054d4:	6824      	ldr	r4, [r4, #0]
 80054d6:	4421      	add	r1, r4
 80054d8:	1854      	adds	r4, r2, r1
 80054da:	42a3      	cmp	r3, r4
 80054dc:	6011      	str	r1, [r2, #0]
 80054de:	d1e0      	bne.n	80054a2 <_free_r+0x26>
 80054e0:	681c      	ldr	r4, [r3, #0]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	6053      	str	r3, [r2, #4]
 80054e6:	4421      	add	r1, r4
 80054e8:	6011      	str	r1, [r2, #0]
 80054ea:	e7da      	b.n	80054a2 <_free_r+0x26>
 80054ec:	d902      	bls.n	80054f4 <_free_r+0x78>
 80054ee:	230c      	movs	r3, #12
 80054f0:	6003      	str	r3, [r0, #0]
 80054f2:	e7d6      	b.n	80054a2 <_free_r+0x26>
 80054f4:	6825      	ldr	r5, [r4, #0]
 80054f6:	1961      	adds	r1, r4, r5
 80054f8:	428b      	cmp	r3, r1
 80054fa:	bf04      	itt	eq
 80054fc:	6819      	ldreq	r1, [r3, #0]
 80054fe:	685b      	ldreq	r3, [r3, #4]
 8005500:	6063      	str	r3, [r4, #4]
 8005502:	bf04      	itt	eq
 8005504:	1949      	addeq	r1, r1, r5
 8005506:	6021      	streq	r1, [r4, #0]
 8005508:	6054      	str	r4, [r2, #4]
 800550a:	e7ca      	b.n	80054a2 <_free_r+0x26>
 800550c:	b003      	add	sp, #12
 800550e:	bd30      	pop	{r4, r5, pc}
 8005510:	20000220 	.word	0x20000220

08005514 <_read_r>:
 8005514:	b538      	push	{r3, r4, r5, lr}
 8005516:	4d07      	ldr	r5, [pc, #28]	; (8005534 <_read_r+0x20>)
 8005518:	4604      	mov	r4, r0
 800551a:	4608      	mov	r0, r1
 800551c:	4611      	mov	r1, r2
 800551e:	2200      	movs	r2, #0
 8005520:	602a      	str	r2, [r5, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	f7fb fc08 	bl	8000d38 <_read>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_read_r+0x1e>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_read_r+0x1e>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000228 	.word	0x20000228

08005538 <_fstat_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	; (8005558 <_fstat_r+0x20>)
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	4608      	mov	r0, r1
 8005542:	4611      	mov	r1, r2
 8005544:	602b      	str	r3, [r5, #0]
 8005546:	f7fb fc20 	bl	8000d8a <_fstat>
 800554a:	1c43      	adds	r3, r0, #1
 800554c:	d102      	bne.n	8005554 <_fstat_r+0x1c>
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	b103      	cbz	r3, 8005554 <_fstat_r+0x1c>
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	bd38      	pop	{r3, r4, r5, pc}
 8005556:	bf00      	nop
 8005558:	20000228 	.word	0x20000228

0800555c <_isatty_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d06      	ldr	r5, [pc, #24]	; (8005578 <_isatty_r+0x1c>)
 8005560:	2300      	movs	r3, #0
 8005562:	4604      	mov	r4, r0
 8005564:	4608      	mov	r0, r1
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	f7fb fc1f 	bl	8000daa <_isatty>
 800556c:	1c43      	adds	r3, r0, #1
 800556e:	d102      	bne.n	8005576 <_isatty_r+0x1a>
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	b103      	cbz	r3, 8005576 <_isatty_r+0x1a>
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	bd38      	pop	{r3, r4, r5, pc}
 8005578:	20000228 	.word	0x20000228

0800557c <_init>:
 800557c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557e:	bf00      	nop
 8005580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005582:	bc08      	pop	{r3}
 8005584:	469e      	mov	lr, r3
 8005586:	4770      	bx	lr

08005588 <_fini>:
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	bf00      	nop
 800558c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558e:	bc08      	pop	{r3}
 8005590:	469e      	mov	lr, r3
 8005592:	4770      	bx	lr
