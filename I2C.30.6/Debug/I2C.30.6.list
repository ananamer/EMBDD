
I2C.30.6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  08005bd0  08005bd0  00015bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ed4  08005ed4  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005edc  08005edc  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005edc  08005edc  00015edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ee0  08005ee0  00015ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08005ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  200000b8  08005f9c  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005f9c  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014cdc  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002641  00000000  00000000  00034dc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00037408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001120  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028343  00000000  00000000  00039740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157b1  00000000  00000000  00061a83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6a83  00000000  00000000  00077234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016dcb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a4  00000000  00000000  0016dd08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005bb8 	.word	0x08005bb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	08005bb8 	.word	0x08005bb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <_write>:

char days[7][10] =  { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};
char read[20];
const char s[2] = ",";
char *token;
int _write(int fd, char* ptr, int len) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	b29a      	uxth	r2, r3
 8000584:	f04f 33ff 	mov.w	r3, #4294967295
 8000588:	68b9      	ldr	r1, [r7, #8]
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <_write+0x28>)
 800058c:	f003 fc16 	bl	8003dbc <HAL_UART_Transmit>
    return len;
 8000590:	687b      	ldr	r3, [r7, #4]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000200 	.word	0x20000200

080005a0 <commTask>:
uint8_t cmdbuffer[MAX_BUFFER_LENGTH];
int cmdcount = 0;
int cmdprint = 0;

int commTask()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
	uint8_t ch;
	HAL_StatusTypeDef Status = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80005a6:	1db9      	adds	r1, r7, #6
 80005a8:	230a      	movs	r3, #10
 80005aa:	2201      	movs	r2, #1
 80005ac:	4836      	ldr	r0, [pc, #216]	; (8000688 <commTask+0xe8>)
 80005ae:	f003 fc99 	bl	8003ee4 <HAL_UART_Receive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	if (Status != HAL_OK)
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d020      	beq.n	80005fe <commTask+0x5e>
	{
		if ((huart2.Instance->ISR & USART_ISR_ORE) != 0)
 80005bc:	4b32      	ldr	r3, [pc, #200]	; (8000688 <commTask+0xe8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 0308 	and.w	r3, r3, #8
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d011      	beq.n	80005ee <commTask+0x4e>
		{
			__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005ca:	4b2f      	ldr	r3, [pc, #188]	; (8000688 <commTask+0xe8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2208      	movs	r2, #8
 80005d0:	621a      	str	r2, [r3, #32]
		}
		// here we have a time to print the command
		while (cmdprint < cmdcount)
 80005d2:	e00c      	b.n	80005ee <commTask+0x4e>
		{
			HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 80005d4:	4b2d      	ldr	r3, [pc, #180]	; (800068c <commTask+0xec>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1c5a      	adds	r2, r3, #1
 80005da:	492c      	ldr	r1, [pc, #176]	; (800068c <commTask+0xec>)
 80005dc:	600a      	str	r2, [r1, #0]
 80005de:	4a2c      	ldr	r2, [pc, #176]	; (8000690 <commTask+0xf0>)
 80005e0:	1899      	adds	r1, r3, r2
 80005e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e6:	2201      	movs	r2, #1
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <commTask+0xe8>)
 80005ea:	f003 fbe7 	bl	8003dbc <HAL_UART_Transmit>
		while (cmdprint < cmdcount)
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <commTask+0xec>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <commTask+0xf4>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	dbec      	blt.n	80005d4 <commTask+0x34>
		}
		return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	e03f      	b.n	800067e <commTask+0xde>
	}

	if (ch != '\r' && ch != '\n')
 80005fe:	79bb      	ldrb	r3, [r7, #6]
 8000600:	2b0d      	cmp	r3, #13
 8000602:	d023      	beq.n	800064c <commTask+0xac>
 8000604:	79bb      	ldrb	r3, [r7, #6]
 8000606:	2b0a      	cmp	r3, #10
 8000608:	d020      	beq.n	800064c <commTask+0xac>
	{
		//HAL_UART_Transmit(&huart2, &ch, 1, 0xFFFF);
		if (cmdcount >= MAX_BUFFER_LENGTH)
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <commTask+0xf4>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b63      	cmp	r3, #99	; 0x63
 8000610:	dd05      	ble.n	800061e <commTask+0x7e>
		{
			cmdcount = 0;
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <commTask+0xf4>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
			cmdprint = 0;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <commTask+0xec>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
		}
		cmdbuffer[cmdcount++] = ch;
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <commTask+0xf4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	1c5a      	adds	r2, r3, #1
 8000624:	491b      	ldr	r1, [pc, #108]	; (8000694 <commTask+0xf4>)
 8000626:	600a      	str	r2, [r1, #0]
 8000628:	79b9      	ldrb	r1, [r7, #6]
 800062a:	4a19      	ldr	r2, [pc, #100]	; (8000690 <commTask+0xf0>)
 800062c:	54d1      	strb	r1, [r2, r3]
		return 0;
 800062e:	2300      	movs	r3, #0
 8000630:	e025      	b.n	800067e <commTask+0xde>
	}
	// here we have a time to print the command
	while (cmdprint < cmdcount)
	{
		HAL_UART_Transmit(&huart2, &cmdbuffer[cmdprint++], 1, 0xFFFF);
 8000632:	4b16      	ldr	r3, [pc, #88]	; (800068c <commTask+0xec>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	4914      	ldr	r1, [pc, #80]	; (800068c <commTask+0xec>)
 800063a:	600a      	str	r2, [r1, #0]
 800063c:	4a14      	ldr	r2, [pc, #80]	; (8000690 <commTask+0xf0>)
 800063e:	1899      	adds	r1, r3, r2
 8000640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000644:	2201      	movs	r2, #1
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <commTask+0xe8>)
 8000648:	f003 fbb8 	bl	8003dbc <HAL_UART_Transmit>
	while (cmdprint < cmdcount)
 800064c:	4b0f      	ldr	r3, [pc, #60]	; (800068c <commTask+0xec>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b10      	ldr	r3, [pc, #64]	; (8000694 <commTask+0xf4>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	dbec      	blt.n	8000632 <commTask+0x92>
	}

	HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 0xFFFF);
 8000658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065c:	2202      	movs	r2, #2
 800065e:	490e      	ldr	r1, [pc, #56]	; (8000698 <commTask+0xf8>)
 8000660:	4809      	ldr	r0, [pc, #36]	; (8000688 <commTask+0xe8>)
 8000662:	f003 fbab 	bl	8003dbc <HAL_UART_Transmit>
	cmdbuffer[cmdcount] = 0;
 8000666:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <commTask+0xf4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a09      	ldr	r2, [pc, #36]	; (8000690 <commTask+0xf0>)
 800066c:	2100      	movs	r1, #0
 800066e:	54d1      	strb	r1, [r2, r3]
	cmdcount = 0;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <commTask+0xf4>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
	cmdprint = 0;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <commTask+0xec>)
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
	return 1;
 800067c:	2301      	movs	r3, #1
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000200 	.word	0x20000200
 800068c:	2000015c 	.word	0x2000015c
 8000690:	200000f4 	.word	0x200000f4
 8000694:	20000158 	.word	0x20000158
 8000698:	08005bd0 	.word	0x08005bd0

0800069c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * tim)
{
 800069c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800069e:	b087      	sub	sp, #28
 80006a0:	af04      	add	r7, sp, #16
 80006a2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0, 1, readBuff, 8, 0xff);
 80006a4:	23ff      	movs	r3, #255	; 0xff
 80006a6:	9302      	str	r3, [sp, #8]
 80006a8:	2308      	movs	r3, #8
 80006aa:	9301      	str	r3, [sp, #4]
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006ae:	9300      	str	r3, [sp, #0]
 80006b0:	2301      	movs	r3, #1
 80006b2:	2200      	movs	r2, #0
 80006b4:	21d0      	movs	r1, #208	; 0xd0
 80006b6:	486c      	ldr	r0, [pc, #432]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80006b8:	f001 f8be 	bl	8001838 <HAL_I2C_Mem_Read>
	// Calculating seconds
	first_sec = readBuff[0] & 15;
 80006bc:	4b69      	ldr	r3, [pc, #420]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b69      	ldr	r3, [pc, #420]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006c8:	701a      	strb	r2, [r3, #0]
	last_sec = readBuff[0] >> 4;
 80006ca:	4b66      	ldr	r3, [pc, #408]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	091b      	lsrs	r3, r3, #4
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b67      	ldr	r3, [pc, #412]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006d4:	701a      	strb	r2, [r3, #0]
	seconds = first_sec + (last_sec*10);
 80006d6:	4b66      	ldr	r3, [pc, #408]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	461a      	mov	r2, r3
 80006dc:	0092      	lsls	r2, r2, #2
 80006de:	4413      	add	r3, r2
 80006e0:	005b      	lsls	r3, r3, #1
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	4b61      	ldr	r3, [pc, #388]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b61      	ldr	r3, [pc, #388]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80006ee:	701a      	strb	r2, [r3, #0]
	// Calculating minutes
	first_min = readBuff[1] & 15;
 80006f0:	4b5c      	ldr	r3, [pc, #368]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80006f2:	785b      	ldrb	r3, [r3, #1]
 80006f4:	f003 030f 	and.w	r3, r3, #15
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4b5f      	ldr	r3, [pc, #380]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80006fc:	701a      	strb	r2, [r3, #0]
	last_min = readBuff[1] >> 4;
 80006fe:	4b59      	ldr	r3, [pc, #356]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000700:	785b      	ldrb	r3, [r3, #1]
 8000702:	091b      	lsrs	r3, r3, #4
 8000704:	b2da      	uxtb	r2, r3
 8000706:	4b5d      	ldr	r3, [pc, #372]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000708:	701a      	strb	r2, [r3, #0]
	minutes = first_min +(last_min*10);
 800070a:	4b5c      	ldr	r3, [pc, #368]	; (800087c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	0092      	lsls	r2, r2, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b57      	ldr	r3, [pc, #348]	; (8000878 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4413      	add	r3, r2
 800071e:	b2da      	uxtb	r2, r3
 8000720:	4b57      	ldr	r3, [pc, #348]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000722:	701a      	strb	r2, [r3, #0]
	// Calculating minutes
	first_hr = readBuff[2] & 15;
 8000724:	4b4f      	ldr	r3, [pc, #316]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000726:	789b      	ldrb	r3, [r3, #2]
 8000728:	f003 030f 	and.w	r3, r3, #15
 800072c:	b2da      	uxtb	r2, r3
 800072e:	4b55      	ldr	r3, [pc, #340]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000730:	701a      	strb	r2, [r3, #0]
	ten_hr = readBuff[2] >> 4;
 8000732:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000734:	789b      	ldrb	r3, [r3, #2]
 8000736:	091b      	lsrs	r3, r3, #4
 8000738:	b2da      	uxtb	r2, r3
 800073a:	4b53      	ldr	r3, [pc, #332]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800073c:	701a      	strb	r2, [r3, #0]
	hours = first_hr +(ten_hr*10);
 800073e:	4b52      	ldr	r3, [pc, #328]	; (8000888 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	461a      	mov	r2, r3
 8000744:	0092      	lsls	r2, r2, #2
 8000746:	4413      	add	r3, r2
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	b2da      	uxtb	r2, r3
 800074c:	4b4d      	ldr	r3, [pc, #308]	; (8000884 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4413      	add	r3, r2
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b4d      	ldr	r3, [pc, #308]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8000756:	701a      	strb	r2, [r3, #0]
	//// Calculating days
	day = readBuff[3] && 7;
 8000758:	4b42      	ldr	r3, [pc, #264]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800075a:	78db      	ldrb	r3, [r3, #3]
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800076a:	701a      	strb	r2, [r3, #0]
	// Calculating Date
	first_dt = readBuff[4] & 15;
 800076c:	4b3d      	ldr	r3, [pc, #244]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	f003 030f 	and.w	r3, r3, #15
 8000774:	b2da      	uxtb	r2, r3
 8000776:	4b47      	ldr	r3, [pc, #284]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000778:	701a      	strb	r2, [r3, #0]
	last_dt = readBuff[4] >> 4;
 800077a:	4b3a      	ldr	r3, [pc, #232]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	091b      	lsrs	r3, r3, #4
 8000780:	b2da      	uxtb	r2, r3
 8000782:	4b45      	ldr	r3, [pc, #276]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000784:	701a      	strb	r2, [r3, #0]
	date = first_dt + (last_dt*10);
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	461a      	mov	r2, r3
 800078c:	0092      	lsls	r2, r2, #2
 800078e:	4413      	add	r3, r2
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b3f      	ldr	r3, [pc, #252]	; (8000894 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	4413      	add	r3, r2
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b3f      	ldr	r3, [pc, #252]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x200>)
 800079e:	701a      	strb	r2, [r3, #0]
	// Calculating month
	first_mn = readBuff[5] && 15;
 80007a0:	4b30      	ldr	r3, [pc, #192]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007a2:	795b      	ldrb	r3, [r3, #5]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	bf14      	ite	ne
 80007a8:	2301      	movne	r3, #1
 80007aa:	2300      	moveq	r3, #0
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	461a      	mov	r2, r3
 80007b0:	4b3b      	ldr	r3, [pc, #236]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80007b2:	701a      	strb	r2, [r3, #0]
	last_mn = readBuff[5] >>4;
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007b6:	795b      	ldrb	r3, [r3, #5]
 80007b8:	091b      	lsrs	r3, r3, #4
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b39      	ldr	r3, [pc, #228]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007be:	701a      	strb	r2, [r3, #0]
	month =  first_mn +(last_mn*10);
 80007c0:	4b38      	ldr	r3, [pc, #224]	; (80008a4 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	461a      	mov	r2, r3
 80007c6:	0092      	lsls	r2, r2, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	b2da      	uxtb	r2, r3
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b34      	ldr	r3, [pc, #208]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80007d8:	701a      	strb	r2, [r3, #0]
	// Calculating Year
	first_yr = readBuff[6] && 15;
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007dc:	799b      	ldrb	r3, [r3, #6]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	4b30      	ldr	r3, [pc, #192]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x210>)
 80007ec:	701a      	strb	r2, [r3, #0]
	last_yr = readBuff[6] >>4;
 80007ee:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80007f0:	799b      	ldrb	r3, [r3, #6]
 80007f2:	091b      	lsrs	r3, r3, #4
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b2e      	ldr	r3, [pc, #184]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80007f8:	701a      	strb	r2, [r3, #0]
	year =  first_yr +(last_yr*10);
 80007fa:	4b2d      	ldr	r3, [pc, #180]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	0092      	lsls	r2, r2, #2
 8000802:	4413      	add	r3, r2
 8000804:	005b      	lsls	r3, r3, #1
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b28      	ldr	r3, [pc, #160]	; (80008ac <HAL_TIM_PeriodElapsedCallback+0x210>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4413      	add	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b28      	ldr	r3, [pc, #160]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000812:	701a      	strb	r2, [r3, #0]

	printf("%d:%d:%s:%d:%d:%d:%d\n\r", year, month, days[day-1] ,date, hours, minutes, seconds );
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461d      	mov	r5, r3
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	461e      	mov	r6, r3
 8000820:	4b1b      	ldr	r3, [pc, #108]	; (8000890 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	4613      	mov	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	4413      	add	r3, r2
 800082c:	005b      	lsls	r3, r3, #1
 800082e:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8000830:	4413      	add	r3, r2
 8000832:	4a1a      	ldr	r2, [pc, #104]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8000834:	7812      	ldrb	r2, [r2, #0]
 8000836:	4611      	mov	r1, r2
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	4610      	mov	r0, r2
 800083e:	4a10      	ldr	r2, [pc, #64]	; (8000880 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000840:	7812      	ldrb	r2, [r2, #0]
 8000842:	4614      	mov	r4, r2
 8000844:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000846:	7812      	ldrb	r2, [r2, #0]
 8000848:	9203      	str	r2, [sp, #12]
 800084a:	9402      	str	r4, [sp, #8]
 800084c:	9001      	str	r0, [sp, #4]
 800084e:	9100      	str	r1, [sp, #0]
 8000850:	4632      	mov	r2, r6
 8000852:	4629      	mov	r1, r5
 8000854:	4819      	ldr	r0, [pc, #100]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x220>)
 8000856:	f004 f8b5 	bl	80049c4 <iprintf>

}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000862:	bf00      	nop
 8000864:	200000d4 	.word	0x200000d4
 8000868:	20000160 	.word	0x20000160
 800086c:	200000dc 	.word	0x200000dc
 8000870:	200000dd 	.word	0x200000dd
 8000874:	200000de 	.word	0x200000de
 8000878:	200000df 	.word	0x200000df
 800087c:	200000e0 	.word	0x200000e0
 8000880:	200000e1 	.word	0x200000e1
 8000884:	200000e2 	.word	0x200000e2
 8000888:	200000e3 	.word	0x200000e3
 800088c:	200000e4 	.word	0x200000e4
 8000890:	200000e5 	.word	0x200000e5
 8000894:	200000e6 	.word	0x200000e6
 8000898:	200000e7 	.word	0x200000e7
 800089c:	200000e8 	.word	0x200000e8
 80008a0:	200000e9 	.word	0x200000e9
 80008a4:	200000ea 	.word	0x200000ea
 80008a8:	200000eb 	.word	0x200000eb
 80008ac:	200000ec 	.word	0x200000ec
 80008b0:	200000ed 	.word	0x200000ed
 80008b4:	200000ee 	.word	0x200000ee
 80008b8:	20000000 	.word	0x20000000
 80008bc:	08005bd4 	.word	0x08005bd4

080008c0 <DateTime_Main>:

void DateTime_Main()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	int i =0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
	int val;
	//	uint8_t data[] = { 0 , 0, 0, 1, 1 ,1, 1, 1};

	printf("please enter numbers:\n\r");
 80008ca:	481a      	ldr	r0, [pc, #104]	; (8000934 <DateTime_Main+0x74>)
 80008cc:	f004 f87a 	bl	80049c4 <iprintf>
	//	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0, 1, data, 7, 0xff);
	//	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0, 1, readBuff, 7, 0xff);

    while (1)
    {
    	if (commTask()){
 80008d0:	f7ff fe66 	bl	80005a0 <commTask>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0fa      	beq.n	80008d0 <DateTime_Main+0x10>
    		token = strtok(cmdbuffer, s );
 80008da:	4917      	ldr	r1, [pc, #92]	; (8000938 <DateTime_Main+0x78>)
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <DateTime_Main+0x7c>)
 80008de:	f004 f889 	bl	80049f4 <strtok>
 80008e2:	4603      	mov	r3, r0
 80008e4:	4a16      	ldr	r2, [pc, #88]	; (8000940 <DateTime_Main+0x80>)
 80008e6:	6013      	str	r3, [r2, #0]
    		while (token != NULL ) {
 80008e8:	e016      	b.n	8000918 <DateTime_Main+0x58>
    			val = atoi(token);
 80008ea:	4b15      	ldr	r3, [pc, #84]	; (8000940 <DateTime_Main+0x80>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f004 f831 	bl	8004956 <atoi>
 80008f4:	6038      	str	r0, [r7, #0]
    			readBuff[i] = val;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	b2d9      	uxtb	r1, r3
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <DateTime_Main+0x84>)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	701a      	strb	r2, [r3, #0]
    			token = strtok(NULL, s);
 8000904:	490c      	ldr	r1, [pc, #48]	; (8000938 <DateTime_Main+0x78>)
 8000906:	2000      	movs	r0, #0
 8000908:	f004 f874 	bl	80049f4 <strtok>
 800090c:	4603      	mov	r3, r0
 800090e:	4a0c      	ldr	r2, [pc, #48]	; (8000940 <DateTime_Main+0x80>)
 8000910:	6013      	str	r3, [r2, #0]
    			i++;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	3301      	adds	r3, #1
 8000916:	607b      	str	r3, [r7, #4]
    		while (token != NULL ) {
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <DateTime_Main+0x80>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d1e4      	bne.n	80008ea <DateTime_Main+0x2a>
    		}
    		printf("printing the time in format:\n\r YY:MM:MM:DD:d:hh:mm:ss\n\r");
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <DateTime_Main+0x88>)
 8000922:	f004 f84f 	bl	80049c4 <iprintf>

    		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000926:	2036      	movs	r0, #54	; 0x36
 8000928:	f000 fd19 	bl	800135e <HAL_NVIC_EnableIRQ>
    	    HAL_TIM_Base_Start_IT(&htim6);
 800092c:	4807      	ldr	r0, [pc, #28]	; (800094c <DateTime_Main+0x8c>)
 800092e:	f002 feff 	bl	8003730 <HAL_TIM_Base_Start_IT>
    	if (commTask()){
 8000932:	e7cd      	b.n	80008d0 <DateTime_Main+0x10>
 8000934:	08005bec 	.word	0x08005bec
 8000938:	08005c3c 	.word	0x08005c3c
 800093c:	200000f4 	.word	0x200000f4
 8000940:	200000f0 	.word	0x200000f0
 8000944:	200000d4 	.word	0x200000d4
 8000948:	08005c04 	.word	0x08005c04
 800094c:	200001b4 	.word	0x200001b4

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000954:	f000 fb90 	bl	8001078 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000958:	f000 f80b 	bl	8000972 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f902 	bl	8000b64 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000960:	f000 f8d0 	bl	8000b04 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000964:	f000 f856 	bl	8000a14 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000968:	f000 f894 	bl	8000a94 <MX_TIM6_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  DateTime_Main();
 800096c:	f7ff ffa8 	bl	80008c0 <DateTime_Main>


  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x20>

08000972 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b096      	sub	sp, #88	; 0x58
 8000976:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2244      	movs	r2, #68	; 0x44
 800097e:	2100      	movs	r1, #0
 8000980:	4618      	mov	r0, r3
 8000982:	f004 f817 	bl	80049b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000994:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000998:	f001 fb60 	bl	800205c <HAL_PWREx_ControlVoltageScaling>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009a2:	f000 f945 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009a6:	2302      	movs	r3, #2
 80009a8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009b0:	2310      	movs	r3, #16
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b4:	2302      	movs	r3, #2
 80009b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009bc:	2301      	movs	r3, #1
 80009be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009c0:	230a      	movs	r3, #10
 80009c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009c8:	2302      	movs	r3, #2
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4618      	mov	r0, r3
 80009d6:	f001 fb97 	bl	8002108 <HAL_RCC_OscConfig>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009e0:	f000 f926 	bl	8000c30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e4:	230f      	movs	r3, #15
 80009e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e8:	2303      	movs	r3, #3
 80009ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2104      	movs	r1, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f001 ff5f 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a08:	f000 f912 	bl	8000c30 <Error_Handler>
  }
}
 8000a0c:	bf00      	nop
 8000a0e:	3758      	adds	r7, #88	; 0x58
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a18:	4b1b      	ldr	r3, [pc, #108]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a1a:	4a1c      	ldr	r2, [pc, #112]	; (8000a8c <MX_I2C1_Init+0x78>)
 8000a1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000a1e:	4b1a      	ldr	r3, [pc, #104]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a20:	4a1b      	ldr	r2, [pc, #108]	; (8000a90 <MX_I2C1_Init+0x7c>)
 8000a22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a24:	4b18      	ldr	r3, [pc, #96]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a2a:	4b17      	ldr	r3, [pc, #92]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a4e:	480e      	ldr	r0, [pc, #56]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a50:	f000 fe62 	bl	8001718 <HAL_I2C_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a5a:	f000 f8e9 	bl	8000c30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4809      	ldr	r0, [pc, #36]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a62:	f001 fa55 	bl	8001f10 <HAL_I2CEx_ConfigAnalogFilter>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a6c:	f000 f8e0 	bl	8000c30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a70:	2100      	movs	r1, #0
 8000a72:	4805      	ldr	r0, [pc, #20]	; (8000a88 <MX_I2C1_Init+0x74>)
 8000a74:	f001 fa97 	bl	8001fa6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 f8d7 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000160 	.word	0x20000160
 8000a8c:	40005400 	.word	0x40005400
 8000a90:	10909cec 	.word	0x10909cec

08000a94 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_TIM6_Init+0x68>)
 8000aa6:	4a16      	ldr	r2, [pc, #88]	; (8000b00 <MX_TIM6_Init+0x6c>)
 8000aa8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7999;
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_TIM6_Init+0x68>)
 8000aac:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000ab0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_TIM6_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_TIM6_Init+0x68>)
 8000aba:	f242 7210 	movw	r2, #10000	; 0x2710
 8000abe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM6_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM6_Init+0x68>)
 8000ac8:	f002 fdda 	bl	8003680 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ad2:	f000 f8ad 	bl	8000c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4806      	ldr	r0, [pc, #24]	; (8000afc <MX_TIM6_Init+0x68>)
 8000ae4:	f003 f876 	bl	8003bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 f89f 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200001b4 	.word	0x200001b4
 8000b00:	40001000 	.word	0x40001000

08000b04 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b0a:	4a15      	ldr	r2, [pc, #84]	; (8000b60 <MX_USART2_UART_Init+0x5c>)
 8000b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b2a:	220c      	movs	r2, #12
 8000b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USART2_UART_Init+0x58>)
 8000b48:	f003 f8ea 	bl	8003d20 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f86d 	bl	8000c30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000200 	.word	0x20000200
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7a:	4b2b      	ldr	r3, [pc, #172]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a2a      	ldr	r2, [pc, #168]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b80:	f043 0304 	orr.w	r3, r3, #4
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b28      	ldr	r3, [pc, #160]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0304 	and.w	r3, r3, #4
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b92:	4b25      	ldr	r3, [pc, #148]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a24      	ldr	r2, [pc, #144]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	60fb      	str	r3, [r7, #12]
 8000ba8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a1e      	ldr	r2, [pc, #120]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a18      	ldr	r2, [pc, #96]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bc8:	f043 0302 	orr.w	r3, r3, #2
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_GPIO_Init+0xc4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0302 	and.w	r3, r3, #2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f000 fd81 	bl	80016e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bec:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MX_GPIO_Init+0xc8>)
 8000bfe:	f000 fbc9 	bl	8001394 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c02:	2320      	movs	r3, #32
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c06:	2301      	movs	r3, #1
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	4619      	mov	r1, r3
 8000c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c1c:	f000 fbba 	bl	8001394 <HAL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000800 	.word	0x48000800

08000c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x8>
	...

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c46:	4a0e      	ldr	r2, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	f043 0301 	orr.w	r3, r3, #1
 8000c4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5e:	4a08      	ldr	r2, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c64:	6593      	str	r3, [r2, #88]	; 0x58
 8000c66:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b0ac      	sub	sp, #176	; 0xb0
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2288      	movs	r2, #136	; 0x88
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f003 fe85 	bl	80049b4 <memset>
  if(hi2c->Instance==I2C1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a21      	ldr	r2, [pc, #132]	; (8000d34 <HAL_I2C_MspInit+0xb0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d13b      	bne.n	8000d2c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f002 f821 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000ccc:	f7ff ffb0 	bl	8000c30 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd0:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd4:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cd6:	f043 0302 	orr.w	r3, r3, #2
 8000cda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cdc:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000cde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce0:	f003 0302 	and.w	r3, r3, #2
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ce8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf0:	2312      	movs	r3, #18
 8000cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d02:	2304      	movs	r3, #4
 8000d04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480b      	ldr	r0, [pc, #44]	; (8000d3c <HAL_I2C_MspInit+0xb8>)
 8000d10:	f000 fb40 	bl	8001394 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <HAL_I2C_MspInit+0xb4>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d2c:	bf00      	nop
 8000d2e:	37b0      	adds	r7, #176	; 0xb0
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	48000400 	.word	0x48000400

08000d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_TIM_Base_MspInit+0x44>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d113      	bne.n	8000d7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d58:	f043 0310 	orr.w	r3, r3, #16
 8000d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5e:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <HAL_TIM_Base_MspInit+0x48>)
 8000d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2036      	movs	r0, #54	; 0x36
 8000d70:	f000 fad9 	bl	8001326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d74:	2036      	movs	r0, #54	; 0x36
 8000d76:	f000 faf2 	bl	800135e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40001000 	.word	0x40001000
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b0ac      	sub	sp, #176	; 0xb0
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	2288      	movs	r2, #136	; 0x88
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fe01 	bl	80049b4 <memset>
  if(huart->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a21      	ldr	r2, [pc, #132]	; (8000e3c <HAL_UART_MspInit+0xb0>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d13b      	bne.n	8000e34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 ff9d 	bl	8002d08 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff ff2c 	bl	8000c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a18      	ldr	r2, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a12      	ldr	r2, [pc, #72]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <HAL_UART_MspInit+0xb4>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e08:	230c      	movs	r3, #12
 8000e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e20:	2307      	movs	r3, #7
 8000e22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e30:	f000 fab0 	bl	8001394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e34:	bf00      	nop
 8000e36:	37b0      	adds	r7, #176	; 0xb0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40021000 	.word	0x40021000

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f94e 	bl	8001130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <TIM6_DAC_IRQHandler+0x10>)
 8000e9e:	f002 fcb7 	bl	8003810 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	200001b4 	.word	0x200001b4

08000eac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
	return 1;
 8000eb0:	2301      	movs	r3, #1
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <_kill>:

int _kill(int pid, int sig)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ec6:	f003 fd4b 	bl	8004960 <__errno>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2216      	movs	r2, #22
 8000ece:	601a      	str	r2, [r3, #0]
	return -1;
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_exit>:

void _exit (int status)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffe7 	bl	8000ebc <_kill>
	while (1) {}		/* Make sure we hang here */
 8000eee:	e7fe      	b.n	8000eee <_exit+0x12>

08000ef0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
 8000f4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f52:	605a      	str	r2, [r3, #4]
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <_isatty>:

int _isatty(int file)
{
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	return 1;
 8000f6a:	2301      	movs	r3, #1
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	return 0;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3714      	adds	r7, #20
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f9c:	4a14      	ldr	r2, [pc, #80]	; (8000ff0 <_sbrk+0x5c>)
 8000f9e:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <_sbrk+0x60>)
 8000fa0:	1ad3      	subs	r3, r2, r3
 8000fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <_sbrk+0x64>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d102      	bne.n	8000fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <_sbrk+0x64>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <_sbrk+0x68>)
 8000fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d207      	bcs.n	8000fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fc4:	f003 fccc 	bl	8004960 <__errno>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	220c      	movs	r2, #12
 8000fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	e009      	b.n	8000fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <_sbrk+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fda:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <_sbrk+0x64>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <_sbrk+0x64>)
 8000fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3718      	adds	r7, #24
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20018000 	.word	0x20018000
 8000ff4:	00000400 	.word	0x00000400
 8000ff8:	20000284 	.word	0x20000284
 8000ffc:	200002a0 	.word	0x200002a0

08001000 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001028:	f7ff ffea 	bl	8001000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800102c:	480c      	ldr	r0, [pc, #48]	; (8001060 <LoopForever+0x6>)
  ldr r1, =_edata
 800102e:	490d      	ldr	r1, [pc, #52]	; (8001064 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <LoopForever+0xe>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001034:	e002      	b.n	800103c <LoopCopyDataInit>

08001036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103a:	3304      	adds	r3, #4

0800103c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800103c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800103e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001040:	d3f9      	bcc.n	8001036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001042:	4a0a      	ldr	r2, [pc, #40]	; (800106c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001044:	4c0a      	ldr	r4, [pc, #40]	; (8001070 <LoopForever+0x16>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001048:	e001      	b.n	800104e <LoopFillZerobss>

0800104a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800104c:	3204      	adds	r2, #4

0800104e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800104e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001050:	d3fb      	bcc.n	800104a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001052:	f003 fc8b 	bl	800496c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fc7b 	bl	8000950 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001064:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 8001068:	08005ee4 	.word	0x08005ee4
  ldr r2, =_sbss
 800106c:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8001070:	2000029c 	.word	0x2000029c

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>
	...

08001078 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001082:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_Init+0x3c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <HAL_Init+0x3c>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800108e:	2003      	movs	r0, #3
 8001090:	f000 f93e 	bl	8001310 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001094:	2000      	movs	r0, #0
 8001096:	f000 f80f 	bl	80010b8 <HAL_InitTick>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d002      	beq.n	80010a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	e001      	b.n	80010aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010a6:	f7ff fdc9 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010aa:	79fb      	ldrb	r3, [r7, #7]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40022000 	.word	0x40022000

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_InitTick+0x6c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d023      	beq.n	8001114 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_InitTick+0x70>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_InitTick+0x6c>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f949 	bl	800137a <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d10f      	bne.n	800110e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2b0f      	cmp	r3, #15
 80010f2:	d809      	bhi.n	8001108 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f4:	2200      	movs	r2, #0
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f000 f913 	bl	8001326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001100:	4a0a      	ldr	r2, [pc, #40]	; (800112c <HAL_InitTick+0x74>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e007      	b.n	8001118 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e004      	b.n	8001118 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	73fb      	strb	r3, [r7, #15]
 8001112:	e001      	b.n	8001118 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001118:	7bfb      	ldrb	r3, [r7, #15]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000050 	.word	0x20000050
 8001128:	20000048 	.word	0x20000048
 800112c:	2000004c 	.word	0x2000004c

08001130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <HAL_IncTick+0x20>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_IncTick+0x24>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4413      	add	r3, r2
 8001140:	4a04      	ldr	r2, [pc, #16]	; (8001154 <HAL_IncTick+0x24>)
 8001142:	6013      	str	r3, [r2, #0]
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000050 	.word	0x20000050
 8001154:	20000288 	.word	0x20000288

08001158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  return uwTick;
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <HAL_GetTick+0x14>)
 800115e:	681b      	ldr	r3, [r3, #0]
}
 8001160:	4618      	mov	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	20000288 	.word	0x20000288

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4907      	ldr	r1, [pc, #28]	; (800120c <__NVIC_EnableIRQ+0x38>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	e000e100 	.word	0xe000e100

08001210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	6039      	str	r1, [r7, #0]
 800121a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	2b00      	cmp	r3, #0
 8001222:	db0a      	blt.n	800123a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	b2da      	uxtb	r2, r3
 8001228:	490c      	ldr	r1, [pc, #48]	; (800125c <__NVIC_SetPriority+0x4c>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	0112      	lsls	r2, r2, #4
 8001230:	b2d2      	uxtb	r2, r2
 8001232:	440b      	add	r3, r1
 8001234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001238:	e00a      	b.n	8001250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4908      	ldr	r1, [pc, #32]	; (8001260 <__NVIC_SetPriority+0x50>)
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	f003 030f 	and.w	r3, r3, #15
 8001246:	3b04      	subs	r3, #4
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	b2d2      	uxtb	r2, r2
 800124c:	440b      	add	r3, r1
 800124e:	761a      	strb	r2, [r3, #24]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001264:	b480      	push	{r7}
 8001266:	b089      	sub	sp, #36	; 0x24
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f1c3 0307 	rsb	r3, r3, #7
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf28      	it	cs
 8001282:	2304      	movcs	r3, #4
 8001284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3304      	adds	r3, #4
 800128a:	2b06      	cmp	r3, #6
 800128c:	d902      	bls.n	8001294 <NVIC_EncodePriority+0x30>
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3b03      	subs	r3, #3
 8001292:	e000      	b.n	8001296 <NVIC_EncodePriority+0x32>
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	401a      	ands	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012ac:	f04f 31ff 	mov.w	r1, #4294967295
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	fa01 f303 	lsl.w	r3, r1, r3
 80012b6:	43d9      	mvns	r1, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	4313      	orrs	r3, r2
         );
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3724      	adds	r7, #36	; 0x24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
	...

080012cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012dc:	d301      	bcc.n	80012e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012de:	2301      	movs	r3, #1
 80012e0:	e00f      	b.n	8001302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e2:	4a0a      	ldr	r2, [pc, #40]	; (800130c <SysTick_Config+0x40>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ea:	210f      	movs	r1, #15
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f7ff ff8e 	bl	8001210 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f4:	4b05      	ldr	r3, [pc, #20]	; (800130c <SysTick_Config+0x40>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <SysTick_Config+0x40>)
 80012fc:	2207      	movs	r2, #7
 80012fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	e000e010 	.word	0xe000e010

08001310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f7ff ff29 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b086      	sub	sp, #24
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	60b9      	str	r1, [r7, #8]
 8001330:	607a      	str	r2, [r7, #4]
 8001332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001338:	f7ff ff3e 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 800133c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	68b9      	ldr	r1, [r7, #8]
 8001342:	6978      	ldr	r0, [r7, #20]
 8001344:	f7ff ff8e 	bl	8001264 <NVIC_EncodePriority>
 8001348:	4602      	mov	r2, r0
 800134a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff ff5d 	bl	8001210 <__NVIC_SetPriority>
}
 8001356:	bf00      	nop
 8001358:	3718      	adds	r7, #24
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff ff31 	bl	80011d4 <__NVIC_EnableIRQ>
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff ffa2 	bl	80012cc <SysTick_Config>
 8001388:	4603      	mov	r3, r0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
	...

08001394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001394:	b480      	push	{r7}
 8001396:	b087      	sub	sp, #28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013a2:	e17f      	b.n	80016a4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	fa01 f303 	lsl.w	r3, r1, r3
 80013b0:	4013      	ands	r3, r2
 80013b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	f000 8171 	beq.w	800169e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d005      	beq.n	80013d4 <HAL_GPIO_Init+0x40>
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0303 	and.w	r3, r3, #3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d130      	bne.n	8001436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	2203      	movs	r2, #3
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4013      	ands	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800140a:	2201      	movs	r2, #1
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4013      	ands	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	091b      	lsrs	r3, r3, #4
 8001420:	f003 0201 	and.w	r2, r3, #1
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4313      	orrs	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f003 0303 	and.w	r3, r3, #3
 800143e:	2b03      	cmp	r3, #3
 8001440:	d118      	bne.n	8001474 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001448:	2201      	movs	r2, #1
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	f003 0201 	and.w	r2, r3, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b03      	cmp	r3, #3
 800147e:	d017      	beq.n	80014b0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	2203      	movs	r2, #3
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	689a      	ldr	r2, [r3, #8]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f003 0303 	and.w	r3, r3, #3
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d123      	bne.n	8001504 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	08da      	lsrs	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3208      	adds	r2, #8
 80014c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	220f      	movs	r2, #15
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	43db      	mvns	r3, r3
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	691a      	ldr	r2, [r3, #16]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	2203      	movs	r2, #3
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	43db      	mvns	r3, r3
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4013      	ands	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0203 	and.w	r2, r3, #3
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	693a      	ldr	r2, [r7, #16]
 8001536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80ac 	beq.w	800169e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	4b5f      	ldr	r3, [pc, #380]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <HAL_GPIO_Init+0x330>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6613      	str	r3, [r2, #96]	; 0x60
 8001552:	4b5c      	ldr	r3, [pc, #368]	; (80016c4 <HAL_GPIO_Init+0x330>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	60bb      	str	r3, [r7, #8]
 800155c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <HAL_GPIO_Init+0x334>)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	089b      	lsrs	r3, r3, #2
 8001564:	3302      	adds	r3, #2
 8001566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	220f      	movs	r2, #15
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	693a      	ldr	r2, [r7, #16]
 800157e:	4013      	ands	r3, r2
 8001580:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001588:	d025      	beq.n	80015d6 <HAL_GPIO_Init+0x242>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <HAL_GPIO_Init+0x338>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d01f      	beq.n	80015d2 <HAL_GPIO_Init+0x23e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4e      	ldr	r2, [pc, #312]	; (80016d0 <HAL_GPIO_Init+0x33c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x23a>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4d      	ldr	r2, [pc, #308]	; (80016d4 <HAL_GPIO_Init+0x340>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x236>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4c      	ldr	r2, [pc, #304]	; (80016d8 <HAL_GPIO_Init+0x344>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x232>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a4b      	ldr	r2, [pc, #300]	; (80016dc <HAL_GPIO_Init+0x348>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x22e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a4a      	ldr	r2, [pc, #296]	; (80016e0 <HAL_GPIO_Init+0x34c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x22a>
 80015ba:	2306      	movs	r3, #6
 80015bc:	e00c      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015be:	2307      	movs	r3, #7
 80015c0:	e00a      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015c2:	2305      	movs	r3, #5
 80015c4:	e008      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015ca:	2303      	movs	r3, #3
 80015cc:	e004      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015ce:	2302      	movs	r3, #2
 80015d0:	e002      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015d2:	2301      	movs	r3, #1
 80015d4:	e000      	b.n	80015d8 <HAL_GPIO_Init+0x244>
 80015d6:	2300      	movs	r3, #0
 80015d8:	697a      	ldr	r2, [r7, #20]
 80015da:	f002 0203 	and.w	r2, r2, #3
 80015de:	0092      	lsls	r2, r2, #2
 80015e0:	4093      	lsls	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015e8:	4937      	ldr	r1, [pc, #220]	; (80016c8 <HAL_GPIO_Init+0x334>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f6:	4b3b      	ldr	r3, [pc, #236]	; (80016e4 <HAL_GPIO_Init+0x350>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800161a:	4a32      	ldr	r2, [pc, #200]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800164a:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800166e:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <HAL_GPIO_Init+0x350>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <HAL_GPIO_Init+0x350>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa22 f303 	lsr.w	r3, r2, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	f47f ae78 	bne.w	80013a4 <HAL_GPIO_Init+0x10>
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	371c      	adds	r7, #28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000
 80016cc:	48000400 	.word	0x48000400
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000c00 	.word	0x48000c00
 80016d8:	48001000 	.word	0x48001000
 80016dc:	48001400 	.word	0x48001400
 80016e0:	48001800 	.word	0x48001800
 80016e4:	40010400 	.word	0x40010400

080016e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	807b      	strh	r3, [r7, #2]
 80016f4:	4613      	mov	r3, r2
 80016f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f8:	787b      	ldrb	r3, [r7, #1]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016fe:	887a      	ldrh	r2, [r7, #2]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001704:	e002      	b.n	800170c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e081      	b.n	800182e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff faa0 	bl	8000c84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2224      	movs	r2, #36	; 0x24
 8001748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0201 	bic.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	685a      	ldr	r2, [r3, #4]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001768:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001778:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d107      	bne.n	8001792 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	e006      	b.n	80017a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800179e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d104      	bne.n	80017b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	6812      	ldr	r2, [r2, #0]
 80017bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80017c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	691a      	ldr	r2, [r3, #16]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69d9      	ldr	r1, [r3, #28]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a1a      	ldr	r2, [r3, #32]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f042 0201 	orr.w	r2, r2, #1
 800180e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2200      	movs	r2, #0
 8001814:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2220      	movs	r2, #32
 800181a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af02      	add	r7, sp, #8
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	4608      	mov	r0, r1
 8001842:	4611      	mov	r1, r2
 8001844:	461a      	mov	r2, r3
 8001846:	4603      	mov	r3, r0
 8001848:	817b      	strh	r3, [r7, #10]
 800184a:	460b      	mov	r3, r1
 800184c:	813b      	strh	r3, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b20      	cmp	r3, #32
 800185c:	f040 80fd 	bne.w	8001a5a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d002      	beq.n	800186c <HAL_I2C_Mem_Read+0x34>
 8001866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001872:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e0f1      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800187e:	2b01      	cmp	r3, #1
 8001880:	d101      	bne.n	8001886 <HAL_I2C_Mem_Read+0x4e>
 8001882:	2302      	movs	r3, #2
 8001884:	e0ea      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800188e:	f7ff fc63 	bl	8001158 <HAL_GetTick>
 8001892:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2319      	movs	r3, #25
 800189a:	2201      	movs	r2, #1
 800189c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 f95b 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e0d5      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2222      	movs	r2, #34	; 0x22
 80018b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2200      	movs	r2, #0
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6a3a      	ldr	r2, [r7, #32]
 80018ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80018d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80018d8:	88f8      	ldrh	r0, [r7, #6]
 80018da:	893a      	ldrh	r2, [r7, #8]
 80018dc:	8979      	ldrh	r1, [r7, #10]
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	4603      	mov	r3, r0
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f8bf 	bl	8001a6c <I2C_RequestMemoryRead>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d005      	beq.n	8001900 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0ad      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001904:	b29b      	uxth	r3, r3
 8001906:	2bff      	cmp	r3, #255	; 0xff
 8001908:	d90e      	bls.n	8001928 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	22ff      	movs	r2, #255	; 0xff
 800190e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001914:	b2da      	uxtb	r2, r3
 8001916:	8979      	ldrh	r1, [r7, #10]
 8001918:	4b52      	ldr	r3, [pc, #328]	; (8001a64 <HAL_I2C_Mem_Read+0x22c>)
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac3 	bl	8001eac <I2C_TransferConfig>
 8001926:	e00f      	b.n	8001948 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800192c:	b29a      	uxth	r2, r3
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001936:	b2da      	uxtb	r2, r3
 8001938:	8979      	ldrh	r1, [r7, #10]
 800193a:	4b4a      	ldr	r3, [pc, #296]	; (8001a64 <HAL_I2C_Mem_Read+0x22c>)
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001942:	68f8      	ldr	r0, [r7, #12]
 8001944:	f000 fab2 	bl	8001eac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	9300      	str	r3, [sp, #0]
 800194c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800194e:	2200      	movs	r2, #0
 8001950:	2104      	movs	r1, #4
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f000 f902 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e07c      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	1c5a      	adds	r2, r3, #1
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29a      	uxth	r2, r3
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d034      	beq.n	8001a08 <HAL_I2C_Mem_Read+0x1d0>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d130      	bne.n	8001a08 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ac:	2200      	movs	r2, #0
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f8d3 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e04d      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2bff      	cmp	r3, #255	; 0xff
 80019c8:	d90e      	bls.n	80019e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	22ff      	movs	r2, #255	; 0xff
 80019ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	8979      	ldrh	r1, [r7, #10]
 80019d8:	2300      	movs	r3, #0
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f000 fa63 	bl	8001eac <I2C_TransferConfig>
 80019e6:	e00f      	b.n	8001a08 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	8979      	ldrh	r1, [r7, #10]
 80019fa:	2300      	movs	r3, #0
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 fa52 	bl	8001eac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d19a      	bne.n	8001948 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f920 	bl	8001c5c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e01a      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6859      	ldr	r1, [r3, #4]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_I2C_Mem_Read+0x230>)
 8001a3a:	400b      	ands	r3, r1
 8001a3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2220      	movs	r2, #32
 8001a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e000      	b.n	8001a5c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001a5a:	2302      	movs	r3, #2
  }
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	80002400 	.word	0x80002400
 8001a68:	fe00e800 	.word	0xfe00e800

08001a6c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	817b      	strh	r3, [r7, #10]
 8001a7e:	460b      	mov	r3, r1
 8001a80:	813b      	strh	r3, [r7, #8]
 8001a82:	4613      	mov	r3, r2
 8001a84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001a86:	88fb      	ldrh	r3, [r7, #6]
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	8979      	ldrh	r1, [r7, #10]
 8001a8c:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <I2C_RequestMemoryRead+0xa4>)
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 fa0a 	bl	8001eac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a98:	69fa      	ldr	r2, [r7, #28]
 8001a9a:	69b9      	ldr	r1, [r7, #24]
 8001a9c:	68f8      	ldr	r0, [r7, #12]
 8001a9e:	f000 f89d 	bl	8001bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e02c      	b.n	8001b06 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d105      	bne.n	8001abe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ab2:	893b      	ldrh	r3, [r7, #8]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
 8001abc:	e015      	b.n	8001aea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001abe:	893b      	ldrh	r3, [r7, #8]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 f883 	bl	8001bdc <I2C_WaitOnTXISFlagUntilTimeout>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e012      	b.n	8001b06 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ae0:	893b      	ldrh	r3, [r7, #8]
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2200      	movs	r2, #0
 8001af2:	2140      	movs	r1, #64	; 0x40
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 f831 	bl	8001b5c <I2C_WaitOnFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	80002000 	.word	0x80002000

08001b14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d103      	bne.n	8001b32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d007      	beq.n	8001b50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	699a      	ldr	r2, [r3, #24]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	619a      	str	r2, [r3, #24]
  }
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr

08001b5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b6c:	e022      	b.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d01e      	beq.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b76:	f7ff faef 	bl	8001158 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d302      	bcc.n	8001b8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d113      	bne.n	8001bb4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e00f      	b.n	8001bd4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699a      	ldr	r2, [r3, #24]
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	bf0c      	ite	eq
 8001bc4:	2301      	moveq	r3, #1
 8001bc6:	2300      	movne	r3, #0
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d0cd      	beq.n	8001b6e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001be8:	e02c      	b.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f000 f870 	bl	8001cd4 <I2C_IsErrorOccurred>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e02a      	b.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c04:	d01e      	beq.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c06:	f7ff faa7 	bl	8001158 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	68ba      	ldr	r2, [r7, #8]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d302      	bcc.n	8001c1c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c20:	f043 0220 	orr.w	r2, r3, #32
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e007      	b.n	8001c54 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d1cb      	bne.n	8001bea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c68:	e028      	b.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	68b9      	ldr	r1, [r7, #8]
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 f830 	bl	8001cd4 <I2C_IsErrorOccurred>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e026      	b.n	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7e:	f7ff fa6b 	bl	8001158 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d113      	bne.n	8001cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c98:	f043 0220 	orr.w	r2, r3, #32
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e007      	b.n	8001ccc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	f003 0320 	and.w	r3, r3, #32
 8001cc6:	2b20      	cmp	r3, #32
 8001cc8:	d1cf      	bne.n	8001c6a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3710      	adds	r7, #16
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	; 0x28
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d075      	beq.n	8001dec <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2210      	movs	r2, #16
 8001d06:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d08:	e056      	b.n	8001db8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d10:	d052      	beq.n	8001db8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d12:	f7ff fa21 	bl	8001158 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d302      	bcc.n	8001d28 <I2C_IsErrorOccurred+0x54>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d147      	bne.n	8001db8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d32:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d3a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d4a:	d12e      	bne.n	8001daa <I2C_IsErrorOccurred+0xd6>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001d52:	d02a      	beq.n	8001daa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001d54:	7cfb      	ldrb	r3, [r7, #19]
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d027      	beq.n	8001daa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d68:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d6a:	f7ff f9f5 	bl	8001158 <HAL_GetTick>
 8001d6e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d70:	e01b      	b.n	8001daa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d72:	f7ff f9f1 	bl	8001158 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b19      	cmp	r3, #25
 8001d7e:	d914      	bls.n	8001daa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d84:	f043 0220 	orr.w	r2, r3, #32
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2220      	movs	r2, #32
 8001d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	699b      	ldr	r3, [r3, #24]
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d1dc      	bne.n	8001d72 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	699b      	ldr	r3, [r3, #24]
 8001dbe:	f003 0320 	and.w	r3, r3, #32
 8001dc2:	2b20      	cmp	r3, #32
 8001dc4:	d003      	beq.n	8001dce <I2C_IsErrorOccurred+0xfa>
 8001dc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d09d      	beq.n	8001d0a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001dce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d103      	bne.n	8001dde <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	699b      	ldr	r3, [r3, #24]
 8001df2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00b      	beq.n	8001e16 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d00b      	beq.n	8001e38 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e20:	6a3b      	ldr	r3, [r7, #32]
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00b      	beq.n	8001e5a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d01c      	beq.n	8001e9c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f7ff fe56 	bl	8001b14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	6859      	ldr	r1, [r3, #4]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <I2C_IsErrorOccurred+0x1d4>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e7c:	6a3b      	ldr	r3, [r7, #32]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	fe00e800 	.word	0xfe00e800

08001eac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	817b      	strh	r3, [r7, #10]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ec4:	7a7b      	ldrb	r3, [r7, #9]
 8001ec6:	041b      	lsls	r3, r3, #16
 8001ec8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ecc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001eda:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	0d5b      	lsrs	r3, r3, #21
 8001ee6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <I2C_TransferConfig+0x60>)
 8001eec:	430b      	orrs	r3, r1
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	ea02 0103 	and.w	r1, r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001efe:	bf00      	nop
 8001f00:	371c      	adds	r7, #28
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	03ff63ff 	.word	0x03ff63ff

08001f10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d138      	bne.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e032      	b.n	8001f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2224      	movs	r2, #36	; 0x24
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b085      	sub	sp, #20
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
 8001fae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b20      	cmp	r3, #32
 8001fba:	d139      	bne.n	8002030 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d101      	bne.n	8001fca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	e033      	b.n	8002032 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2224      	movs	r2, #36	; 0x24
 8001fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 0201 	bic.w	r2, r2, #1
 8001fe8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ff8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68fa      	ldr	r2, [r7, #12]
 800200a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0201 	orr.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2220      	movs	r2, #32
 8002020:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	4618      	mov	r0, r3
 8002034:	3714      	adds	r7, #20
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <HAL_PWREx_GetVoltageRange+0x18>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800204c:	4618      	mov	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40007000 	.word	0x40007000

0800205c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d130      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800206c:	4b23      	ldr	r3, [pc, #140]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002078:	d038      	beq.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800207a:	4b20      	ldr	r3, [pc, #128]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002082:	4a1e      	ldr	r2, [pc, #120]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800208a:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2232      	movs	r2, #50	; 0x32
 8002090:	fb02 f303 	mul.w	r3, r2, r3
 8002094:	4a1b      	ldr	r2, [pc, #108]	; (8002104 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002096:	fba2 2303 	umull	r2, r3, r2, r3
 800209a:	0c9b      	lsrs	r3, r3, #18
 800209c:	3301      	adds	r3, #1
 800209e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a0:	e002      	b.n	80020a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3b01      	subs	r3, #1
 80020a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020b4:	d102      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f2      	bne.n	80020a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c8:	d110      	bne.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e00f      	b.n	80020ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020da:	d007      	beq.n	80020ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020dc:	4b07      	ldr	r3, [pc, #28]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020e4:	4a05      	ldr	r2, [pc, #20]	; (80020fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40007000 	.word	0x40007000
 8002100:	20000048 	.word	0x20000048
 8002104:	431bde83 	.word	0x431bde83

08002108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b088      	sub	sp, #32
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e3ca      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b97      	ldr	r3, [pc, #604]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b94      	ldr	r3, [pc, #592]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80e4 	beq.w	8002304 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_RCC_OscConfig+0x4a>
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	2b0c      	cmp	r3, #12
 8002146:	f040 808b 	bne.w	8002260 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	2b01      	cmp	r3, #1
 800214e:	f040 8087 	bne.w	8002260 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002152:	4b89      	ldr	r3, [pc, #548]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0302 	and.w	r3, r3, #2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_RCC_OscConfig+0x62>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d101      	bne.n	800216a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e3a2      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	4b82      	ldr	r3, [pc, #520]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d004      	beq.n	8002184 <HAL_RCC_OscConfig+0x7c>
 800217a:	4b7f      	ldr	r3, [pc, #508]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002182:	e005      	b.n	8002190 <HAL_RCC_OscConfig+0x88>
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002186:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	4293      	cmp	r3, r2
 8002192:	d223      	bcs.n	80021dc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4618      	mov	r0, r3
 800219a:	f000 fd55 	bl	8002c48 <RCC_SetFlashLatencyFromMSIRange>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e383      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021a8:	4b73      	ldr	r3, [pc, #460]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a72      	ldr	r2, [pc, #456]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021ae:	f043 0308 	orr.w	r3, r3, #8
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b70      	ldr	r3, [pc, #448]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	496d      	ldr	r1, [pc, #436]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c6:	4b6c      	ldr	r3, [pc, #432]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	021b      	lsls	r3, r3, #8
 80021d4:	4968      	ldr	r1, [pc, #416]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	604b      	str	r3, [r1, #4]
 80021da:	e025      	b.n	8002228 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021dc:	4b66      	ldr	r3, [pc, #408]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a65      	ldr	r2, [pc, #404]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b63      	ldr	r3, [pc, #396]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4960      	ldr	r1, [pc, #384]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021fa:	4b5f      	ldr	r3, [pc, #380]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	495b      	ldr	r1, [pc, #364]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800220a:	4313      	orrs	r3, r2
 800220c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d109      	bne.n	8002228 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4618      	mov	r0, r3
 800221a:	f000 fd15 	bl	8002c48 <RCC_SetFlashLatencyFromMSIRange>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d001      	beq.n	8002228 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e343      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002228:	f000 fc4a 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 800222c:	4602      	mov	r2, r0
 800222e:	4b52      	ldr	r3, [pc, #328]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	091b      	lsrs	r3, r3, #4
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	4950      	ldr	r1, [pc, #320]	; (800237c <HAL_RCC_OscConfig+0x274>)
 800223a:	5ccb      	ldrb	r3, [r1, r3]
 800223c:	f003 031f 	and.w	r3, r3, #31
 8002240:	fa22 f303 	lsr.w	r3, r2, r3
 8002244:	4a4e      	ldr	r2, [pc, #312]	; (8002380 <HAL_RCC_OscConfig+0x278>)
 8002246:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002248:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_OscConfig+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ff33 	bl	80010b8 <HAL_InitTick>
 8002252:	4603      	mov	r3, r0
 8002254:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002256:	7bfb      	ldrb	r3, [r7, #15]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d052      	beq.n	8002302 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	e327      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d032      	beq.n	80022ce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002268:	4b43      	ldr	r3, [pc, #268]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a42      	ldr	r2, [pc, #264]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800226e:	f043 0301 	orr.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002274:	f7fe ff70 	bl	8001158 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227c:	f7fe ff6c 	bl	8001158 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e310      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800228e:	4b3a      	ldr	r3, [pc, #232]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800229a:	4b37      	ldr	r3, [pc, #220]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a36      	ldr	r2, [pc, #216]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022a0:	f043 0308 	orr.w	r3, r3, #8
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4931      	ldr	r1, [pc, #196]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022b8:	4b2f      	ldr	r3, [pc, #188]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	492c      	ldr	r1, [pc, #176]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	604b      	str	r3, [r1, #4]
 80022cc:	e01a      	b.n	8002304 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022ce:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a29      	ldr	r2, [pc, #164]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022da:	f7fe ff3d 	bl	8001158 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022e2:	f7fe ff39 	bl	8001158 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e2dd      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1f0      	bne.n	80022e2 <HAL_RCC_OscConfig+0x1da>
 8002300:	e000      	b.n	8002304 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002302:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d074      	beq.n	80023fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2b08      	cmp	r3, #8
 8002314:	d005      	beq.n	8002322 <HAL_RCC_OscConfig+0x21a>
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d10e      	bne.n	800233a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d10b      	bne.n	800233a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d064      	beq.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d160      	bne.n	80023f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e2ba      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x24a>
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a0b      	ldr	r2, [pc, #44]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800234a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e026      	b.n	80023a0 <HAL_RCC_OscConfig+0x298>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800235a:	d115      	bne.n	8002388 <HAL_RCC_OscConfig+0x280>
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a05      	ldr	r2, [pc, #20]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 8002362:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b03      	ldr	r3, [pc, #12]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a02      	ldr	r2, [pc, #8]	; (8002378 <HAL_RCC_OscConfig+0x270>)
 800236e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	e014      	b.n	80023a0 <HAL_RCC_OscConfig+0x298>
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	08005c40 	.word	0x08005c40
 8002380:	20000048 	.word	0x20000048
 8002384:	2000004c 	.word	0x2000004c
 8002388:	4ba0      	ldr	r3, [pc, #640]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a9f      	ldr	r2, [pc, #636]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]
 8002394:	4b9d      	ldr	r3, [pc, #628]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a9c      	ldr	r2, [pc, #624]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fed6 	bl	8001158 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023b0:	f7fe fed2 	bl	8001158 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b64      	cmp	r3, #100	; 0x64
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e276      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023c2:	4b92      	ldr	r3, [pc, #584]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2a8>
 80023ce:	e014      	b.n	80023fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fec2 	bl	8001158 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d8:	f7fe febe 	bl	8001158 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b64      	cmp	r3, #100	; 0x64
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e262      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ea:	4b88      	ldr	r3, [pc, #544]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x2d0>
 80023f6:	e000      	b.n	80023fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d060      	beq.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d005      	beq.n	8002418 <HAL_RCC_OscConfig+0x310>
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d119      	bne.n	8002446 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d116      	bne.n	8002446 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002418:	4b7c      	ldr	r3, [pc, #496]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x328>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e23f      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b76      	ldr	r3, [pc, #472]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	061b      	lsls	r3, r3, #24
 800243e:	4973      	ldr	r1, [pc, #460]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002440:	4313      	orrs	r3, r2
 8002442:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002444:	e040      	b.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d023      	beq.n	8002496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244e:	4b6f      	ldr	r3, [pc, #444]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6e      	ldr	r2, [pc, #440]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7fe fe7d 	bl	8001158 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7fe fe79 	bl	8001158 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e21d      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002474:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002480:	4b62      	ldr	r3, [pc, #392]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	061b      	lsls	r3, r3, #24
 800248e:	495f      	ldr	r1, [pc, #380]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002490:	4313      	orrs	r3, r2
 8002492:	604b      	str	r3, [r1, #4]
 8002494:	e018      	b.n	80024c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a5c      	ldr	r2, [pc, #368]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800249c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe fe59 	bl	8001158 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024aa:	f7fe fe55 	bl	8001158 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e1f9      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024bc:	4b53      	ldr	r3, [pc, #332]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d1f0      	bne.n	80024aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d03c      	beq.n	800254e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d01c      	beq.n	8002516 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024dc:	4b4b      	ldr	r3, [pc, #300]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80024de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024e2:	4a4a      	ldr	r2, [pc, #296]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7fe fe34 	bl	8001158 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f4:	f7fe fe30 	bl	8001158 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e1d4      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002506:	4b41      	ldr	r3, [pc, #260]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d0ef      	beq.n	80024f4 <HAL_RCC_OscConfig+0x3ec>
 8002514:	e01b      	b.n	800254e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002516:	4b3d      	ldr	r3, [pc, #244]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800251c:	4a3b      	ldr	r2, [pc, #236]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fe17 	bl	8001158 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800252e:	f7fe fe13 	bl	8001158 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e1b7      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1ef      	bne.n	800252e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80a6 	beq.w	80026a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002560:	4b2a      	ldr	r3, [pc, #168]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10d      	bne.n	8002588 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256c:	4b27      	ldr	r3, [pc, #156]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800256e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002576:	6593      	str	r3, [r2, #88]	; 0x58
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x504>)
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002584:	2301      	movs	r3, #1
 8002586:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002588:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_RCC_OscConfig+0x508>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d118      	bne.n	80025c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002594:	4b1e      	ldr	r3, [pc, #120]	; (8002610 <HAL_RCC_OscConfig+0x508>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a1d      	ldr	r2, [pc, #116]	; (8002610 <HAL_RCC_OscConfig+0x508>)
 800259a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025a0:	f7fe fdda 	bl	8001158 <HAL_GetTick>
 80025a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a8:	f7fe fdd6 	bl	8001158 <HAL_GetTick>
 80025ac:	4602      	mov	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e17a      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_RCC_OscConfig+0x508>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d0f0      	beq.n	80025a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x4d8>
 80025ce:	4b0f      	ldr	r3, [pc, #60]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80025d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d4:	4a0d      	ldr	r2, [pc, #52]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80025d6:	f043 0301 	orr.w	r3, r3, #1
 80025da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025de:	e029      	b.n	8002634 <HAL_RCC_OscConfig+0x52c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d115      	bne.n	8002614 <HAL_RCC_OscConfig+0x50c>
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	4a07      	ldr	r2, [pc, #28]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80025f0:	f043 0304 	orr.w	r3, r3, #4
 80025f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f8:	4b04      	ldr	r3, [pc, #16]	; (800260c <HAL_RCC_OscConfig+0x504>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fe:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_OscConfig+0x504>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002608:	e014      	b.n	8002634 <HAL_RCC_OscConfig+0x52c>
 800260a:	bf00      	nop
 800260c:	40021000 	.word	0x40021000
 8002610:	40007000 	.word	0x40007000
 8002614:	4b9c      	ldr	r3, [pc, #624]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	4a9b      	ldr	r2, [pc, #620]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002624:	4b98      	ldr	r3, [pc, #608]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	4a97      	ldr	r2, [pc, #604]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d016      	beq.n	800266a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fd8c 	bl	8001158 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002642:	e00a      	b.n	800265a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002644:	f7fe fd88 	bl	8001158 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e12a      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800265a:	4b8b      	ldr	r3, [pc, #556]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800265c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d0ed      	beq.n	8002644 <HAL_RCC_OscConfig+0x53c>
 8002668:	e015      	b.n	8002696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266a:	f7fe fd75 	bl	8001158 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002670:	e00a      	b.n	8002688 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002672:	f7fe fd71 	bl	8001158 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002680:	4293      	cmp	r3, r2
 8002682:	d901      	bls.n	8002688 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002684:	2303      	movs	r3, #3
 8002686:	e113      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002688:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800268a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ed      	bne.n	8002672 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d105      	bne.n	80026a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800269c:	4b7a      	ldr	r3, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	4a79      	ldr	r2, [pc, #484]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80026a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80fe 	beq.w	80028ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	f040 80d0 	bne.w	800285c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026bc:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f003 0203 	and.w	r2, r3, #3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d130      	bne.n	8002732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	3b01      	subs	r3, #1
 80026dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d127      	bne.n	8002732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d11f      	bne.n	8002732 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026fc:	2a07      	cmp	r2, #7
 80026fe:	bf14      	ite	ne
 8002700:	2201      	movne	r2, #1
 8002702:	2200      	moveq	r2, #0
 8002704:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002706:	4293      	cmp	r3, r2
 8002708:	d113      	bne.n	8002732 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	085b      	lsrs	r3, r3, #1
 8002716:	3b01      	subs	r3, #1
 8002718:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800271a:	429a      	cmp	r2, r3
 800271c:	d109      	bne.n	8002732 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002728:	085b      	lsrs	r3, r3, #1
 800272a:	3b01      	subs	r3, #1
 800272c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800272e:	429a      	cmp	r2, r3
 8002730:	d06e      	beq.n	8002810 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d069      	beq.n	800280c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0ad      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002754:	4b4c      	ldr	r3, [pc, #304]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a4b      	ldr	r2, [pc, #300]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800275a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800275e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002760:	f7fe fcfa 	bl	8001158 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002768:	f7fe fcf6 	bl	8001158 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e09a      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277a:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1f0      	bne.n	8002768 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002786:	4b40      	ldr	r3, [pc, #256]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	4b40      	ldr	r3, [pc, #256]	; (800288c <HAL_RCC_OscConfig+0x784>)
 800278c:	4013      	ands	r3, r2
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002796:	3a01      	subs	r2, #1
 8002798:	0112      	lsls	r2, r2, #4
 800279a:	4311      	orrs	r1, r2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027a0:	0212      	lsls	r2, r2, #8
 80027a2:	4311      	orrs	r1, r2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027a8:	0852      	lsrs	r2, r2, #1
 80027aa:	3a01      	subs	r2, #1
 80027ac:	0552      	lsls	r2, r2, #21
 80027ae:	4311      	orrs	r1, r2
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027b4:	0852      	lsrs	r2, r2, #1
 80027b6:	3a01      	subs	r2, #1
 80027b8:	0652      	lsls	r2, r2, #25
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027c0:	0912      	lsrs	r2, r2, #4
 80027c2:	0452      	lsls	r2, r2, #17
 80027c4:	430a      	orrs	r2, r1
 80027c6:	4930      	ldr	r1, [pc, #192]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2d      	ldr	r2, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a2a      	ldr	r2, [pc, #168]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 80027de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027e4:	f7fe fcb8 	bl	8001158 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ec:	f7fe fcb4 	bl	8001158 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e058      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800280a:	e050      	b.n	80028ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e04f      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d148      	bne.n	80028ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002822:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002826:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 800282e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002832:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002834:	f7fe fc90 	bl	8001158 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7fe fc8c 	bl	8001158 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e030      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x734>
 800285a:	e028      	b.n	80028ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	2b0c      	cmp	r3, #12
 8002860:	d023      	beq.n	80028aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_OscConfig+0x780>)
 8002868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7fe fc73 	bl	8001158 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	e00c      	b.n	8002890 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7fe fc6f 	bl	8001158 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d905      	bls.n	8002890 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e013      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
 8002888:	40021000 	.word	0x40021000
 800288c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_OscConfig+0x7b0>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ec      	bne.n	8002876 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x7b0>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4905      	ldr	r1, [pc, #20]	; (80028b8 <HAL_RCC_OscConfig+0x7b0>)
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_RCC_OscConfig+0x7b4>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e001      	b.n	80028ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	feeefffc 	.word	0xfeeefffc

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0e7      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b75      	ldr	r3, [pc, #468]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b72      	ldr	r3, [pc, #456]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 0207 	bic.w	r2, r3, #7
 80028ea:	4970      	ldr	r1, [pc, #448]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b6e      	ldr	r3, [pc, #440]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0307 	and.w	r3, r3, #7
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e0cf      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291c:	429a      	cmp	r2, r3
 800291e:	d908      	bls.n	8002932 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	4960      	ldr	r1, [pc, #384]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d04c      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b03      	cmp	r3, #3
 8002944:	d107      	bne.n	8002956 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d121      	bne.n	8002996 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e0a6      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b02      	cmp	r3, #2
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800295e:	4b54      	ldr	r3, [pc, #336]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d115      	bne.n	8002996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e09a      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002976:	4b4e      	ldr	r3, [pc, #312]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e08e      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002986:	4b4a      	ldr	r3, [pc, #296]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e086      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002996:	4b46      	ldr	r3, [pc, #280]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f023 0203 	bic.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	4943      	ldr	r1, [pc, #268]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029a8:	f7fe fbd6 	bl	8001158 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7fe fbd2 	bl	8001158 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e06e      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f003 020c 	and.w	r2, r3, #12
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d1eb      	bne.n	80029b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d010      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d208      	bcs.n	8002a06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	492b      	ldr	r1, [pc, #172]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a06:	4b29      	ldr	r3, [pc, #164]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d210      	bcs.n	8002a36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a14:	4b25      	ldr	r3, [pc, #148]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f023 0207 	bic.w	r2, r3, #7
 8002a1c:	4923      	ldr	r1, [pc, #140]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	4313      	orrs	r3, r2
 8002a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a24:	4b21      	ldr	r3, [pc, #132]	; (8002aac <HAL_RCC_ClockConfig+0x1ec>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d001      	beq.n	8002a36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e036      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d008      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	4918      	ldr	r1, [pc, #96]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d009      	beq.n	8002a74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	4910      	ldr	r1, [pc, #64]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a74:	f000 f824 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 030f 	and.w	r3, r3, #15
 8002a84:	490b      	ldr	r1, [pc, #44]	; (8002ab4 <HAL_RCC_ClockConfig+0x1f4>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	f003 031f 	and.w	r3, r3, #31
 8002a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002a90:	4a09      	ldr	r2, [pc, #36]	; (8002ab8 <HAL_RCC_ClockConfig+0x1f8>)
 8002a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a94:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_ClockConfig+0x1fc>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7fe fb0d 	bl	80010b8 <HAL_InitTick>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40022000 	.word	0x40022000
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005c40 	.word	0x08005c40
 8002ab8:	20000048 	.word	0x20000048
 8002abc:	2000004c 	.word	0x2000004c

08002ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b089      	sub	sp, #36	; 0x24
 8002ac4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ace:	4b3e      	ldr	r3, [pc, #248]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ad8:	4b3b      	ldr	r3, [pc, #236]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	f003 0303 	and.w	r3, r3, #3
 8002ae0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d121      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d11e      	bne.n	8002b32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af4:	4b34      	ldr	r3, [pc, #208]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d107      	bne.n	8002b10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b00:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b06:	0a1b      	lsrs	r3, r3, #8
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	61fb      	str	r3, [r7, #28]
 8002b0e:	e005      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b10:	4b2d      	ldr	r3, [pc, #180]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b1c:	4a2b      	ldr	r2, [pc, #172]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10d      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d102      	bne.n	8002b3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	e004      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d134      	bne.n	8002bb8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4e:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d003      	beq.n	8002b66 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d003      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0xac>
 8002b64:	e005      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b68:	617b      	str	r3, [r7, #20]
      break;
 8002b6a:	e005      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b6e:	617b      	str	r3, [r7, #20]
      break;
 8002b70:	e002      	b.n	8002b78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	617b      	str	r3, [r7, #20]
      break;
 8002b76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	091b      	lsrs	r3, r3, #4
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	3301      	adds	r3, #1
 8002b84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b86:	4b10      	ldr	r3, [pc, #64]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	fb03 f202 	mul.w	r2, r3, r2
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	0e5b      	lsrs	r3, r3, #25
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bb8:	69bb      	ldr	r3, [r7, #24]
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3724      	adds	r7, #36	; 0x24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	08005c58 	.word	0x08005c58
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000048 	.word	0x20000048

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b06      	ldr	r3, [pc, #24]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4904      	ldr	r1, [pc, #16]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000
 8002c18:	08005c50 	.word	0x08005c50

08002c1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c20:	f7ff ffda 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b06      	ldr	r3, [pc, #24]	; (8002c40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0adb      	lsrs	r3, r3, #11
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4904      	ldr	r1, [pc, #16]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	08005c50 	.word	0x08005c50

08002c48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c50:	2300      	movs	r3, #0
 8002c52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c54:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c60:	f7ff f9ee 	bl	8002040 <HAL_PWREx_GetVoltageRange>
 8002c64:	6178      	str	r0, [r7, #20]
 8002c66:	e014      	b.n	8002c92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	4a24      	ldr	r2, [pc, #144]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6593      	str	r3, [r2, #88]	; 0x58
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c80:	f7ff f9de 	bl	8002040 <HAL_PWREx_GetVoltageRange>
 8002c84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c86:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	; (8002d00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c98:	d10b      	bne.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d919      	bls.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca4:	d902      	bls.n	8002cac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	e013      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cac:	2301      	movs	r3, #1
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e010      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b80      	cmp	r3, #128	; 0x80
 8002cb6:	d902      	bls.n	8002cbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cb8:	2303      	movs	r3, #3
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	e00a      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d102      	bne.n	8002cca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	e004      	b.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b70      	cmp	r3, #112	; 0x70
 8002cce:	d101      	bne.n	8002cd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f023 0207 	bic.w	r2, r3, #7
 8002cdc:	4909      	ldr	r1, [pc, #36]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce4:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40022000 	.word	0x40022000

08002d08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d10:	2300      	movs	r3, #0
 8002d12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d14:	2300      	movs	r3, #0
 8002d16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d041      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d2c:	d02a      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d32:	d824      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d38:	d008      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d3e:	d81e      	bhi.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d48:	d010      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d4a:	e018      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d4c:	4b86      	ldr	r3, [pc, #536]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	4a85      	ldr	r2, [pc, #532]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d56:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d58:	e015      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fabb 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d6a:	e00c      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3320      	adds	r3, #32
 8002d70:	2100      	movs	r1, #0
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fba6 	bl	80034c4 <RCCEx_PLLSAI2_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d7c:	e003      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	74fb      	strb	r3, [r7, #19]
      break;
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d86:	7cfb      	ldrb	r3, [r7, #19]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10b      	bne.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d8c:	4b76      	ldr	r3, [pc, #472]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d9a:	4973      	ldr	r1, [pc, #460]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002da2:	e001      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d041      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002db8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dbc:	d02a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002dbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002dc2:	d824      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dc8:	d008      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dce:	d81e      	bhi.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dda:	e018      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ddc:	4b62      	ldr	r3, [pc, #392]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4a61      	ldr	r2, [pc, #388]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002de8:	e015      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fa73 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dfa:	e00c      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3320      	adds	r3, #32
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fb5e 	bl	80034c4 <RCCEx_PLLSAI2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002e0c:	e003      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	74fb      	strb	r3, [r7, #19]
      break;
 8002e12:	e000      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e16:	7cfb      	ldrb	r3, [r7, #19]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d10b      	bne.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e1c:	4b52      	ldr	r3, [pc, #328]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e2a:	494f      	ldr	r1, [pc, #316]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e32:	e001      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e34:	7cfb      	ldrb	r3, [r7, #19]
 8002e36:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 80a0 	beq.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e46:	2300      	movs	r3, #0
 8002e48:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e4a:	4b47      	ldr	r3, [pc, #284]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00d      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e60:	4b41      	ldr	r3, [pc, #260]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e64:	4a40      	ldr	r2, [pc, #256]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002e6c:	4b3e      	ldr	r3, [pc, #248]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e7c:	4b3b      	ldr	r3, [pc, #236]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a3a      	ldr	r2, [pc, #232]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e88:	f7fe f966 	bl	8001158 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e8e:	e009      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fe f962 	bl	8001158 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	74fb      	strb	r3, [r7, #19]
        break;
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ea4:	4b31      	ldr	r3, [pc, #196]	; (8002f6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ef      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d15c      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002eb6:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d01f      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d019      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ed4:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ede:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ee0:	4b21      	ldr	r3, [pc, #132]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee6:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ef8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f00:	4a19      	ldr	r2, [pc, #100]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d016      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f12:	f7fe f921 	bl	8001158 <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f18:	e00b      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f1a:	f7fe f91d 	bl	8001158 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d902      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	74fb      	strb	r3, [r7, #19]
            break;
 8002f30:	e006      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f32:	4b0d      	ldr	r3, [pc, #52]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0ec      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f40:	7cfb      	ldrb	r3, [r7, #19]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f46:	4b08      	ldr	r3, [pc, #32]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f56:	4904      	ldr	r1, [pc, #16]	; (8002f68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f5e:	e009      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f60:	7cfb      	ldrb	r3, [r7, #19]
 8002f62:	74bb      	strb	r3, [r7, #18]
 8002f64:	e006      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f66:	bf00      	nop
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f70:	7cfb      	ldrb	r3, [r7, #19]
 8002f72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f74:	7c7b      	ldrb	r3, [r7, #17]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d105      	bne.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f7a:	4b9e      	ldr	r3, [pc, #632]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7e:	4a9d      	ldr	r2, [pc, #628]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0301 	and.w	r3, r3, #1
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f92:	4b98      	ldr	r3, [pc, #608]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f023 0203 	bic.w	r2, r3, #3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	4994      	ldr	r1, [pc, #592]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d00a      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fb4:	4b8f      	ldr	r3, [pc, #572]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 020c 	bic.w	r2, r3, #12
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fc2:	498c      	ldr	r1, [pc, #560]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fd6:	4b87      	ldr	r3, [pc, #540]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	4983      	ldr	r1, [pc, #524]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00a      	beq.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ff8:	4b7e      	ldr	r3, [pc, #504]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ffe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	497b      	ldr	r1, [pc, #492]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003008:	4313      	orrs	r3, r2
 800300a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800301a:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003028:	4972      	ldr	r1, [pc, #456]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0320 	and.w	r3, r3, #32
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800303c:	4b6d      	ldr	r3, [pc, #436]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800304a:	496a      	ldr	r1, [pc, #424]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003064:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800306c:	4961      	ldr	r1, [pc, #388]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003080:	4b5c      	ldr	r3, [pc, #368]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003086:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800308e:	4959      	ldr	r1, [pc, #356]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003090:	4313      	orrs	r3, r2
 8003092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00a      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b0:	4950      	ldr	r1, [pc, #320]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d00a      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030c4:	4b4b      	ldr	r3, [pc, #300]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	4948      	ldr	r1, [pc, #288]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030e6:	4b43      	ldr	r3, [pc, #268]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	493f      	ldr	r1, [pc, #252]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d028      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003108:	4b3a      	ldr	r3, [pc, #232]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003116:	4937      	ldr	r1, [pc, #220]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003126:	d106      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003128:	4b32      	ldr	r3, [pc, #200]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	4a31      	ldr	r2, [pc, #196]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800312e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003132:	60d3      	str	r3, [r2, #12]
 8003134:	e011      	b.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800313a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800313e:	d10c      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	3304      	adds	r3, #4
 8003144:	2101      	movs	r1, #1
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f8c8 	bl	80032dc <RCCEx_PLLSAI1_Config>
 800314c:	4603      	mov	r3, r0
 800314e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003150:	7cfb      	ldrb	r3, [r7, #19]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d028      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003166:	4b23      	ldr	r3, [pc, #140]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	491f      	ldr	r1, [pc, #124]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003184:	d106      	bne.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	4a1a      	ldr	r2, [pc, #104]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800318c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003190:	60d3      	str	r3, [r2, #12]
 8003192:	e011      	b.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800319c:	d10c      	bne.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3304      	adds	r3, #4
 80031a2:	2101      	movs	r1, #1
 80031a4:	4618      	mov	r0, r3
 80031a6:	f000 f899 	bl	80032dc <RCCEx_PLLSAI1_Config>
 80031aa:	4603      	mov	r3, r0
 80031ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d001      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d02b      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031c4:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d2:	4908      	ldr	r1, [pc, #32]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e2:	d109      	bne.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a02      	ldr	r2, [pc, #8]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031ee:	60d3      	str	r3, [r2, #12]
 80031f0:	e014      	b.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003200:	d10c      	bne.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2101      	movs	r1, #1
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f867 	bl	80032dc <RCCEx_PLLSAI1_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003212:	7cfb      	ldrb	r3, [r7, #19]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d02f      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003228:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003236:	4928      	ldr	r1, [pc, #160]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003246:	d10d      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	2102      	movs	r1, #2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f844 	bl	80032dc <RCCEx_PLLSAI1_Config>
 8003254:	4603      	mov	r3, r0
 8003256:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d014      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800325e:	7cfb      	ldrb	r3, [r7, #19]
 8003260:	74bb      	strb	r3, [r7, #18]
 8003262:	e011      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800326c:	d10c      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3320      	adds	r3, #32
 8003272:	2102      	movs	r1, #2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 f925 	bl	80034c4 <RCCEx_PLLSAI2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800327e:	7cfb      	ldrb	r3, [r7, #19]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003284:	7cfb      	ldrb	r3, [r7, #19]
 8003286:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032a2:	490d      	ldr	r1, [pc, #52]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b6:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032bc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4904      	ldr	r1, [pc, #16]	; (80032d8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032ce:	7cbb      	ldrb	r3, [r7, #18]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	40021000 	.word	0x40021000

080032dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032ea:	4b75      	ldr	r3, [pc, #468]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d018      	beq.n	8003328 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80032f6:	4b72      	ldr	r3, [pc, #456]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0203 	and.w	r2, r3, #3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d10d      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
       ||
 800330a:	2b00      	cmp	r3, #0
 800330c:	d009      	beq.n	8003322 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800330e:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	1c5a      	adds	r2, r3, #1
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
       ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d047      	beq.n	80033b2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	73fb      	strb	r3, [r7, #15]
 8003326:	e044      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d018      	beq.n	8003362 <RCCEx_PLLSAI1_Config+0x86>
 8003330:	2b03      	cmp	r3, #3
 8003332:	d825      	bhi.n	8003380 <RCCEx_PLLSAI1_Config+0xa4>
 8003334:	2b01      	cmp	r3, #1
 8003336:	d002      	beq.n	800333e <RCCEx_PLLSAI1_Config+0x62>
 8003338:	2b02      	cmp	r3, #2
 800333a:	d009      	beq.n	8003350 <RCCEx_PLLSAI1_Config+0x74>
 800333c:	e020      	b.n	8003380 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800333e:	4b60      	ldr	r3, [pc, #384]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d11d      	bne.n	8003386 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800334e:	e01a      	b.n	8003386 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003350:	4b5b      	ldr	r3, [pc, #364]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003360:	e013      	b.n	800338a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003362:	4b57      	ldr	r3, [pc, #348]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10f      	bne.n	800338e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800336e:	4b54      	ldr	r3, [pc, #336]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800337e:	e006      	b.n	800338e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e004      	b.n	8003390 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003386:	bf00      	nop
 8003388:	e002      	b.n	8003390 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800338e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10d      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003396:	4b4a      	ldr	r3, [pc, #296]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6819      	ldr	r1, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	430b      	orrs	r3, r1
 80033ac:	4944      	ldr	r1, [pc, #272]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d17d      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033b8:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033be:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c4:	f7fd fec8 	bl	8001158 <HAL_GetTick>
 80033c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033ca:	e009      	b.n	80033e0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033cc:	f7fd fec4 	bl	8001158 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d902      	bls.n	80033e0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	73fb      	strb	r3, [r7, #15]
        break;
 80033de:	e005      	b.n	80033ec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1ef      	bne.n	80033cc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80033ec:	7bfb      	ldrb	r3, [r7, #15]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d160      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d111      	bne.n	800341c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80033f8:	4b31      	ldr	r3, [pc, #196]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6892      	ldr	r2, [r2, #8]
 8003408:	0211      	lsls	r1, r2, #8
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	0912      	lsrs	r2, r2, #4
 8003410:	0452      	lsls	r2, r2, #17
 8003412:	430a      	orrs	r2, r1
 8003414:	492a      	ldr	r1, [pc, #168]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003416:	4313      	orrs	r3, r2
 8003418:	610b      	str	r3, [r1, #16]
 800341a:	e027      	b.n	800346c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d112      	bne.n	8003448 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800342a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6892      	ldr	r2, [r2, #8]
 8003432:	0211      	lsls	r1, r2, #8
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6912      	ldr	r2, [r2, #16]
 8003438:	0852      	lsrs	r2, r2, #1
 800343a:	3a01      	subs	r2, #1
 800343c:	0552      	lsls	r2, r2, #21
 800343e:	430a      	orrs	r2, r1
 8003440:	491f      	ldr	r1, [pc, #124]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003442:	4313      	orrs	r3, r2
 8003444:	610b      	str	r3, [r1, #16]
 8003446:	e011      	b.n	800346c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	0211      	lsls	r1, r2, #8
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6952      	ldr	r2, [r2, #20]
 800345e:	0852      	lsrs	r2, r2, #1
 8003460:	3a01      	subs	r2, #1
 8003462:	0652      	lsls	r2, r2, #25
 8003464:	430a      	orrs	r2, r1
 8003466:	4916      	ldr	r1, [pc, #88]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800346c:	4b14      	ldr	r3, [pc, #80]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a13      	ldr	r2, [pc, #76]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003472:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003476:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fd fe6e 	bl	8001158 <HAL_GetTick>
 800347c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800347e:	e009      	b.n	8003494 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003480:	f7fd fe6a 	bl	8001158 <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d902      	bls.n	8003494 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	73fb      	strb	r3, [r7, #15]
          break;
 8003492:	e005      	b.n	80034a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003494:	4b0a      	ldr	r3, [pc, #40]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ef      	beq.n	8003480 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d106      	bne.n	80034b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034a8:	691a      	ldr	r2, [r3, #16]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	4904      	ldr	r1, [pc, #16]	; (80034c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034d2:	4b6a      	ldr	r3, [pc, #424]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d018      	beq.n	8003510 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80034de:	4b67      	ldr	r3, [pc, #412]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f003 0203 	and.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d10d      	bne.n	800350a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
       ||
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	091b      	lsrs	r3, r3, #4
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
       ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d047      	beq.n	800359a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	73fb      	strb	r3, [r7, #15]
 800350e:	e044      	b.n	800359a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2b03      	cmp	r3, #3
 8003516:	d018      	beq.n	800354a <RCCEx_PLLSAI2_Config+0x86>
 8003518:	2b03      	cmp	r3, #3
 800351a:	d825      	bhi.n	8003568 <RCCEx_PLLSAI2_Config+0xa4>
 800351c:	2b01      	cmp	r3, #1
 800351e:	d002      	beq.n	8003526 <RCCEx_PLLSAI2_Config+0x62>
 8003520:	2b02      	cmp	r3, #2
 8003522:	d009      	beq.n	8003538 <RCCEx_PLLSAI2_Config+0x74>
 8003524:	e020      	b.n	8003568 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003526:	4b55      	ldr	r3, [pc, #340]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d11d      	bne.n	800356e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003536:	e01a      	b.n	800356e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003538:	4b50      	ldr	r3, [pc, #320]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d116      	bne.n	8003572 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003548:	e013      	b.n	8003572 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800354a:	4b4c      	ldr	r3, [pc, #304]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003556:	4b49      	ldr	r3, [pc, #292]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d109      	bne.n	8003576 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003566:	e006      	b.n	8003576 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      break;
 800356c:	e004      	b.n	8003578 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800356e:	bf00      	nop
 8003570:	e002      	b.n	8003578 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003572:	bf00      	nop
 8003574:	e000      	b.n	8003578 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003576:	bf00      	nop
    }

    if(status == HAL_OK)
 8003578:	7bfb      	ldrb	r3, [r7, #15]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10d      	bne.n	800359a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800357e:	4b3f      	ldr	r3, [pc, #252]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6819      	ldr	r1, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	430b      	orrs	r3, r1
 8003594:	4939      	ldr	r1, [pc, #228]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003596:	4313      	orrs	r3, r2
 8003598:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d167      	bne.n	8003670 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a35      	ldr	r2, [pc, #212]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035ac:	f7fd fdd4 	bl	8001158 <HAL_GetTick>
 80035b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035b2:	e009      	b.n	80035c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035b4:	f7fd fdd0 	bl	8001158 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d902      	bls.n	80035c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	73fb      	strb	r3, [r7, #15]
        break;
 80035c6:	e005      	b.n	80035d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035c8:	4b2c      	ldr	r3, [pc, #176]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ef      	bne.n	80035b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035d4:	7bfb      	ldrb	r3, [r7, #15]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d14a      	bne.n	8003670 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d111      	bne.n	8003604 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80035e0:	4b26      	ldr	r3, [pc, #152]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80035e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	0211      	lsls	r1, r2, #8
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	68d2      	ldr	r2, [r2, #12]
 80035f6:	0912      	lsrs	r2, r2, #4
 80035f8:	0452      	lsls	r2, r2, #17
 80035fa:	430a      	orrs	r2, r1
 80035fc:	491f      	ldr	r1, [pc, #124]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	614b      	str	r3, [r1, #20]
 8003602:	e011      	b.n	8003628 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003604:	4b1d      	ldr	r3, [pc, #116]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800360c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6892      	ldr	r2, [r2, #8]
 8003614:	0211      	lsls	r1, r2, #8
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	6912      	ldr	r2, [r2, #16]
 800361a:	0852      	lsrs	r2, r2, #1
 800361c:	3a01      	subs	r2, #1
 800361e:	0652      	lsls	r2, r2, #25
 8003620:	430a      	orrs	r2, r1
 8003622:	4916      	ldr	r1, [pc, #88]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003624:	4313      	orrs	r3, r2
 8003626:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a13      	ldr	r2, [pc, #76]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd fd90 	bl	8001158 <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800363a:	e009      	b.n	8003650 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800363c:	f7fd fd8c 	bl	8001158 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d902      	bls.n	8003650 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	73fb      	strb	r3, [r7, #15]
          break;
 800364e:	e005      	b.n	800365c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0ef      	beq.n	800363c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d106      	bne.n	8003670 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003664:	695a      	ldr	r2, [r3, #20]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4904      	ldr	r1, [pc, #16]	; (800367c <RCCEx_PLLSAI2_Config+0x1b8>)
 800366c:	4313      	orrs	r3, r2
 800366e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003670:	7bfb      	ldrb	r3, [r7, #15]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40021000 	.word	0x40021000

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e049      	b.n	8003726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fd fb4a 	bl	8000d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 f9ee 	bl	8003aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
	...

08003730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b01      	cmp	r3, #1
 8003742:	d001      	beq.n	8003748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e04f      	b.n	80037e8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01d      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003772:	d018      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a1f      	ldr	r2, [pc, #124]	; (80037f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d013      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a1e      	ldr	r2, [pc, #120]	; (80037fc <HAL_TIM_Base_Start_IT+0xcc>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d00e      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1c      	ldr	r2, [pc, #112]	; (8003800 <HAL_TIM_Base_Start_IT+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d009      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1b      	ldr	r2, [pc, #108]	; (8003804 <HAL_TIM_Base_Start_IT+0xd4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d004      	beq.n	80037a6 <HAL_TIM_Base_Start_IT+0x76>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_TIM_Base_Start_IT+0xd8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d115      	bne.n	80037d2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_TIM_Base_Start_IT+0xdc>)
 80037ae:	4013      	ands	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b06      	cmp	r3, #6
 80037b6:	d015      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0xb4>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037be:	d011      	beq.n	80037e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	e008      	b.n	80037e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f042 0201 	orr.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	e000      	b.n	80037e6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	40012c00 	.word	0x40012c00
 80037f8:	40000400 	.word	0x40000400
 80037fc:	40000800 	.word	0x40000800
 8003800:	40000c00 	.word	0x40000c00
 8003804:	40013400 	.word	0x40013400
 8003808:	40014000 	.word	0x40014000
 800380c:	00010007 	.word	0x00010007

08003810 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d122      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d11b      	bne.n	800386c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0202 	mvn.w	r2, #2
 800383c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	f003 0303 	and.w	r3, r3, #3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d003      	beq.n	800385a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 f905 	bl	8003a62 <HAL_TIM_IC_CaptureCallback>
 8003858:	e005      	b.n	8003866 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 f8f7 	bl	8003a4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 f908 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d122      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f06f 0204 	mvn.w	r2, #4
 8003890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f8db 	bl	8003a62 <HAL_TIM_IC_CaptureCallback>
 80038ac:	e005      	b.n	80038ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8cd 	bl	8003a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 f8de 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	2b08      	cmp	r3, #8
 80038cc:	d122      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f003 0308 	and.w	r3, r3, #8
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d11b      	bne.n	8003914 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0208 	mvn.w	r2, #8
 80038e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d003      	beq.n	8003902 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8b1 	bl	8003a62 <HAL_TIM_IC_CaptureCallback>
 8003900:	e005      	b.n	800390e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f8a3 	bl	8003a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 f8b4 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b10      	cmp	r3, #16
 8003920:	d122      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b10      	cmp	r3, #16
 800392e:	d11b      	bne.n	8003968 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0210 	mvn.w	r2, #16
 8003938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2208      	movs	r2, #8
 800393e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f887 	bl	8003a62 <HAL_TIM_IC_CaptureCallback>
 8003954:	e005      	b.n	8003962 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f879 	bl	8003a4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f000 f88a 	bl	8003a76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d10e      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	f003 0301 	and.w	r3, r3, #1
 8003980:	2b01      	cmp	r3, #1
 8003982:	d107      	bne.n	8003994 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f06f 0201 	mvn.w	r2, #1
 800398c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7fc fe84 	bl	800069c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399e:	2b80      	cmp	r3, #128	; 0x80
 80039a0:	d10e      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	2b80      	cmp	r3, #128	; 0x80
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f99c 	bl	8003cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d10e      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039da:	2b80      	cmp	r3, #128	; 0x80
 80039dc:	d107      	bne.n	80039ee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f000 f98f 	bl	8003d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d10e      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d107      	bne.n	8003a1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f838 	bl	8003a8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f003 0320 	and.w	r3, r3, #32
 8003a24:	2b20      	cmp	r3, #32
 8003a26:	d10e      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0320 	and.w	r3, r3, #32
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d107      	bne.n	8003a46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f06f 0220 	mvn.w	r2, #32
 8003a3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f94f 	bl	8003ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a6a:	bf00      	nop
 8003a6c:	370c      	adds	r7, #12
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr

08003a76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b083      	sub	sp, #12
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a40      	ldr	r2, [pc, #256]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d013      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003abe:	d00f      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a3d      	ldr	r2, [pc, #244]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d00b      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a3c      	ldr	r2, [pc, #240]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d007      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a3b      	ldr	r2, [pc, #236]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d003      	beq.n	8003ae0 <TIM_Base_SetConfig+0x40>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a3a      	ldr	r2, [pc, #232]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d108      	bne.n	8003af2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2f      	ldr	r2, [pc, #188]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d01f      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b00:	d01b      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a2c      	ldr	r2, [pc, #176]	; (8003bb8 <TIM_Base_SetConfig+0x118>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d017      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a2b      	ldr	r2, [pc, #172]	; (8003bbc <TIM_Base_SetConfig+0x11c>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d013      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a2a      	ldr	r2, [pc, #168]	; (8003bc0 <TIM_Base_SetConfig+0x120>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00f      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a29      	ldr	r2, [pc, #164]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a28      	ldr	r2, [pc, #160]	; (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d007      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a27      	ldr	r2, [pc, #156]	; (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_Base_SetConfig+0x9a>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a26      	ldr	r2, [pc, #152]	; (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d108      	bne.n	8003b4c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <TIM_Base_SetConfig+0x114>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00f      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <TIM_Base_SetConfig+0x124>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00b      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a11      	ldr	r2, [pc, #68]	; (8003bc8 <TIM_Base_SetConfig+0x128>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d007      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a10      	ldr	r2, [pc, #64]	; (8003bcc <TIM_Base_SetConfig+0x12c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d003      	beq.n	8003b98 <TIM_Base_SetConfig+0xf8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a0f      	ldr	r2, [pc, #60]	; (8003bd0 <TIM_Base_SetConfig+0x130>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d103      	bne.n	8003ba0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	691a      	ldr	r2, [r3, #16]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	615a      	str	r2, [r3, #20]
}
 8003ba6:	bf00      	nop
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40012c00 	.word	0x40012c00
 8003bb8:	40000400 	.word	0x40000400
 8003bbc:	40000800 	.word	0x40000800
 8003bc0:	40000c00 	.word	0x40000c00
 8003bc4:	40013400 	.word	0x40013400
 8003bc8:	40014000 	.word	0x40014000
 8003bcc:	40014400 	.word	0x40014400
 8003bd0:	40014800 	.word	0x40014800

08003bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d101      	bne.n	8003bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003be8:	2302      	movs	r3, #2
 8003bea:	e068      	b.n	8003cbe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a2e      	ldr	r2, [pc, #184]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a2d      	ldr	r2, [pc, #180]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d108      	bne.n	8003c32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a1e      	ldr	r2, [pc, #120]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d01d      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5e:	d018      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a1b      	ldr	r2, [pc, #108]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d013      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a1a      	ldr	r2, [pc, #104]	; (8003cd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00e      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a18      	ldr	r2, [pc, #96]	; (8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d009      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d004      	beq.n	8003c92 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	; (8003ce0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10c      	bne.n	8003cac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr
 8003cca:	bf00      	nop
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40013400 	.word	0x40013400
 8003cd4:	40000400 	.word	0x40000400
 8003cd8:	40000800 	.word	0x40000800
 8003cdc:	40000c00 	.word	0x40000c00
 8003ce0:	40014000 	.word	0x40014000

08003ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e040      	b.n	8003db4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd f822 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0201 	bic.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f992 	bl	8004088 <UART_SetConfig>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e022      	b.n	8003db4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 fc3e 	bl	80045f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f042 0201 	orr.w	r2, r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fcc5 	bl	800473c <UART_CheckIdleState>
 8003db2:	4603      	mov	r3, r0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af02      	add	r7, sp, #8
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	603b      	str	r3, [r7, #0]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	f040 8082 	bne.w	8003eda <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <HAL_UART_Transmit+0x26>
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e07a      	b.n	8003edc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_UART_Transmit+0x38>
 8003df0:	2302      	movs	r3, #2
 8003df2:	e073      	b.n	8003edc <HAL_UART_Transmit+0x120>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2221      	movs	r2, #33	; 0x21
 8003e08:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e0a:	f7fd f9a5 	bl	8001158 <HAL_GetTick>
 8003e0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	88fa      	ldrh	r2, [r7, #6]
 8003e14:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	88fa      	ldrh	r2, [r7, #6]
 8003e1c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e28:	d108      	bne.n	8003e3c <HAL_UART_Transmit+0x80>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d104      	bne.n	8003e3c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	e003      	b.n	8003e44 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e40:	2300      	movs	r3, #0
 8003e42:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003e4c:	e02d      	b.n	8003eaa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2200      	movs	r2, #0
 8003e56:	2180      	movs	r1, #128	; 0x80
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fcb8 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	e039      	b.n	8003edc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	881a      	ldrh	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e7a:	b292      	uxth	r2, r2
 8003e7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	3302      	adds	r3, #2
 8003e82:	61bb      	str	r3, [r7, #24]
 8003e84:	e008      	b.n	8003e98 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b292      	uxth	r2, r2
 8003e90:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	3301      	adds	r3, #1
 8003e96:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1cb      	bne.n	8003e4e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2140      	movs	r1, #64	; 0x40
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fc84 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003ecc:	2303      	movs	r3, #3
 8003ece:	e005      	b.n	8003edc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003eda:	2302      	movs	r3, #2
  }
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3720      	adds	r7, #32
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	; 0x28
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	f040 80bf 	bne.w	800407c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d002      	beq.n	8003f0a <HAL_UART_Receive+0x26>
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e0b7      	b.n	800407e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d101      	bne.n	8003f1c <HAL_UART_Receive+0x38>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	e0b0      	b.n	800407e <HAL_UART_Receive+0x19a>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2222      	movs	r2, #34	; 0x22
 8003f30:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f38:	f7fd f90e 	bl	8001158 <HAL_GetTick>
 8003f3c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	88fa      	ldrh	r2, [r7, #6]
 8003f42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	88fa      	ldrh	r2, [r7, #6]
 8003f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f56:	d10e      	bne.n	8003f76 <HAL_UART_Receive+0x92>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <HAL_UART_Receive+0x88>
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f6a:	e02d      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	22ff      	movs	r2, #255	; 0xff
 8003f70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f74:	e028      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10d      	bne.n	8003f9a <HAL_UART_Receive+0xb6>
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d104      	bne.n	8003f90 <HAL_UART_Receive+0xac>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	22ff      	movs	r2, #255	; 0xff
 8003f8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f8e:	e01b      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	227f      	movs	r2, #127	; 0x7f
 8003f94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f98:	e016      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fa2:	d10d      	bne.n	8003fc0 <HAL_UART_Receive+0xdc>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d104      	bne.n	8003fb6 <HAL_UART_Receive+0xd2>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	227f      	movs	r2, #127	; 0x7f
 8003fb0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fb4:	e008      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	223f      	movs	r2, #63	; 0x3f
 8003fba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003fbe:	e003      	b.n	8003fc8 <HAL_UART_Receive+0xe4>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fce:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Receive+0x108>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003ffc:	e033      	b.n	8004066 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	9300      	str	r3, [sp, #0]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2200      	movs	r2, #0
 8004006:	2120      	movs	r1, #32
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 fbe0 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e032      	b.n	800407e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10c      	bne.n	8004038 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004024:	b29a      	uxth	r2, r3
 8004026:	8a7b      	ldrh	r3, [r7, #18]
 8004028:	4013      	ands	r3, r2
 800402a:	b29a      	uxth	r2, r3
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	3302      	adds	r3, #2
 8004034:	61bb      	str	r3, [r7, #24]
 8004036:	e00d      	b.n	8004054 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800403e:	b29b      	uxth	r3, r3
 8004040:	b2da      	uxtb	r2, r3
 8004042:	8a7b      	ldrh	r3, [r7, #18]
 8004044:	b2db      	uxtb	r3, r3
 8004046:	4013      	ands	r3, r2
 8004048:	b2da      	uxtb	r2, r3
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	3301      	adds	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800405a:	b29b      	uxth	r3, r3
 800405c:	3b01      	subs	r3, #1
 800405e:	b29a      	uxth	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1c5      	bne.n	8003ffe <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	e000      	b.n	800407e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800407c:	2302      	movs	r3, #2
  }
}
 800407e:	4618      	mov	r0, r3
 8004080:	3720      	adds	r7, #32
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800408c:	b08a      	sub	sp, #40	; 0x28
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	431a      	orrs	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	4ba4      	ldr	r3, [pc, #656]	; (8004348 <UART_SetConfig+0x2c0>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a99      	ldr	r2, [pc, #612]	; (800434c <UART_SetConfig+0x2c4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d004      	beq.n	80040f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	4313      	orrs	r3, r2
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004104:	430a      	orrs	r2, r1
 8004106:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a90      	ldr	r2, [pc, #576]	; (8004350 <UART_SetConfig+0x2c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d126      	bne.n	8004160 <UART_SetConfig+0xd8>
 8004112:	4b90      	ldr	r3, [pc, #576]	; (8004354 <UART_SetConfig+0x2cc>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f003 0303 	and.w	r3, r3, #3
 800411c:	2b03      	cmp	r3, #3
 800411e:	d81b      	bhi.n	8004158 <UART_SetConfig+0xd0>
 8004120:	a201      	add	r2, pc, #4	; (adr r2, 8004128 <UART_SetConfig+0xa0>)
 8004122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004126:	bf00      	nop
 8004128:	08004139 	.word	0x08004139
 800412c:	08004149 	.word	0x08004149
 8004130:	08004141 	.word	0x08004141
 8004134:	08004151 	.word	0x08004151
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413e:	e116      	b.n	800436e <UART_SetConfig+0x2e6>
 8004140:	2302      	movs	r3, #2
 8004142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004146:	e112      	b.n	800436e <UART_SetConfig+0x2e6>
 8004148:	2304      	movs	r3, #4
 800414a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800414e:	e10e      	b.n	800436e <UART_SetConfig+0x2e6>
 8004150:	2308      	movs	r3, #8
 8004152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004156:	e10a      	b.n	800436e <UART_SetConfig+0x2e6>
 8004158:	2310      	movs	r3, #16
 800415a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800415e:	e106      	b.n	800436e <UART_SetConfig+0x2e6>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a7c      	ldr	r2, [pc, #496]	; (8004358 <UART_SetConfig+0x2d0>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d138      	bne.n	80041dc <UART_SetConfig+0x154>
 800416a:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <UART_SetConfig+0x2cc>)
 800416c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b0c      	cmp	r3, #12
 8004176:	d82d      	bhi.n	80041d4 <UART_SetConfig+0x14c>
 8004178:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <UART_SetConfig+0xf8>)
 800417a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417e:	bf00      	nop
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041c5 	.word	0x080041c5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041bd 	.word	0x080041bd
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041d5 	.word	0x080041d5
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ba:	e0d8      	b.n	800436e <UART_SetConfig+0x2e6>
 80041bc:	2302      	movs	r3, #2
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e0d4      	b.n	800436e <UART_SetConfig+0x2e6>
 80041c4:	2304      	movs	r3, #4
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e0d0      	b.n	800436e <UART_SetConfig+0x2e6>
 80041cc:	2308      	movs	r3, #8
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e0cc      	b.n	800436e <UART_SetConfig+0x2e6>
 80041d4:	2310      	movs	r3, #16
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e0c8      	b.n	800436e <UART_SetConfig+0x2e6>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a5e      	ldr	r2, [pc, #376]	; (800435c <UART_SetConfig+0x2d4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d125      	bne.n	8004232 <UART_SetConfig+0x1aa>
 80041e6:	4b5b      	ldr	r3, [pc, #364]	; (8004354 <UART_SetConfig+0x2cc>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d016      	beq.n	8004222 <UART_SetConfig+0x19a>
 80041f4:	2b30      	cmp	r3, #48	; 0x30
 80041f6:	d818      	bhi.n	800422a <UART_SetConfig+0x1a2>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d00a      	beq.n	8004212 <UART_SetConfig+0x18a>
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d814      	bhi.n	800422a <UART_SetConfig+0x1a2>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <UART_SetConfig+0x182>
 8004204:	2b10      	cmp	r3, #16
 8004206:	d008      	beq.n	800421a <UART_SetConfig+0x192>
 8004208:	e00f      	b.n	800422a <UART_SetConfig+0x1a2>
 800420a:	2300      	movs	r3, #0
 800420c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004210:	e0ad      	b.n	800436e <UART_SetConfig+0x2e6>
 8004212:	2302      	movs	r3, #2
 8004214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004218:	e0a9      	b.n	800436e <UART_SetConfig+0x2e6>
 800421a:	2304      	movs	r3, #4
 800421c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004220:	e0a5      	b.n	800436e <UART_SetConfig+0x2e6>
 8004222:	2308      	movs	r3, #8
 8004224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004228:	e0a1      	b.n	800436e <UART_SetConfig+0x2e6>
 800422a:	2310      	movs	r3, #16
 800422c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004230:	e09d      	b.n	800436e <UART_SetConfig+0x2e6>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4a      	ldr	r2, [pc, #296]	; (8004360 <UART_SetConfig+0x2d8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d125      	bne.n	8004288 <UART_SetConfig+0x200>
 800423c:	4b45      	ldr	r3, [pc, #276]	; (8004354 <UART_SetConfig+0x2cc>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004246:	2bc0      	cmp	r3, #192	; 0xc0
 8004248:	d016      	beq.n	8004278 <UART_SetConfig+0x1f0>
 800424a:	2bc0      	cmp	r3, #192	; 0xc0
 800424c:	d818      	bhi.n	8004280 <UART_SetConfig+0x1f8>
 800424e:	2b80      	cmp	r3, #128	; 0x80
 8004250:	d00a      	beq.n	8004268 <UART_SetConfig+0x1e0>
 8004252:	2b80      	cmp	r3, #128	; 0x80
 8004254:	d814      	bhi.n	8004280 <UART_SetConfig+0x1f8>
 8004256:	2b00      	cmp	r3, #0
 8004258:	d002      	beq.n	8004260 <UART_SetConfig+0x1d8>
 800425a:	2b40      	cmp	r3, #64	; 0x40
 800425c:	d008      	beq.n	8004270 <UART_SetConfig+0x1e8>
 800425e:	e00f      	b.n	8004280 <UART_SetConfig+0x1f8>
 8004260:	2300      	movs	r3, #0
 8004262:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004266:	e082      	b.n	800436e <UART_SetConfig+0x2e6>
 8004268:	2302      	movs	r3, #2
 800426a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800426e:	e07e      	b.n	800436e <UART_SetConfig+0x2e6>
 8004270:	2304      	movs	r3, #4
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004276:	e07a      	b.n	800436e <UART_SetConfig+0x2e6>
 8004278:	2308      	movs	r3, #8
 800427a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800427e:	e076      	b.n	800436e <UART_SetConfig+0x2e6>
 8004280:	2310      	movs	r3, #16
 8004282:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004286:	e072      	b.n	800436e <UART_SetConfig+0x2e6>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a35      	ldr	r2, [pc, #212]	; (8004364 <UART_SetConfig+0x2dc>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d12a      	bne.n	80042e8 <UART_SetConfig+0x260>
 8004292:	4b30      	ldr	r3, [pc, #192]	; (8004354 <UART_SetConfig+0x2cc>)
 8004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a0:	d01a      	beq.n	80042d8 <UART_SetConfig+0x250>
 80042a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042a6:	d81b      	bhi.n	80042e0 <UART_SetConfig+0x258>
 80042a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042ac:	d00c      	beq.n	80042c8 <UART_SetConfig+0x240>
 80042ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042b2:	d815      	bhi.n	80042e0 <UART_SetConfig+0x258>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d003      	beq.n	80042c0 <UART_SetConfig+0x238>
 80042b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042bc:	d008      	beq.n	80042d0 <UART_SetConfig+0x248>
 80042be:	e00f      	b.n	80042e0 <UART_SetConfig+0x258>
 80042c0:	2300      	movs	r3, #0
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042c6:	e052      	b.n	800436e <UART_SetConfig+0x2e6>
 80042c8:	2302      	movs	r3, #2
 80042ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ce:	e04e      	b.n	800436e <UART_SetConfig+0x2e6>
 80042d0:	2304      	movs	r3, #4
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042d6:	e04a      	b.n	800436e <UART_SetConfig+0x2e6>
 80042d8:	2308      	movs	r3, #8
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042de:	e046      	b.n	800436e <UART_SetConfig+0x2e6>
 80042e0:	2310      	movs	r3, #16
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042e6:	e042      	b.n	800436e <UART_SetConfig+0x2e6>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a17      	ldr	r2, [pc, #92]	; (800434c <UART_SetConfig+0x2c4>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d13a      	bne.n	8004368 <UART_SetConfig+0x2e0>
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <UART_SetConfig+0x2cc>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004300:	d01a      	beq.n	8004338 <UART_SetConfig+0x2b0>
 8004302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004306:	d81b      	bhi.n	8004340 <UART_SetConfig+0x2b8>
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800430c:	d00c      	beq.n	8004328 <UART_SetConfig+0x2a0>
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d815      	bhi.n	8004340 <UART_SetConfig+0x2b8>
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <UART_SetConfig+0x298>
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d008      	beq.n	8004330 <UART_SetConfig+0x2a8>
 800431e:	e00f      	b.n	8004340 <UART_SetConfig+0x2b8>
 8004320:	2300      	movs	r3, #0
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e022      	b.n	800436e <UART_SetConfig+0x2e6>
 8004328:	2302      	movs	r3, #2
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e01e      	b.n	800436e <UART_SetConfig+0x2e6>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e01a      	b.n	800436e <UART_SetConfig+0x2e6>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e016      	b.n	800436e <UART_SetConfig+0x2e6>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	e012      	b.n	800436e <UART_SetConfig+0x2e6>
 8004348:	efff69f3 	.word	0xefff69f3
 800434c:	40008000 	.word	0x40008000
 8004350:	40013800 	.word	0x40013800
 8004354:	40021000 	.word	0x40021000
 8004358:	40004400 	.word	0x40004400
 800435c:	40004800 	.word	0x40004800
 8004360:	40004c00 	.word	0x40004c00
 8004364:	40005000 	.word	0x40005000
 8004368:	2310      	movs	r3, #16
 800436a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a9f      	ldr	r2, [pc, #636]	; (80045f0 <UART_SetConfig+0x568>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d17a      	bne.n	800446e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004378:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800437c:	2b08      	cmp	r3, #8
 800437e:	d824      	bhi.n	80043ca <UART_SetConfig+0x342>
 8004380:	a201      	add	r2, pc, #4	; (adr r2, 8004388 <UART_SetConfig+0x300>)
 8004382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004386:	bf00      	nop
 8004388:	080043ad 	.word	0x080043ad
 800438c:	080043cb 	.word	0x080043cb
 8004390:	080043b5 	.word	0x080043b5
 8004394:	080043cb 	.word	0x080043cb
 8004398:	080043bb 	.word	0x080043bb
 800439c:	080043cb 	.word	0x080043cb
 80043a0:	080043cb 	.word	0x080043cb
 80043a4:	080043cb 	.word	0x080043cb
 80043a8:	080043c3 	.word	0x080043c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ac:	f7fe fc20 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 80043b0:	61f8      	str	r0, [r7, #28]
        break;
 80043b2:	e010      	b.n	80043d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043b4:	4b8f      	ldr	r3, [pc, #572]	; (80045f4 <UART_SetConfig+0x56c>)
 80043b6:	61fb      	str	r3, [r7, #28]
        break;
 80043b8:	e00d      	b.n	80043d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ba:	f7fe fb81 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 80043be:	61f8      	str	r0, [r7, #28]
        break;
 80043c0:	e009      	b.n	80043d6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043c6:	61fb      	str	r3, [r7, #28]
        break;
 80043c8:	e005      	b.n	80043d6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 80fb 	beq.w	80045d4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	4413      	add	r3, r2
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d305      	bcc.n	80043fa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d903      	bls.n	8004402 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004400:	e0e8      	b.n	80045d4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2200      	movs	r2, #0
 8004406:	461c      	mov	r4, r3
 8004408:	4615      	mov	r5, r2
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	022b      	lsls	r3, r5, #8
 8004414:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004418:	0222      	lsls	r2, r4, #8
 800441a:	68f9      	ldr	r1, [r7, #12]
 800441c:	6849      	ldr	r1, [r1, #4]
 800441e:	0849      	lsrs	r1, r1, #1
 8004420:	2000      	movs	r0, #0
 8004422:	4688      	mov	r8, r1
 8004424:	4681      	mov	r9, r0
 8004426:	eb12 0a08 	adds.w	sl, r2, r8
 800442a:	eb43 0b09 	adc.w	fp, r3, r9
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	603b      	str	r3, [r7, #0]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800443c:	4650      	mov	r0, sl
 800443e:	4659      	mov	r1, fp
 8004440:	f7fb ff16 	bl	8000270 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4613      	mov	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004452:	d308      	bcc.n	8004466 <UART_SetConfig+0x3de>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800445a:	d204      	bcs.n	8004466 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	60da      	str	r2, [r3, #12]
 8004464:	e0b6      	b.n	80045d4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800446c:	e0b2      	b.n	80045d4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004476:	d15e      	bne.n	8004536 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004478:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800447c:	2b08      	cmp	r3, #8
 800447e:	d828      	bhi.n	80044d2 <UART_SetConfig+0x44a>
 8004480:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <UART_SetConfig+0x400>)
 8004482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004486:	bf00      	nop
 8004488:	080044ad 	.word	0x080044ad
 800448c:	080044b5 	.word	0x080044b5
 8004490:	080044bd 	.word	0x080044bd
 8004494:	080044d3 	.word	0x080044d3
 8004498:	080044c3 	.word	0x080044c3
 800449c:	080044d3 	.word	0x080044d3
 80044a0:	080044d3 	.word	0x080044d3
 80044a4:	080044d3 	.word	0x080044d3
 80044a8:	080044cb 	.word	0x080044cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044ac:	f7fe fba0 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 80044b0:	61f8      	str	r0, [r7, #28]
        break;
 80044b2:	e014      	b.n	80044de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044b4:	f7fe fbb2 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 80044b8:	61f8      	str	r0, [r7, #28]
        break;
 80044ba:	e010      	b.n	80044de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044bc:	4b4d      	ldr	r3, [pc, #308]	; (80045f4 <UART_SetConfig+0x56c>)
 80044be:	61fb      	str	r3, [r7, #28]
        break;
 80044c0:	e00d      	b.n	80044de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044c2:	f7fe fafd 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 80044c6:	61f8      	str	r0, [r7, #28]
        break;
 80044c8:	e009      	b.n	80044de <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e005      	b.n	80044de <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d077      	beq.n	80045d4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	005a      	lsls	r2, r3, #1
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	085b      	lsrs	r3, r3, #1
 80044ee:	441a      	add	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044fa:	69bb      	ldr	r3, [r7, #24]
 80044fc:	2b0f      	cmp	r3, #15
 80044fe:	d916      	bls.n	800452e <UART_SetConfig+0x4a6>
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d212      	bcs.n	800452e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	b29b      	uxth	r3, r3
 800450c:	f023 030f 	bic.w	r3, r3, #15
 8004510:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004512:	69bb      	ldr	r3, [r7, #24]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	b29b      	uxth	r3, r3
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	b29a      	uxth	r2, r3
 800451e:	8afb      	ldrh	r3, [r7, #22]
 8004520:	4313      	orrs	r3, r2
 8004522:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	8afa      	ldrh	r2, [r7, #22]
 800452a:	60da      	str	r2, [r3, #12]
 800452c:	e052      	b.n	80045d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004534:	e04e      	b.n	80045d4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004536:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800453a:	2b08      	cmp	r3, #8
 800453c:	d827      	bhi.n	800458e <UART_SetConfig+0x506>
 800453e:	a201      	add	r2, pc, #4	; (adr r2, 8004544 <UART_SetConfig+0x4bc>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	08004569 	.word	0x08004569
 8004548:	08004571 	.word	0x08004571
 800454c:	08004579 	.word	0x08004579
 8004550:	0800458f 	.word	0x0800458f
 8004554:	0800457f 	.word	0x0800457f
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800458f 	.word	0x0800458f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004568:	f7fe fb42 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 800456c:	61f8      	str	r0, [r7, #28]
        break;
 800456e:	e014      	b.n	800459a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004570:	f7fe fb54 	bl	8002c1c <HAL_RCC_GetPCLK2Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e010      	b.n	800459a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <UART_SetConfig+0x56c>)
 800457a:	61fb      	str	r3, [r7, #28]
        break;
 800457c:	e00d      	b.n	800459a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7fe fa9f 	bl	8002ac0 <HAL_RCC_GetSysClockFreq>
 8004582:	61f8      	str	r0, [r7, #28]
        break;
 8004584:	e009      	b.n	800459a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e005      	b.n	800459a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004598:	bf00      	nop
    }

    if (pclk != 0U)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d019      	beq.n	80045d4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	085a      	lsrs	r2, r3, #1
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	441a      	add	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	2b0f      	cmp	r3, #15
 80045b8:	d909      	bls.n	80045ce <UART_SetConfig+0x546>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045c0:	d205      	bcs.n	80045ce <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60da      	str	r2, [r3, #12]
 80045cc:	e002      	b.n	80045d4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80045e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3728      	adds	r7, #40	; 0x28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045ee:	bf00      	nop
 80045f0:	40008000 	.word	0x40008000
 80045f4:	00f42400 	.word	0x00f42400

080045f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00a      	beq.n	8004644 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	430a      	orrs	r2, r1
 8004642:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b00      	cmp	r3, #0
 800464e:	d00a      	beq.n	8004666 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	f003 0308 	and.w	r3, r3, #8
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00a      	beq.n	8004688 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	f003 0310 	and.w	r3, r3, #16
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00a      	beq.n	80046aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01a      	beq.n	800470e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046f6:	d10a      	bne.n	800470e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	430a      	orrs	r2, r1
 800470c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	605a      	str	r2, [r3, #4]
  }
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800474c:	f7fc fd04 	bl	8001158 <HAL_GetTick>
 8004750:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b08      	cmp	r3, #8
 800475e:	d10e      	bne.n	800477e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004760:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f82d 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e023      	b.n	80047c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b04      	cmp	r3, #4
 800478a:	d10e      	bne.n	80047aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800478c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f817 	bl	80047ce <UART_WaitOnFlagUntilTimeout>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e00d      	b.n	80047c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2220      	movs	r2, #32
 80047ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b09c      	sub	sp, #112	; 0x70
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	603b      	str	r3, [r7, #0]
 80047da:	4613      	mov	r3, r2
 80047dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047de:	e0a5      	b.n	800492c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e6:	f000 80a1 	beq.w	800492c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ea:	f7fc fcb5 	bl	8001158 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <UART_WaitOnFlagUntilTimeout+0x32>
 80047fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d13e      	bne.n	800487e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004808:	e853 3f00 	ldrex	r3, [r3]
 800480c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800480e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004810:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004814:	667b      	str	r3, [r7, #100]	; 0x64
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	461a      	mov	r2, r3
 800481c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800481e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004820:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004822:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004824:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004826:	e841 2300 	strex	r3, r2, [r1]
 800482a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800482c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e6      	bne.n	8004800 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	3308      	adds	r3, #8
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	663b      	str	r3, [r7, #96]	; 0x60
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004852:	64ba      	str	r2, [r7, #72]	; 0x48
 8004854:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004858:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2220      	movs	r2, #32
 8004870:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e067      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d04f      	beq.n	800492c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004896:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800489a:	d147      	bne.n	800492c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80048ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048c4:	637b      	str	r3, [r7, #52]	; 0x34
 80048c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80048ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80048d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e6      	bne.n	80048a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3308      	adds	r3, #8
 80048de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	e853 3f00 	ldrex	r3, [r3]
 80048e6:	613b      	str	r3, [r7, #16]
   return(result);
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f023 0301 	bic.w	r3, r3, #1
 80048ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80048f8:	623a      	str	r2, [r7, #32]
 80048fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	69f9      	ldr	r1, [r7, #28]
 80048fe:	6a3a      	ldr	r2, [r7, #32]
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	61bb      	str	r3, [r7, #24]
   return(result);
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e5      	bne.n	80048d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2220      	movs	r2, #32
 8004910:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2220      	movs	r2, #32
 8004916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e010      	b.n	800494e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	429a      	cmp	r2, r3
 800493a:	bf0c      	ite	eq
 800493c:	2301      	moveq	r3, #1
 800493e:	2300      	movne	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	429a      	cmp	r2, r3
 8004948:	f43f af4a 	beq.w	80047e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3770      	adds	r7, #112	; 0x70
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <atoi>:
 8004956:	220a      	movs	r2, #10
 8004958:	2100      	movs	r1, #0
 800495a:	f000 b929 	b.w	8004bb0 <strtol>
	...

08004960 <__errno>:
 8004960:	4b01      	ldr	r3, [pc, #4]	; (8004968 <__errno+0x8>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	20000054 	.word	0x20000054

0800496c <__libc_init_array>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	4d0d      	ldr	r5, [pc, #52]	; (80049a4 <__libc_init_array+0x38>)
 8004970:	4c0d      	ldr	r4, [pc, #52]	; (80049a8 <__libc_init_array+0x3c>)
 8004972:	1b64      	subs	r4, r4, r5
 8004974:	10a4      	asrs	r4, r4, #2
 8004976:	2600      	movs	r6, #0
 8004978:	42a6      	cmp	r6, r4
 800497a:	d109      	bne.n	8004990 <__libc_init_array+0x24>
 800497c:	4d0b      	ldr	r5, [pc, #44]	; (80049ac <__libc_init_array+0x40>)
 800497e:	4c0c      	ldr	r4, [pc, #48]	; (80049b0 <__libc_init_array+0x44>)
 8004980:	f001 f91a 	bl	8005bb8 <_init>
 8004984:	1b64      	subs	r4, r4, r5
 8004986:	10a4      	asrs	r4, r4, #2
 8004988:	2600      	movs	r6, #0
 800498a:	42a6      	cmp	r6, r4
 800498c:	d105      	bne.n	800499a <__libc_init_array+0x2e>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	f855 3b04 	ldr.w	r3, [r5], #4
 8004994:	4798      	blx	r3
 8004996:	3601      	adds	r6, #1
 8004998:	e7ee      	b.n	8004978 <__libc_init_array+0xc>
 800499a:	f855 3b04 	ldr.w	r3, [r5], #4
 800499e:	4798      	blx	r3
 80049a0:	3601      	adds	r6, #1
 80049a2:	e7f2      	b.n	800498a <__libc_init_array+0x1e>
 80049a4:	08005edc 	.word	0x08005edc
 80049a8:	08005edc 	.word	0x08005edc
 80049ac:	08005edc 	.word	0x08005edc
 80049b0:	08005ee0 	.word	0x08005ee0

080049b4 <memset>:
 80049b4:	4402      	add	r2, r0
 80049b6:	4603      	mov	r3, r0
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d100      	bne.n	80049be <memset+0xa>
 80049bc:	4770      	bx	lr
 80049be:	f803 1b01 	strb.w	r1, [r3], #1
 80049c2:	e7f9      	b.n	80049b8 <memset+0x4>

080049c4 <iprintf>:
 80049c4:	b40f      	push	{r0, r1, r2, r3}
 80049c6:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <iprintf+0x2c>)
 80049c8:	b513      	push	{r0, r1, r4, lr}
 80049ca:	681c      	ldr	r4, [r3, #0]
 80049cc:	b124      	cbz	r4, 80049d8 <iprintf+0x14>
 80049ce:	69a3      	ldr	r3, [r4, #24]
 80049d0:	b913      	cbnz	r3, 80049d8 <iprintf+0x14>
 80049d2:	4620      	mov	r0, r4
 80049d4:	f000 f96c 	bl	8004cb0 <__sinit>
 80049d8:	ab05      	add	r3, sp, #20
 80049da:	9a04      	ldr	r2, [sp, #16]
 80049dc:	68a1      	ldr	r1, [r4, #8]
 80049de:	9301      	str	r3, [sp, #4]
 80049e0:	4620      	mov	r0, r4
 80049e2:	f000 fb29 	bl	8005038 <_vfiprintf_r>
 80049e6:	b002      	add	sp, #8
 80049e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ec:	b004      	add	sp, #16
 80049ee:	4770      	bx	lr
 80049f0:	20000054 	.word	0x20000054

080049f4 <strtok>:
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <strtok+0x5c>)
 80049f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049f8:	681e      	ldr	r6, [r3, #0]
 80049fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80049fc:	4605      	mov	r5, r0
 80049fe:	b9fc      	cbnz	r4, 8004a40 <strtok+0x4c>
 8004a00:	2050      	movs	r0, #80	; 0x50
 8004a02:	9101      	str	r1, [sp, #4]
 8004a04:	f000 fa06 	bl	8004e14 <malloc>
 8004a08:	9901      	ldr	r1, [sp, #4]
 8004a0a:	65b0      	str	r0, [r6, #88]	; 0x58
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	b920      	cbnz	r0, 8004a1a <strtok+0x26>
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <strtok+0x60>)
 8004a12:	4811      	ldr	r0, [pc, #68]	; (8004a58 <strtok+0x64>)
 8004a14:	2157      	movs	r1, #87	; 0x57
 8004a16:	f000 f8d5 	bl	8004bc4 <__assert_func>
 8004a1a:	e9c0 4400 	strd	r4, r4, [r0]
 8004a1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004a22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004a26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004a2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004a2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004a32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004a36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004a3a:	6184      	str	r4, [r0, #24]
 8004a3c:	7704      	strb	r4, [r0, #28]
 8004a3e:	6244      	str	r4, [r0, #36]	; 0x24
 8004a40:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004a42:	2301      	movs	r3, #1
 8004a44:	4628      	mov	r0, r5
 8004a46:	b002      	add	sp, #8
 8004a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004a4c:	f000 b806 	b.w	8004a5c <__strtok_r>
 8004a50:	20000054 	.word	0x20000054
 8004a54:	08005c8c 	.word	0x08005c8c
 8004a58:	08005ca3 	.word	0x08005ca3

08004a5c <__strtok_r>:
 8004a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a5e:	b908      	cbnz	r0, 8004a64 <__strtok_r+0x8>
 8004a60:	6810      	ldr	r0, [r2, #0]
 8004a62:	b188      	cbz	r0, 8004a88 <__strtok_r+0x2c>
 8004a64:	4604      	mov	r4, r0
 8004a66:	4620      	mov	r0, r4
 8004a68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004a6c:	460f      	mov	r7, r1
 8004a6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004a72:	b91e      	cbnz	r6, 8004a7c <__strtok_r+0x20>
 8004a74:	b965      	cbnz	r5, 8004a90 <__strtok_r+0x34>
 8004a76:	6015      	str	r5, [r2, #0]
 8004a78:	4628      	mov	r0, r5
 8004a7a:	e005      	b.n	8004a88 <__strtok_r+0x2c>
 8004a7c:	42b5      	cmp	r5, r6
 8004a7e:	d1f6      	bne.n	8004a6e <__strtok_r+0x12>
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1f0      	bne.n	8004a66 <__strtok_r+0xa>
 8004a84:	6014      	str	r4, [r2, #0]
 8004a86:	7003      	strb	r3, [r0, #0]
 8004a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8a:	461c      	mov	r4, r3
 8004a8c:	e00c      	b.n	8004aa8 <__strtok_r+0x4c>
 8004a8e:	b915      	cbnz	r5, 8004a96 <__strtok_r+0x3a>
 8004a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004a94:	460e      	mov	r6, r1
 8004a96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004a9a:	42ab      	cmp	r3, r5
 8004a9c:	d1f7      	bne.n	8004a8e <__strtok_r+0x32>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d0f3      	beq.n	8004a8a <__strtok_r+0x2e>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004aa8:	6014      	str	r4, [r2, #0]
 8004aaa:	e7ed      	b.n	8004a88 <__strtok_r+0x2c>

08004aac <_strtol_l.constprop.0>:
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ab2:	d001      	beq.n	8004ab8 <_strtol_l.constprop.0+0xc>
 8004ab4:	2b24      	cmp	r3, #36	; 0x24
 8004ab6:	d906      	bls.n	8004ac6 <_strtol_l.constprop.0+0x1a>
 8004ab8:	f7ff ff52 	bl	8004960 <__errno>
 8004abc:	2316      	movs	r3, #22
 8004abe:	6003      	str	r3, [r0, #0]
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004bac <_strtol_l.constprop.0+0x100>
 8004aca:	460d      	mov	r5, r1
 8004acc:	462e      	mov	r6, r5
 8004ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004ad6:	f017 0708 	ands.w	r7, r7, #8
 8004ada:	d1f7      	bne.n	8004acc <_strtol_l.constprop.0+0x20>
 8004adc:	2c2d      	cmp	r4, #45	; 0x2d
 8004ade:	d132      	bne.n	8004b46 <_strtol_l.constprop.0+0x9a>
 8004ae0:	782c      	ldrb	r4, [r5, #0]
 8004ae2:	2701      	movs	r7, #1
 8004ae4:	1cb5      	adds	r5, r6, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d05b      	beq.n	8004ba2 <_strtol_l.constprop.0+0xf6>
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d109      	bne.n	8004b02 <_strtol_l.constprop.0+0x56>
 8004aee:	2c30      	cmp	r4, #48	; 0x30
 8004af0:	d107      	bne.n	8004b02 <_strtol_l.constprop.0+0x56>
 8004af2:	782c      	ldrb	r4, [r5, #0]
 8004af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004af8:	2c58      	cmp	r4, #88	; 0x58
 8004afa:	d14d      	bne.n	8004b98 <_strtol_l.constprop.0+0xec>
 8004afc:	786c      	ldrb	r4, [r5, #1]
 8004afe:	2310      	movs	r3, #16
 8004b00:	3502      	adds	r5, #2
 8004b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8004b0a:	f04f 0c00 	mov.w	ip, #0
 8004b0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8004b12:	4666      	mov	r6, ip
 8004b14:	fb03 8a19 	mls	sl, r3, r9, r8
 8004b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004b1c:	f1be 0f09 	cmp.w	lr, #9
 8004b20:	d816      	bhi.n	8004b50 <_strtol_l.constprop.0+0xa4>
 8004b22:	4674      	mov	r4, lr
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	dd24      	ble.n	8004b72 <_strtol_l.constprop.0+0xc6>
 8004b28:	f1bc 0f00 	cmp.w	ip, #0
 8004b2c:	db1e      	blt.n	8004b6c <_strtol_l.constprop.0+0xc0>
 8004b2e:	45b1      	cmp	r9, r6
 8004b30:	d31c      	bcc.n	8004b6c <_strtol_l.constprop.0+0xc0>
 8004b32:	d101      	bne.n	8004b38 <_strtol_l.constprop.0+0x8c>
 8004b34:	45a2      	cmp	sl, r4
 8004b36:	db19      	blt.n	8004b6c <_strtol_l.constprop.0+0xc0>
 8004b38:	fb06 4603 	mla	r6, r6, r3, r4
 8004b3c:	f04f 0c01 	mov.w	ip, #1
 8004b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004b44:	e7e8      	b.n	8004b18 <_strtol_l.constprop.0+0x6c>
 8004b46:	2c2b      	cmp	r4, #43	; 0x2b
 8004b48:	bf04      	itt	eq
 8004b4a:	782c      	ldrbeq	r4, [r5, #0]
 8004b4c:	1cb5      	addeq	r5, r6, #2
 8004b4e:	e7ca      	b.n	8004ae6 <_strtol_l.constprop.0+0x3a>
 8004b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004b54:	f1be 0f19 	cmp.w	lr, #25
 8004b58:	d801      	bhi.n	8004b5e <_strtol_l.constprop.0+0xb2>
 8004b5a:	3c37      	subs	r4, #55	; 0x37
 8004b5c:	e7e2      	b.n	8004b24 <_strtol_l.constprop.0+0x78>
 8004b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004b62:	f1be 0f19 	cmp.w	lr, #25
 8004b66:	d804      	bhi.n	8004b72 <_strtol_l.constprop.0+0xc6>
 8004b68:	3c57      	subs	r4, #87	; 0x57
 8004b6a:	e7db      	b.n	8004b24 <_strtol_l.constprop.0+0x78>
 8004b6c:	f04f 3cff 	mov.w	ip, #4294967295
 8004b70:	e7e6      	b.n	8004b40 <_strtol_l.constprop.0+0x94>
 8004b72:	f1bc 0f00 	cmp.w	ip, #0
 8004b76:	da05      	bge.n	8004b84 <_strtol_l.constprop.0+0xd8>
 8004b78:	2322      	movs	r3, #34	; 0x22
 8004b7a:	6003      	str	r3, [r0, #0]
 8004b7c:	4646      	mov	r6, r8
 8004b7e:	b942      	cbnz	r2, 8004b92 <_strtol_l.constprop.0+0xe6>
 8004b80:	4630      	mov	r0, r6
 8004b82:	e79e      	b.n	8004ac2 <_strtol_l.constprop.0+0x16>
 8004b84:	b107      	cbz	r7, 8004b88 <_strtol_l.constprop.0+0xdc>
 8004b86:	4276      	negs	r6, r6
 8004b88:	2a00      	cmp	r2, #0
 8004b8a:	d0f9      	beq.n	8004b80 <_strtol_l.constprop.0+0xd4>
 8004b8c:	f1bc 0f00 	cmp.w	ip, #0
 8004b90:	d000      	beq.n	8004b94 <_strtol_l.constprop.0+0xe8>
 8004b92:	1e69      	subs	r1, r5, #1
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	e7f3      	b.n	8004b80 <_strtol_l.constprop.0+0xd4>
 8004b98:	2430      	movs	r4, #48	; 0x30
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1b1      	bne.n	8004b02 <_strtol_l.constprop.0+0x56>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	e7af      	b.n	8004b02 <_strtol_l.constprop.0+0x56>
 8004ba2:	2c30      	cmp	r4, #48	; 0x30
 8004ba4:	d0a5      	beq.n	8004af2 <_strtol_l.constprop.0+0x46>
 8004ba6:	230a      	movs	r3, #10
 8004ba8:	e7ab      	b.n	8004b02 <_strtol_l.constprop.0+0x56>
 8004baa:	bf00      	nop
 8004bac:	08005d3d 	.word	0x08005d3d

08004bb0 <strtol>:
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	460a      	mov	r2, r1
 8004bb4:	4601      	mov	r1, r0
 8004bb6:	4802      	ldr	r0, [pc, #8]	; (8004bc0 <strtol+0x10>)
 8004bb8:	6800      	ldr	r0, [r0, #0]
 8004bba:	f7ff bf77 	b.w	8004aac <_strtol_l.constprop.0>
 8004bbe:	bf00      	nop
 8004bc0:	20000054 	.word	0x20000054

08004bc4 <__assert_func>:
 8004bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004bc6:	4614      	mov	r4, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <__assert_func+0x2c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4605      	mov	r5, r0
 8004bd0:	68d8      	ldr	r0, [r3, #12]
 8004bd2:	b14c      	cbz	r4, 8004be8 <__assert_func+0x24>
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <__assert_func+0x30>)
 8004bd6:	9100      	str	r1, [sp, #0]
 8004bd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004bdc:	4906      	ldr	r1, [pc, #24]	; (8004bf8 <__assert_func+0x34>)
 8004bde:	462b      	mov	r3, r5
 8004be0:	f000 f8e4 	bl	8004dac <fiprintf>
 8004be4:	f000 fe12 	bl	800580c <abort>
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <__assert_func+0x38>)
 8004bea:	461c      	mov	r4, r3
 8004bec:	e7f3      	b.n	8004bd6 <__assert_func+0x12>
 8004bee:	bf00      	nop
 8004bf0:	20000054 	.word	0x20000054
 8004bf4:	08005d00 	.word	0x08005d00
 8004bf8:	08005d0d 	.word	0x08005d0d
 8004bfc:	08005d3b 	.word	0x08005d3b

08004c00 <std>:
 8004c00:	2300      	movs	r3, #0
 8004c02:	b510      	push	{r4, lr}
 8004c04:	4604      	mov	r4, r0
 8004c06:	e9c0 3300 	strd	r3, r3, [r0]
 8004c0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c0e:	6083      	str	r3, [r0, #8]
 8004c10:	8181      	strh	r1, [r0, #12]
 8004c12:	6643      	str	r3, [r0, #100]	; 0x64
 8004c14:	81c2      	strh	r2, [r0, #14]
 8004c16:	6183      	str	r3, [r0, #24]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	305c      	adds	r0, #92	; 0x5c
 8004c1e:	f7ff fec9 	bl	80049b4 <memset>
 8004c22:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <std+0x38>)
 8004c24:	6263      	str	r3, [r4, #36]	; 0x24
 8004c26:	4b05      	ldr	r3, [pc, #20]	; (8004c3c <std+0x3c>)
 8004c28:	62a3      	str	r3, [r4, #40]	; 0x28
 8004c2a:	4b05      	ldr	r3, [pc, #20]	; (8004c40 <std+0x40>)
 8004c2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004c2e:	4b05      	ldr	r3, [pc, #20]	; (8004c44 <std+0x44>)
 8004c30:	6224      	str	r4, [r4, #32]
 8004c32:	6323      	str	r3, [r4, #48]	; 0x30
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	bf00      	nop
 8004c38:	080055e1 	.word	0x080055e1
 8004c3c:	08005603 	.word	0x08005603
 8004c40:	0800563b 	.word	0x0800563b
 8004c44:	0800565f 	.word	0x0800565f

08004c48 <_cleanup_r>:
 8004c48:	4901      	ldr	r1, [pc, #4]	; (8004c50 <_cleanup_r+0x8>)
 8004c4a:	f000 b8c1 	b.w	8004dd0 <_fwalk_reent>
 8004c4e:	bf00      	nop
 8004c50:	08005949 	.word	0x08005949

08004c54 <__sfmoreglue>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	2268      	movs	r2, #104	; 0x68
 8004c58:	1e4d      	subs	r5, r1, #1
 8004c5a:	4355      	muls	r5, r2
 8004c5c:	460e      	mov	r6, r1
 8004c5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004c62:	f000 f94b 	bl	8004efc <_malloc_r>
 8004c66:	4604      	mov	r4, r0
 8004c68:	b140      	cbz	r0, 8004c7c <__sfmoreglue+0x28>
 8004c6a:	2100      	movs	r1, #0
 8004c6c:	e9c0 1600 	strd	r1, r6, [r0]
 8004c70:	300c      	adds	r0, #12
 8004c72:	60a0      	str	r0, [r4, #8]
 8004c74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004c78:	f7ff fe9c 	bl	80049b4 <memset>
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	bd70      	pop	{r4, r5, r6, pc}

08004c80 <__sfp_lock_acquire>:
 8004c80:	4801      	ldr	r0, [pc, #4]	; (8004c88 <__sfp_lock_acquire+0x8>)
 8004c82:	f000 b8c5 	b.w	8004e10 <__retarget_lock_acquire_recursive>
 8004c86:	bf00      	nop
 8004c88:	2000028d 	.word	0x2000028d

08004c8c <__sfp_lock_release>:
 8004c8c:	4801      	ldr	r0, [pc, #4]	; (8004c94 <__sfp_lock_release+0x8>)
 8004c8e:	f000 b8c0 	b.w	8004e12 <__retarget_lock_release_recursive>
 8004c92:	bf00      	nop
 8004c94:	2000028d 	.word	0x2000028d

08004c98 <__sinit_lock_acquire>:
 8004c98:	4801      	ldr	r0, [pc, #4]	; (8004ca0 <__sinit_lock_acquire+0x8>)
 8004c9a:	f000 b8b9 	b.w	8004e10 <__retarget_lock_acquire_recursive>
 8004c9e:	bf00      	nop
 8004ca0:	2000028e 	.word	0x2000028e

08004ca4 <__sinit_lock_release>:
 8004ca4:	4801      	ldr	r0, [pc, #4]	; (8004cac <__sinit_lock_release+0x8>)
 8004ca6:	f000 b8b4 	b.w	8004e12 <__retarget_lock_release_recursive>
 8004caa:	bf00      	nop
 8004cac:	2000028e 	.word	0x2000028e

08004cb0 <__sinit>:
 8004cb0:	b510      	push	{r4, lr}
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	f7ff fff0 	bl	8004c98 <__sinit_lock_acquire>
 8004cb8:	69a3      	ldr	r3, [r4, #24]
 8004cba:	b11b      	cbz	r3, 8004cc4 <__sinit+0x14>
 8004cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc0:	f7ff bff0 	b.w	8004ca4 <__sinit_lock_release>
 8004cc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004cc8:	6523      	str	r3, [r4, #80]	; 0x50
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <__sinit+0x68>)
 8004ccc:	4a13      	ldr	r2, [pc, #76]	; (8004d1c <__sinit+0x6c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8004cd2:	42a3      	cmp	r3, r4
 8004cd4:	bf04      	itt	eq
 8004cd6:	2301      	moveq	r3, #1
 8004cd8:	61a3      	streq	r3, [r4, #24]
 8004cda:	4620      	mov	r0, r4
 8004cdc:	f000 f820 	bl	8004d20 <__sfp>
 8004ce0:	6060      	str	r0, [r4, #4]
 8004ce2:	4620      	mov	r0, r4
 8004ce4:	f000 f81c 	bl	8004d20 <__sfp>
 8004ce8:	60a0      	str	r0, [r4, #8]
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 f818 	bl	8004d20 <__sfp>
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60e0      	str	r0, [r4, #12]
 8004cf4:	2104      	movs	r1, #4
 8004cf6:	6860      	ldr	r0, [r4, #4]
 8004cf8:	f7ff ff82 	bl	8004c00 <std>
 8004cfc:	68a0      	ldr	r0, [r4, #8]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	2109      	movs	r1, #9
 8004d02:	f7ff ff7d 	bl	8004c00 <std>
 8004d06:	68e0      	ldr	r0, [r4, #12]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	2112      	movs	r1, #18
 8004d0c:	f7ff ff78 	bl	8004c00 <std>
 8004d10:	2301      	movs	r3, #1
 8004d12:	61a3      	str	r3, [r4, #24]
 8004d14:	e7d2      	b.n	8004cbc <__sinit+0xc>
 8004d16:	bf00      	nop
 8004d18:	08005c88 	.word	0x08005c88
 8004d1c:	08004c49 	.word	0x08004c49

08004d20 <__sfp>:
 8004d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d22:	4607      	mov	r7, r0
 8004d24:	f7ff ffac 	bl	8004c80 <__sfp_lock_acquire>
 8004d28:	4b1e      	ldr	r3, [pc, #120]	; (8004da4 <__sfp+0x84>)
 8004d2a:	681e      	ldr	r6, [r3, #0]
 8004d2c:	69b3      	ldr	r3, [r6, #24]
 8004d2e:	b913      	cbnz	r3, 8004d36 <__sfp+0x16>
 8004d30:	4630      	mov	r0, r6
 8004d32:	f7ff ffbd 	bl	8004cb0 <__sinit>
 8004d36:	3648      	adds	r6, #72	; 0x48
 8004d38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	d503      	bpl.n	8004d48 <__sfp+0x28>
 8004d40:	6833      	ldr	r3, [r6, #0]
 8004d42:	b30b      	cbz	r3, 8004d88 <__sfp+0x68>
 8004d44:	6836      	ldr	r6, [r6, #0]
 8004d46:	e7f7      	b.n	8004d38 <__sfp+0x18>
 8004d48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004d4c:	b9d5      	cbnz	r5, 8004d84 <__sfp+0x64>
 8004d4e:	4b16      	ldr	r3, [pc, #88]	; (8004da8 <__sfp+0x88>)
 8004d50:	60e3      	str	r3, [r4, #12]
 8004d52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004d56:	6665      	str	r5, [r4, #100]	; 0x64
 8004d58:	f000 f859 	bl	8004e0e <__retarget_lock_init_recursive>
 8004d5c:	f7ff ff96 	bl	8004c8c <__sfp_lock_release>
 8004d60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004d64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004d68:	6025      	str	r5, [r4, #0]
 8004d6a:	61a5      	str	r5, [r4, #24]
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	4629      	mov	r1, r5
 8004d70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004d74:	f7ff fe1e 	bl	80049b4 <memset>
 8004d78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004d7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004d80:	4620      	mov	r0, r4
 8004d82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d84:	3468      	adds	r4, #104	; 0x68
 8004d86:	e7d9      	b.n	8004d3c <__sfp+0x1c>
 8004d88:	2104      	movs	r1, #4
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f7ff ff62 	bl	8004c54 <__sfmoreglue>
 8004d90:	4604      	mov	r4, r0
 8004d92:	6030      	str	r0, [r6, #0]
 8004d94:	2800      	cmp	r0, #0
 8004d96:	d1d5      	bne.n	8004d44 <__sfp+0x24>
 8004d98:	f7ff ff78 	bl	8004c8c <__sfp_lock_release>
 8004d9c:	230c      	movs	r3, #12
 8004d9e:	603b      	str	r3, [r7, #0]
 8004da0:	e7ee      	b.n	8004d80 <__sfp+0x60>
 8004da2:	bf00      	nop
 8004da4:	08005c88 	.word	0x08005c88
 8004da8:	ffff0001 	.word	0xffff0001

08004dac <fiprintf>:
 8004dac:	b40e      	push	{r1, r2, r3}
 8004dae:	b503      	push	{r0, r1, lr}
 8004db0:	4601      	mov	r1, r0
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	4805      	ldr	r0, [pc, #20]	; (8004dcc <fiprintf+0x20>)
 8004db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dba:	6800      	ldr	r0, [r0, #0]
 8004dbc:	9301      	str	r3, [sp, #4]
 8004dbe:	f000 f93b 	bl	8005038 <_vfiprintf_r>
 8004dc2:	b002      	add	sp, #8
 8004dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc8:	b003      	add	sp, #12
 8004dca:	4770      	bx	lr
 8004dcc:	20000054 	.word	0x20000054

08004dd0 <_fwalk_reent>:
 8004dd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	4688      	mov	r8, r1
 8004dd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ddc:	2700      	movs	r7, #0
 8004dde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004de2:	f1b9 0901 	subs.w	r9, r9, #1
 8004de6:	d505      	bpl.n	8004df4 <_fwalk_reent+0x24>
 8004de8:	6824      	ldr	r4, [r4, #0]
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	d1f7      	bne.n	8004dde <_fwalk_reent+0xe>
 8004dee:	4638      	mov	r0, r7
 8004df0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004df4:	89ab      	ldrh	r3, [r5, #12]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d907      	bls.n	8004e0a <_fwalk_reent+0x3a>
 8004dfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	d003      	beq.n	8004e0a <_fwalk_reent+0x3a>
 8004e02:	4629      	mov	r1, r5
 8004e04:	4630      	mov	r0, r6
 8004e06:	47c0      	blx	r8
 8004e08:	4307      	orrs	r7, r0
 8004e0a:	3568      	adds	r5, #104	; 0x68
 8004e0c:	e7e9      	b.n	8004de2 <_fwalk_reent+0x12>

08004e0e <__retarget_lock_init_recursive>:
 8004e0e:	4770      	bx	lr

08004e10 <__retarget_lock_acquire_recursive>:
 8004e10:	4770      	bx	lr

08004e12 <__retarget_lock_release_recursive>:
 8004e12:	4770      	bx	lr

08004e14 <malloc>:
 8004e14:	4b02      	ldr	r3, [pc, #8]	; (8004e20 <malloc+0xc>)
 8004e16:	4601      	mov	r1, r0
 8004e18:	6818      	ldr	r0, [r3, #0]
 8004e1a:	f000 b86f 	b.w	8004efc <_malloc_r>
 8004e1e:	bf00      	nop
 8004e20:	20000054 	.word	0x20000054

08004e24 <_free_r>:
 8004e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e26:	2900      	cmp	r1, #0
 8004e28:	d044      	beq.n	8004eb4 <_free_r+0x90>
 8004e2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e2e:	9001      	str	r0, [sp, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f1a1 0404 	sub.w	r4, r1, #4
 8004e36:	bfb8      	it	lt
 8004e38:	18e4      	addlt	r4, r4, r3
 8004e3a:	f000 fe39 	bl	8005ab0 <__malloc_lock>
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	; (8004eb8 <_free_r+0x94>)
 8004e40:	9801      	ldr	r0, [sp, #4]
 8004e42:	6813      	ldr	r3, [r2, #0]
 8004e44:	b933      	cbnz	r3, 8004e54 <_free_r+0x30>
 8004e46:	6063      	str	r3, [r4, #4]
 8004e48:	6014      	str	r4, [r2, #0]
 8004e4a:	b003      	add	sp, #12
 8004e4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e50:	f000 be34 	b.w	8005abc <__malloc_unlock>
 8004e54:	42a3      	cmp	r3, r4
 8004e56:	d908      	bls.n	8004e6a <_free_r+0x46>
 8004e58:	6825      	ldr	r5, [r4, #0]
 8004e5a:	1961      	adds	r1, r4, r5
 8004e5c:	428b      	cmp	r3, r1
 8004e5e:	bf01      	itttt	eq
 8004e60:	6819      	ldreq	r1, [r3, #0]
 8004e62:	685b      	ldreq	r3, [r3, #4]
 8004e64:	1949      	addeq	r1, r1, r5
 8004e66:	6021      	streq	r1, [r4, #0]
 8004e68:	e7ed      	b.n	8004e46 <_free_r+0x22>
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	b10b      	cbz	r3, 8004e74 <_free_r+0x50>
 8004e70:	42a3      	cmp	r3, r4
 8004e72:	d9fa      	bls.n	8004e6a <_free_r+0x46>
 8004e74:	6811      	ldr	r1, [r2, #0]
 8004e76:	1855      	adds	r5, r2, r1
 8004e78:	42a5      	cmp	r5, r4
 8004e7a:	d10b      	bne.n	8004e94 <_free_r+0x70>
 8004e7c:	6824      	ldr	r4, [r4, #0]
 8004e7e:	4421      	add	r1, r4
 8004e80:	1854      	adds	r4, r2, r1
 8004e82:	42a3      	cmp	r3, r4
 8004e84:	6011      	str	r1, [r2, #0]
 8004e86:	d1e0      	bne.n	8004e4a <_free_r+0x26>
 8004e88:	681c      	ldr	r4, [r3, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	6053      	str	r3, [r2, #4]
 8004e8e:	4421      	add	r1, r4
 8004e90:	6011      	str	r1, [r2, #0]
 8004e92:	e7da      	b.n	8004e4a <_free_r+0x26>
 8004e94:	d902      	bls.n	8004e9c <_free_r+0x78>
 8004e96:	230c      	movs	r3, #12
 8004e98:	6003      	str	r3, [r0, #0]
 8004e9a:	e7d6      	b.n	8004e4a <_free_r+0x26>
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	1961      	adds	r1, r4, r5
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf04      	itt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	bf04      	itt	eq
 8004eac:	1949      	addeq	r1, r1, r5
 8004eae:	6021      	streq	r1, [r4, #0]
 8004eb0:	6054      	str	r4, [r2, #4]
 8004eb2:	e7ca      	b.n	8004e4a <_free_r+0x26>
 8004eb4:	b003      	add	sp, #12
 8004eb6:	bd30      	pop	{r4, r5, pc}
 8004eb8:	20000290 	.word	0x20000290

08004ebc <sbrk_aligned>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4e0e      	ldr	r6, [pc, #56]	; (8004ef8 <sbrk_aligned+0x3c>)
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	6831      	ldr	r1, [r6, #0]
 8004ec4:	4605      	mov	r5, r0
 8004ec6:	b911      	cbnz	r1, 8004ece <sbrk_aligned+0x12>
 8004ec8:	f000 fb7a 	bl	80055c0 <_sbrk_r>
 8004ecc:	6030      	str	r0, [r6, #0]
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4628      	mov	r0, r5
 8004ed2:	f000 fb75 	bl	80055c0 <_sbrk_r>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d00a      	beq.n	8004ef0 <sbrk_aligned+0x34>
 8004eda:	1cc4      	adds	r4, r0, #3
 8004edc:	f024 0403 	bic.w	r4, r4, #3
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d007      	beq.n	8004ef4 <sbrk_aligned+0x38>
 8004ee4:	1a21      	subs	r1, r4, r0
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fb6a 	bl	80055c0 <_sbrk_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d101      	bne.n	8004ef4 <sbrk_aligned+0x38>
 8004ef0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	20000294 	.word	0x20000294

08004efc <_malloc_r>:
 8004efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f00:	1ccd      	adds	r5, r1, #3
 8004f02:	f025 0503 	bic.w	r5, r5, #3
 8004f06:	3508      	adds	r5, #8
 8004f08:	2d0c      	cmp	r5, #12
 8004f0a:	bf38      	it	cc
 8004f0c:	250c      	movcc	r5, #12
 8004f0e:	2d00      	cmp	r5, #0
 8004f10:	4607      	mov	r7, r0
 8004f12:	db01      	blt.n	8004f18 <_malloc_r+0x1c>
 8004f14:	42a9      	cmp	r1, r5
 8004f16:	d905      	bls.n	8004f24 <_malloc_r+0x28>
 8004f18:	230c      	movs	r3, #12
 8004f1a:	603b      	str	r3, [r7, #0]
 8004f1c:	2600      	movs	r6, #0
 8004f1e:	4630      	mov	r0, r6
 8004f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f24:	4e2e      	ldr	r6, [pc, #184]	; (8004fe0 <_malloc_r+0xe4>)
 8004f26:	f000 fdc3 	bl	8005ab0 <__malloc_lock>
 8004f2a:	6833      	ldr	r3, [r6, #0]
 8004f2c:	461c      	mov	r4, r3
 8004f2e:	bb34      	cbnz	r4, 8004f7e <_malloc_r+0x82>
 8004f30:	4629      	mov	r1, r5
 8004f32:	4638      	mov	r0, r7
 8004f34:	f7ff ffc2 	bl	8004ebc <sbrk_aligned>
 8004f38:	1c43      	adds	r3, r0, #1
 8004f3a:	4604      	mov	r4, r0
 8004f3c:	d14d      	bne.n	8004fda <_malloc_r+0xde>
 8004f3e:	6834      	ldr	r4, [r6, #0]
 8004f40:	4626      	mov	r6, r4
 8004f42:	2e00      	cmp	r6, #0
 8004f44:	d140      	bne.n	8004fc8 <_malloc_r+0xcc>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4638      	mov	r0, r7
 8004f4c:	eb04 0803 	add.w	r8, r4, r3
 8004f50:	f000 fb36 	bl	80055c0 <_sbrk_r>
 8004f54:	4580      	cmp	r8, r0
 8004f56:	d13a      	bne.n	8004fce <_malloc_r+0xd2>
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	3503      	adds	r5, #3
 8004f5c:	1a6d      	subs	r5, r5, r1
 8004f5e:	f025 0503 	bic.w	r5, r5, #3
 8004f62:	3508      	adds	r5, #8
 8004f64:	2d0c      	cmp	r5, #12
 8004f66:	bf38      	it	cc
 8004f68:	250c      	movcc	r5, #12
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7ff ffa5 	bl	8004ebc <sbrk_aligned>
 8004f72:	3001      	adds	r0, #1
 8004f74:	d02b      	beq.n	8004fce <_malloc_r+0xd2>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	442b      	add	r3, r5
 8004f7a:	6023      	str	r3, [r4, #0]
 8004f7c:	e00e      	b.n	8004f9c <_malloc_r+0xa0>
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	1b52      	subs	r2, r2, r5
 8004f82:	d41e      	bmi.n	8004fc2 <_malloc_r+0xc6>
 8004f84:	2a0b      	cmp	r2, #11
 8004f86:	d916      	bls.n	8004fb6 <_malloc_r+0xba>
 8004f88:	1961      	adds	r1, r4, r5
 8004f8a:	42a3      	cmp	r3, r4
 8004f8c:	6025      	str	r5, [r4, #0]
 8004f8e:	bf18      	it	ne
 8004f90:	6059      	strne	r1, [r3, #4]
 8004f92:	6863      	ldr	r3, [r4, #4]
 8004f94:	bf08      	it	eq
 8004f96:	6031      	streq	r1, [r6, #0]
 8004f98:	5162      	str	r2, [r4, r5]
 8004f9a:	604b      	str	r3, [r1, #4]
 8004f9c:	4638      	mov	r0, r7
 8004f9e:	f104 060b 	add.w	r6, r4, #11
 8004fa2:	f000 fd8b 	bl	8005abc <__malloc_unlock>
 8004fa6:	f026 0607 	bic.w	r6, r6, #7
 8004faa:	1d23      	adds	r3, r4, #4
 8004fac:	1af2      	subs	r2, r6, r3
 8004fae:	d0b6      	beq.n	8004f1e <_malloc_r+0x22>
 8004fb0:	1b9b      	subs	r3, r3, r6
 8004fb2:	50a3      	str	r3, [r4, r2]
 8004fb4:	e7b3      	b.n	8004f1e <_malloc_r+0x22>
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	bf0c      	ite	eq
 8004fbc:	6032      	streq	r2, [r6, #0]
 8004fbe:	605a      	strne	r2, [r3, #4]
 8004fc0:	e7ec      	b.n	8004f9c <_malloc_r+0xa0>
 8004fc2:	4623      	mov	r3, r4
 8004fc4:	6864      	ldr	r4, [r4, #4]
 8004fc6:	e7b2      	b.n	8004f2e <_malloc_r+0x32>
 8004fc8:	4634      	mov	r4, r6
 8004fca:	6876      	ldr	r6, [r6, #4]
 8004fcc:	e7b9      	b.n	8004f42 <_malloc_r+0x46>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	603b      	str	r3, [r7, #0]
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	f000 fd72 	bl	8005abc <__malloc_unlock>
 8004fd8:	e7a1      	b.n	8004f1e <_malloc_r+0x22>
 8004fda:	6025      	str	r5, [r4, #0]
 8004fdc:	e7de      	b.n	8004f9c <_malloc_r+0xa0>
 8004fde:	bf00      	nop
 8004fe0:	20000290 	.word	0x20000290

08004fe4 <__sfputc_r>:
 8004fe4:	6893      	ldr	r3, [r2, #8]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	b410      	push	{r4}
 8004fec:	6093      	str	r3, [r2, #8]
 8004fee:	da08      	bge.n	8005002 <__sfputc_r+0x1e>
 8004ff0:	6994      	ldr	r4, [r2, #24]
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	db01      	blt.n	8004ffa <__sfputc_r+0x16>
 8004ff6:	290a      	cmp	r1, #10
 8004ff8:	d103      	bne.n	8005002 <__sfputc_r+0x1e>
 8004ffa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ffe:	f000 bb33 	b.w	8005668 <__swbuf_r>
 8005002:	6813      	ldr	r3, [r2, #0]
 8005004:	1c58      	adds	r0, r3, #1
 8005006:	6010      	str	r0, [r2, #0]
 8005008:	7019      	strb	r1, [r3, #0]
 800500a:	4608      	mov	r0, r1
 800500c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005010:	4770      	bx	lr

08005012 <__sfputs_r>:
 8005012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005014:	4606      	mov	r6, r0
 8005016:	460f      	mov	r7, r1
 8005018:	4614      	mov	r4, r2
 800501a:	18d5      	adds	r5, r2, r3
 800501c:	42ac      	cmp	r4, r5
 800501e:	d101      	bne.n	8005024 <__sfputs_r+0x12>
 8005020:	2000      	movs	r0, #0
 8005022:	e007      	b.n	8005034 <__sfputs_r+0x22>
 8005024:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005028:	463a      	mov	r2, r7
 800502a:	4630      	mov	r0, r6
 800502c:	f7ff ffda 	bl	8004fe4 <__sfputc_r>
 8005030:	1c43      	adds	r3, r0, #1
 8005032:	d1f3      	bne.n	800501c <__sfputs_r+0xa>
 8005034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005038 <_vfiprintf_r>:
 8005038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800503c:	460d      	mov	r5, r1
 800503e:	b09d      	sub	sp, #116	; 0x74
 8005040:	4614      	mov	r4, r2
 8005042:	4698      	mov	r8, r3
 8005044:	4606      	mov	r6, r0
 8005046:	b118      	cbz	r0, 8005050 <_vfiprintf_r+0x18>
 8005048:	6983      	ldr	r3, [r0, #24]
 800504a:	b90b      	cbnz	r3, 8005050 <_vfiprintf_r+0x18>
 800504c:	f7ff fe30 	bl	8004cb0 <__sinit>
 8005050:	4b89      	ldr	r3, [pc, #548]	; (8005278 <_vfiprintf_r+0x240>)
 8005052:	429d      	cmp	r5, r3
 8005054:	d11b      	bne.n	800508e <_vfiprintf_r+0x56>
 8005056:	6875      	ldr	r5, [r6, #4]
 8005058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800505a:	07d9      	lsls	r1, r3, #31
 800505c:	d405      	bmi.n	800506a <_vfiprintf_r+0x32>
 800505e:	89ab      	ldrh	r3, [r5, #12]
 8005060:	059a      	lsls	r2, r3, #22
 8005062:	d402      	bmi.n	800506a <_vfiprintf_r+0x32>
 8005064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005066:	f7ff fed3 	bl	8004e10 <__retarget_lock_acquire_recursive>
 800506a:	89ab      	ldrh	r3, [r5, #12]
 800506c:	071b      	lsls	r3, r3, #28
 800506e:	d501      	bpl.n	8005074 <_vfiprintf_r+0x3c>
 8005070:	692b      	ldr	r3, [r5, #16]
 8005072:	b9eb      	cbnz	r3, 80050b0 <_vfiprintf_r+0x78>
 8005074:	4629      	mov	r1, r5
 8005076:	4630      	mov	r0, r6
 8005078:	f000 fb5a 	bl	8005730 <__swsetup_r>
 800507c:	b1c0      	cbz	r0, 80050b0 <_vfiprintf_r+0x78>
 800507e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005080:	07dc      	lsls	r4, r3, #31
 8005082:	d50e      	bpl.n	80050a2 <_vfiprintf_r+0x6a>
 8005084:	f04f 30ff 	mov.w	r0, #4294967295
 8005088:	b01d      	add	sp, #116	; 0x74
 800508a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800508e:	4b7b      	ldr	r3, [pc, #492]	; (800527c <_vfiprintf_r+0x244>)
 8005090:	429d      	cmp	r5, r3
 8005092:	d101      	bne.n	8005098 <_vfiprintf_r+0x60>
 8005094:	68b5      	ldr	r5, [r6, #8]
 8005096:	e7df      	b.n	8005058 <_vfiprintf_r+0x20>
 8005098:	4b79      	ldr	r3, [pc, #484]	; (8005280 <_vfiprintf_r+0x248>)
 800509a:	429d      	cmp	r5, r3
 800509c:	bf08      	it	eq
 800509e:	68f5      	ldreq	r5, [r6, #12]
 80050a0:	e7da      	b.n	8005058 <_vfiprintf_r+0x20>
 80050a2:	89ab      	ldrh	r3, [r5, #12]
 80050a4:	0598      	lsls	r0, r3, #22
 80050a6:	d4ed      	bmi.n	8005084 <_vfiprintf_r+0x4c>
 80050a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80050aa:	f7ff feb2 	bl	8004e12 <__retarget_lock_release_recursive>
 80050ae:	e7e9      	b.n	8005084 <_vfiprintf_r+0x4c>
 80050b0:	2300      	movs	r3, #0
 80050b2:	9309      	str	r3, [sp, #36]	; 0x24
 80050b4:	2320      	movs	r3, #32
 80050b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80050be:	2330      	movs	r3, #48	; 0x30
 80050c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005284 <_vfiprintf_r+0x24c>
 80050c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050c8:	f04f 0901 	mov.w	r9, #1
 80050cc:	4623      	mov	r3, r4
 80050ce:	469a      	mov	sl, r3
 80050d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050d4:	b10a      	cbz	r2, 80050da <_vfiprintf_r+0xa2>
 80050d6:	2a25      	cmp	r2, #37	; 0x25
 80050d8:	d1f9      	bne.n	80050ce <_vfiprintf_r+0x96>
 80050da:	ebba 0b04 	subs.w	fp, sl, r4
 80050de:	d00b      	beq.n	80050f8 <_vfiprintf_r+0xc0>
 80050e0:	465b      	mov	r3, fp
 80050e2:	4622      	mov	r2, r4
 80050e4:	4629      	mov	r1, r5
 80050e6:	4630      	mov	r0, r6
 80050e8:	f7ff ff93 	bl	8005012 <__sfputs_r>
 80050ec:	3001      	adds	r0, #1
 80050ee:	f000 80aa 	beq.w	8005246 <_vfiprintf_r+0x20e>
 80050f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050f4:	445a      	add	r2, fp
 80050f6:	9209      	str	r2, [sp, #36]	; 0x24
 80050f8:	f89a 3000 	ldrb.w	r3, [sl]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80a2 	beq.w	8005246 <_vfiprintf_r+0x20e>
 8005102:	2300      	movs	r3, #0
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800510c:	f10a 0a01 	add.w	sl, sl, #1
 8005110:	9304      	str	r3, [sp, #16]
 8005112:	9307      	str	r3, [sp, #28]
 8005114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005118:	931a      	str	r3, [sp, #104]	; 0x68
 800511a:	4654      	mov	r4, sl
 800511c:	2205      	movs	r2, #5
 800511e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005122:	4858      	ldr	r0, [pc, #352]	; (8005284 <_vfiprintf_r+0x24c>)
 8005124:	f7fb f854 	bl	80001d0 <memchr>
 8005128:	9a04      	ldr	r2, [sp, #16]
 800512a:	b9d8      	cbnz	r0, 8005164 <_vfiprintf_r+0x12c>
 800512c:	06d1      	lsls	r1, r2, #27
 800512e:	bf44      	itt	mi
 8005130:	2320      	movmi	r3, #32
 8005132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005136:	0713      	lsls	r3, r2, #28
 8005138:	bf44      	itt	mi
 800513a:	232b      	movmi	r3, #43	; 0x2b
 800513c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005140:	f89a 3000 	ldrb.w	r3, [sl]
 8005144:	2b2a      	cmp	r3, #42	; 0x2a
 8005146:	d015      	beq.n	8005174 <_vfiprintf_r+0x13c>
 8005148:	9a07      	ldr	r2, [sp, #28]
 800514a:	4654      	mov	r4, sl
 800514c:	2000      	movs	r0, #0
 800514e:	f04f 0c0a 	mov.w	ip, #10
 8005152:	4621      	mov	r1, r4
 8005154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005158:	3b30      	subs	r3, #48	; 0x30
 800515a:	2b09      	cmp	r3, #9
 800515c:	d94e      	bls.n	80051fc <_vfiprintf_r+0x1c4>
 800515e:	b1b0      	cbz	r0, 800518e <_vfiprintf_r+0x156>
 8005160:	9207      	str	r2, [sp, #28]
 8005162:	e014      	b.n	800518e <_vfiprintf_r+0x156>
 8005164:	eba0 0308 	sub.w	r3, r0, r8
 8005168:	fa09 f303 	lsl.w	r3, r9, r3
 800516c:	4313      	orrs	r3, r2
 800516e:	9304      	str	r3, [sp, #16]
 8005170:	46a2      	mov	sl, r4
 8005172:	e7d2      	b.n	800511a <_vfiprintf_r+0xe2>
 8005174:	9b03      	ldr	r3, [sp, #12]
 8005176:	1d19      	adds	r1, r3, #4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	9103      	str	r1, [sp, #12]
 800517c:	2b00      	cmp	r3, #0
 800517e:	bfbb      	ittet	lt
 8005180:	425b      	neglt	r3, r3
 8005182:	f042 0202 	orrlt.w	r2, r2, #2
 8005186:	9307      	strge	r3, [sp, #28]
 8005188:	9307      	strlt	r3, [sp, #28]
 800518a:	bfb8      	it	lt
 800518c:	9204      	strlt	r2, [sp, #16]
 800518e:	7823      	ldrb	r3, [r4, #0]
 8005190:	2b2e      	cmp	r3, #46	; 0x2e
 8005192:	d10c      	bne.n	80051ae <_vfiprintf_r+0x176>
 8005194:	7863      	ldrb	r3, [r4, #1]
 8005196:	2b2a      	cmp	r3, #42	; 0x2a
 8005198:	d135      	bne.n	8005206 <_vfiprintf_r+0x1ce>
 800519a:	9b03      	ldr	r3, [sp, #12]
 800519c:	1d1a      	adds	r2, r3, #4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	9203      	str	r2, [sp, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bfb8      	it	lt
 80051a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80051aa:	3402      	adds	r4, #2
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005294 <_vfiprintf_r+0x25c>
 80051b2:	7821      	ldrb	r1, [r4, #0]
 80051b4:	2203      	movs	r2, #3
 80051b6:	4650      	mov	r0, sl
 80051b8:	f7fb f80a 	bl	80001d0 <memchr>
 80051bc:	b140      	cbz	r0, 80051d0 <_vfiprintf_r+0x198>
 80051be:	2340      	movs	r3, #64	; 0x40
 80051c0:	eba0 000a 	sub.w	r0, r0, sl
 80051c4:	fa03 f000 	lsl.w	r0, r3, r0
 80051c8:	9b04      	ldr	r3, [sp, #16]
 80051ca:	4303      	orrs	r3, r0
 80051cc:	3401      	adds	r4, #1
 80051ce:	9304      	str	r3, [sp, #16]
 80051d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051d4:	482c      	ldr	r0, [pc, #176]	; (8005288 <_vfiprintf_r+0x250>)
 80051d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051da:	2206      	movs	r2, #6
 80051dc:	f7fa fff8 	bl	80001d0 <memchr>
 80051e0:	2800      	cmp	r0, #0
 80051e2:	d03f      	beq.n	8005264 <_vfiprintf_r+0x22c>
 80051e4:	4b29      	ldr	r3, [pc, #164]	; (800528c <_vfiprintf_r+0x254>)
 80051e6:	bb1b      	cbnz	r3, 8005230 <_vfiprintf_r+0x1f8>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	3307      	adds	r3, #7
 80051ec:	f023 0307 	bic.w	r3, r3, #7
 80051f0:	3308      	adds	r3, #8
 80051f2:	9303      	str	r3, [sp, #12]
 80051f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f6:	443b      	add	r3, r7
 80051f8:	9309      	str	r3, [sp, #36]	; 0x24
 80051fa:	e767      	b.n	80050cc <_vfiprintf_r+0x94>
 80051fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8005200:	460c      	mov	r4, r1
 8005202:	2001      	movs	r0, #1
 8005204:	e7a5      	b.n	8005152 <_vfiprintf_r+0x11a>
 8005206:	2300      	movs	r3, #0
 8005208:	3401      	adds	r4, #1
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	4619      	mov	r1, r3
 800520e:	f04f 0c0a 	mov.w	ip, #10
 8005212:	4620      	mov	r0, r4
 8005214:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005218:	3a30      	subs	r2, #48	; 0x30
 800521a:	2a09      	cmp	r2, #9
 800521c:	d903      	bls.n	8005226 <_vfiprintf_r+0x1ee>
 800521e:	2b00      	cmp	r3, #0
 8005220:	d0c5      	beq.n	80051ae <_vfiprintf_r+0x176>
 8005222:	9105      	str	r1, [sp, #20]
 8005224:	e7c3      	b.n	80051ae <_vfiprintf_r+0x176>
 8005226:	fb0c 2101 	mla	r1, ip, r1, r2
 800522a:	4604      	mov	r4, r0
 800522c:	2301      	movs	r3, #1
 800522e:	e7f0      	b.n	8005212 <_vfiprintf_r+0x1da>
 8005230:	ab03      	add	r3, sp, #12
 8005232:	9300      	str	r3, [sp, #0]
 8005234:	462a      	mov	r2, r5
 8005236:	4b16      	ldr	r3, [pc, #88]	; (8005290 <_vfiprintf_r+0x258>)
 8005238:	a904      	add	r1, sp, #16
 800523a:	4630      	mov	r0, r6
 800523c:	f3af 8000 	nop.w
 8005240:	4607      	mov	r7, r0
 8005242:	1c78      	adds	r0, r7, #1
 8005244:	d1d6      	bne.n	80051f4 <_vfiprintf_r+0x1bc>
 8005246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005248:	07d9      	lsls	r1, r3, #31
 800524a:	d405      	bmi.n	8005258 <_vfiprintf_r+0x220>
 800524c:	89ab      	ldrh	r3, [r5, #12]
 800524e:	059a      	lsls	r2, r3, #22
 8005250:	d402      	bmi.n	8005258 <_vfiprintf_r+0x220>
 8005252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005254:	f7ff fddd 	bl	8004e12 <__retarget_lock_release_recursive>
 8005258:	89ab      	ldrh	r3, [r5, #12]
 800525a:	065b      	lsls	r3, r3, #25
 800525c:	f53f af12 	bmi.w	8005084 <_vfiprintf_r+0x4c>
 8005260:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005262:	e711      	b.n	8005088 <_vfiprintf_r+0x50>
 8005264:	ab03      	add	r3, sp, #12
 8005266:	9300      	str	r3, [sp, #0]
 8005268:	462a      	mov	r2, r5
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <_vfiprintf_r+0x258>)
 800526c:	a904      	add	r1, sp, #16
 800526e:	4630      	mov	r0, r6
 8005270:	f000 f880 	bl	8005374 <_printf_i>
 8005274:	e7e4      	b.n	8005240 <_vfiprintf_r+0x208>
 8005276:	bf00      	nop
 8005278:	08005e60 	.word	0x08005e60
 800527c:	08005e80 	.word	0x08005e80
 8005280:	08005e40 	.word	0x08005e40
 8005284:	08005ea0 	.word	0x08005ea0
 8005288:	08005eaa 	.word	0x08005eaa
 800528c:	00000000 	.word	0x00000000
 8005290:	08005013 	.word	0x08005013
 8005294:	08005ea6 	.word	0x08005ea6

08005298 <_printf_common>:
 8005298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800529c:	4616      	mov	r6, r2
 800529e:	4699      	mov	r9, r3
 80052a0:	688a      	ldr	r2, [r1, #8]
 80052a2:	690b      	ldr	r3, [r1, #16]
 80052a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bfb8      	it	lt
 80052ac:	4613      	movlt	r3, r2
 80052ae:	6033      	str	r3, [r6, #0]
 80052b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b4:	4607      	mov	r7, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	b10a      	cbz	r2, 80052be <_printf_common+0x26>
 80052ba:	3301      	adds	r3, #1
 80052bc:	6033      	str	r3, [r6, #0]
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	0699      	lsls	r1, r3, #26
 80052c2:	bf42      	ittt	mi
 80052c4:	6833      	ldrmi	r3, [r6, #0]
 80052c6:	3302      	addmi	r3, #2
 80052c8:	6033      	strmi	r3, [r6, #0]
 80052ca:	6825      	ldr	r5, [r4, #0]
 80052cc:	f015 0506 	ands.w	r5, r5, #6
 80052d0:	d106      	bne.n	80052e0 <_printf_common+0x48>
 80052d2:	f104 0a19 	add.w	sl, r4, #25
 80052d6:	68e3      	ldr	r3, [r4, #12]
 80052d8:	6832      	ldr	r2, [r6, #0]
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	42ab      	cmp	r3, r5
 80052de:	dc26      	bgt.n	800532e <_printf_common+0x96>
 80052e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e4:	1e13      	subs	r3, r2, #0
 80052e6:	6822      	ldr	r2, [r4, #0]
 80052e8:	bf18      	it	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	0692      	lsls	r2, r2, #26
 80052ee:	d42b      	bmi.n	8005348 <_printf_common+0xb0>
 80052f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f4:	4649      	mov	r1, r9
 80052f6:	4638      	mov	r0, r7
 80052f8:	47c0      	blx	r8
 80052fa:	3001      	adds	r0, #1
 80052fc:	d01e      	beq.n	800533c <_printf_common+0xa4>
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	68e5      	ldr	r5, [r4, #12]
 8005302:	6832      	ldr	r2, [r6, #0]
 8005304:	f003 0306 	and.w	r3, r3, #6
 8005308:	2b04      	cmp	r3, #4
 800530a:	bf08      	it	eq
 800530c:	1aad      	subeq	r5, r5, r2
 800530e:	68a3      	ldr	r3, [r4, #8]
 8005310:	6922      	ldr	r2, [r4, #16]
 8005312:	bf0c      	ite	eq
 8005314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005318:	2500      	movne	r5, #0
 800531a:	4293      	cmp	r3, r2
 800531c:	bfc4      	itt	gt
 800531e:	1a9b      	subgt	r3, r3, r2
 8005320:	18ed      	addgt	r5, r5, r3
 8005322:	2600      	movs	r6, #0
 8005324:	341a      	adds	r4, #26
 8005326:	42b5      	cmp	r5, r6
 8005328:	d11a      	bne.n	8005360 <_printf_common+0xc8>
 800532a:	2000      	movs	r0, #0
 800532c:	e008      	b.n	8005340 <_printf_common+0xa8>
 800532e:	2301      	movs	r3, #1
 8005330:	4652      	mov	r2, sl
 8005332:	4649      	mov	r1, r9
 8005334:	4638      	mov	r0, r7
 8005336:	47c0      	blx	r8
 8005338:	3001      	adds	r0, #1
 800533a:	d103      	bne.n	8005344 <_printf_common+0xac>
 800533c:	f04f 30ff 	mov.w	r0, #4294967295
 8005340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005344:	3501      	adds	r5, #1
 8005346:	e7c6      	b.n	80052d6 <_printf_common+0x3e>
 8005348:	18e1      	adds	r1, r4, r3
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	2030      	movs	r0, #48	; 0x30
 800534e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005352:	4422      	add	r2, r4
 8005354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800535c:	3302      	adds	r3, #2
 800535e:	e7c7      	b.n	80052f0 <_printf_common+0x58>
 8005360:	2301      	movs	r3, #1
 8005362:	4622      	mov	r2, r4
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d0e6      	beq.n	800533c <_printf_common+0xa4>
 800536e:	3601      	adds	r6, #1
 8005370:	e7d9      	b.n	8005326 <_printf_common+0x8e>
	...

08005374 <_printf_i>:
 8005374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	7e0f      	ldrb	r7, [r1, #24]
 800537a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800537c:	2f78      	cmp	r7, #120	; 0x78
 800537e:	4691      	mov	r9, r2
 8005380:	4680      	mov	r8, r0
 8005382:	460c      	mov	r4, r1
 8005384:	469a      	mov	sl, r3
 8005386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800538a:	d807      	bhi.n	800539c <_printf_i+0x28>
 800538c:	2f62      	cmp	r7, #98	; 0x62
 800538e:	d80a      	bhi.n	80053a6 <_printf_i+0x32>
 8005390:	2f00      	cmp	r7, #0
 8005392:	f000 80d8 	beq.w	8005546 <_printf_i+0x1d2>
 8005396:	2f58      	cmp	r7, #88	; 0x58
 8005398:	f000 80a3 	beq.w	80054e2 <_printf_i+0x16e>
 800539c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a4:	e03a      	b.n	800541c <_printf_i+0xa8>
 80053a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053aa:	2b15      	cmp	r3, #21
 80053ac:	d8f6      	bhi.n	800539c <_printf_i+0x28>
 80053ae:	a101      	add	r1, pc, #4	; (adr r1, 80053b4 <_printf_i+0x40>)
 80053b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b4:	0800540d 	.word	0x0800540d
 80053b8:	08005421 	.word	0x08005421
 80053bc:	0800539d 	.word	0x0800539d
 80053c0:	0800539d 	.word	0x0800539d
 80053c4:	0800539d 	.word	0x0800539d
 80053c8:	0800539d 	.word	0x0800539d
 80053cc:	08005421 	.word	0x08005421
 80053d0:	0800539d 	.word	0x0800539d
 80053d4:	0800539d 	.word	0x0800539d
 80053d8:	0800539d 	.word	0x0800539d
 80053dc:	0800539d 	.word	0x0800539d
 80053e0:	0800552d 	.word	0x0800552d
 80053e4:	08005451 	.word	0x08005451
 80053e8:	0800550f 	.word	0x0800550f
 80053ec:	0800539d 	.word	0x0800539d
 80053f0:	0800539d 	.word	0x0800539d
 80053f4:	0800554f 	.word	0x0800554f
 80053f8:	0800539d 	.word	0x0800539d
 80053fc:	08005451 	.word	0x08005451
 8005400:	0800539d 	.word	0x0800539d
 8005404:	0800539d 	.word	0x0800539d
 8005408:	08005517 	.word	0x08005517
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	1d1a      	adds	r2, r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	602a      	str	r2, [r5, #0]
 8005414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800541c:	2301      	movs	r3, #1
 800541e:	e0a3      	b.n	8005568 <_printf_i+0x1f4>
 8005420:	6820      	ldr	r0, [r4, #0]
 8005422:	6829      	ldr	r1, [r5, #0]
 8005424:	0606      	lsls	r6, r0, #24
 8005426:	f101 0304 	add.w	r3, r1, #4
 800542a:	d50a      	bpl.n	8005442 <_printf_i+0xce>
 800542c:	680e      	ldr	r6, [r1, #0]
 800542e:	602b      	str	r3, [r5, #0]
 8005430:	2e00      	cmp	r6, #0
 8005432:	da03      	bge.n	800543c <_printf_i+0xc8>
 8005434:	232d      	movs	r3, #45	; 0x2d
 8005436:	4276      	negs	r6, r6
 8005438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800543c:	485e      	ldr	r0, [pc, #376]	; (80055b8 <_printf_i+0x244>)
 800543e:	230a      	movs	r3, #10
 8005440:	e019      	b.n	8005476 <_printf_i+0x102>
 8005442:	680e      	ldr	r6, [r1, #0]
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800544a:	bf18      	it	ne
 800544c:	b236      	sxthne	r6, r6
 800544e:	e7ef      	b.n	8005430 <_printf_i+0xbc>
 8005450:	682b      	ldr	r3, [r5, #0]
 8005452:	6820      	ldr	r0, [r4, #0]
 8005454:	1d19      	adds	r1, r3, #4
 8005456:	6029      	str	r1, [r5, #0]
 8005458:	0601      	lsls	r1, r0, #24
 800545a:	d501      	bpl.n	8005460 <_printf_i+0xec>
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	e002      	b.n	8005466 <_printf_i+0xf2>
 8005460:	0646      	lsls	r6, r0, #25
 8005462:	d5fb      	bpl.n	800545c <_printf_i+0xe8>
 8005464:	881e      	ldrh	r6, [r3, #0]
 8005466:	4854      	ldr	r0, [pc, #336]	; (80055b8 <_printf_i+0x244>)
 8005468:	2f6f      	cmp	r7, #111	; 0x6f
 800546a:	bf0c      	ite	eq
 800546c:	2308      	moveq	r3, #8
 800546e:	230a      	movne	r3, #10
 8005470:	2100      	movs	r1, #0
 8005472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005476:	6865      	ldr	r5, [r4, #4]
 8005478:	60a5      	str	r5, [r4, #8]
 800547a:	2d00      	cmp	r5, #0
 800547c:	bfa2      	ittt	ge
 800547e:	6821      	ldrge	r1, [r4, #0]
 8005480:	f021 0104 	bicge.w	r1, r1, #4
 8005484:	6021      	strge	r1, [r4, #0]
 8005486:	b90e      	cbnz	r6, 800548c <_printf_i+0x118>
 8005488:	2d00      	cmp	r5, #0
 800548a:	d04d      	beq.n	8005528 <_printf_i+0x1b4>
 800548c:	4615      	mov	r5, r2
 800548e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005492:	fb03 6711 	mls	r7, r3, r1, r6
 8005496:	5dc7      	ldrb	r7, [r0, r7]
 8005498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800549c:	4637      	mov	r7, r6
 800549e:	42bb      	cmp	r3, r7
 80054a0:	460e      	mov	r6, r1
 80054a2:	d9f4      	bls.n	800548e <_printf_i+0x11a>
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10b      	bne.n	80054c0 <_printf_i+0x14c>
 80054a8:	6823      	ldr	r3, [r4, #0]
 80054aa:	07de      	lsls	r6, r3, #31
 80054ac:	d508      	bpl.n	80054c0 <_printf_i+0x14c>
 80054ae:	6923      	ldr	r3, [r4, #16]
 80054b0:	6861      	ldr	r1, [r4, #4]
 80054b2:	4299      	cmp	r1, r3
 80054b4:	bfde      	ittt	le
 80054b6:	2330      	movle	r3, #48	; 0x30
 80054b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054c0:	1b52      	subs	r2, r2, r5
 80054c2:	6122      	str	r2, [r4, #16]
 80054c4:	f8cd a000 	str.w	sl, [sp]
 80054c8:	464b      	mov	r3, r9
 80054ca:	aa03      	add	r2, sp, #12
 80054cc:	4621      	mov	r1, r4
 80054ce:	4640      	mov	r0, r8
 80054d0:	f7ff fee2 	bl	8005298 <_printf_common>
 80054d4:	3001      	adds	r0, #1
 80054d6:	d14c      	bne.n	8005572 <_printf_i+0x1fe>
 80054d8:	f04f 30ff 	mov.w	r0, #4294967295
 80054dc:	b004      	add	sp, #16
 80054de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054e2:	4835      	ldr	r0, [pc, #212]	; (80055b8 <_printf_i+0x244>)
 80054e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80054e8:	6829      	ldr	r1, [r5, #0]
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80054f0:	6029      	str	r1, [r5, #0]
 80054f2:	061d      	lsls	r5, r3, #24
 80054f4:	d514      	bpl.n	8005520 <_printf_i+0x1ac>
 80054f6:	07df      	lsls	r7, r3, #31
 80054f8:	bf44      	itt	mi
 80054fa:	f043 0320 	orrmi.w	r3, r3, #32
 80054fe:	6023      	strmi	r3, [r4, #0]
 8005500:	b91e      	cbnz	r6, 800550a <_printf_i+0x196>
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f023 0320 	bic.w	r3, r3, #32
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	2310      	movs	r3, #16
 800550c:	e7b0      	b.n	8005470 <_printf_i+0xfc>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	f043 0320 	orr.w	r3, r3, #32
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	2378      	movs	r3, #120	; 0x78
 8005518:	4828      	ldr	r0, [pc, #160]	; (80055bc <_printf_i+0x248>)
 800551a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800551e:	e7e3      	b.n	80054e8 <_printf_i+0x174>
 8005520:	0659      	lsls	r1, r3, #25
 8005522:	bf48      	it	mi
 8005524:	b2b6      	uxthmi	r6, r6
 8005526:	e7e6      	b.n	80054f6 <_printf_i+0x182>
 8005528:	4615      	mov	r5, r2
 800552a:	e7bb      	b.n	80054a4 <_printf_i+0x130>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	6826      	ldr	r6, [r4, #0]
 8005530:	6961      	ldr	r1, [r4, #20]
 8005532:	1d18      	adds	r0, r3, #4
 8005534:	6028      	str	r0, [r5, #0]
 8005536:	0635      	lsls	r5, r6, #24
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	d501      	bpl.n	8005540 <_printf_i+0x1cc>
 800553c:	6019      	str	r1, [r3, #0]
 800553e:	e002      	b.n	8005546 <_printf_i+0x1d2>
 8005540:	0670      	lsls	r0, r6, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0x1c8>
 8005544:	8019      	strh	r1, [r3, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	6123      	str	r3, [r4, #16]
 800554a:	4615      	mov	r5, r2
 800554c:	e7ba      	b.n	80054c4 <_printf_i+0x150>
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	1d1a      	adds	r2, r3, #4
 8005552:	602a      	str	r2, [r5, #0]
 8005554:	681d      	ldr	r5, [r3, #0]
 8005556:	6862      	ldr	r2, [r4, #4]
 8005558:	2100      	movs	r1, #0
 800555a:	4628      	mov	r0, r5
 800555c:	f7fa fe38 	bl	80001d0 <memchr>
 8005560:	b108      	cbz	r0, 8005566 <_printf_i+0x1f2>
 8005562:	1b40      	subs	r0, r0, r5
 8005564:	6060      	str	r0, [r4, #4]
 8005566:	6863      	ldr	r3, [r4, #4]
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	2300      	movs	r3, #0
 800556c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005570:	e7a8      	b.n	80054c4 <_printf_i+0x150>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	462a      	mov	r2, r5
 8005576:	4649      	mov	r1, r9
 8005578:	4640      	mov	r0, r8
 800557a:	47d0      	blx	sl
 800557c:	3001      	adds	r0, #1
 800557e:	d0ab      	beq.n	80054d8 <_printf_i+0x164>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	079b      	lsls	r3, r3, #30
 8005584:	d413      	bmi.n	80055ae <_printf_i+0x23a>
 8005586:	68e0      	ldr	r0, [r4, #12]
 8005588:	9b03      	ldr	r3, [sp, #12]
 800558a:	4298      	cmp	r0, r3
 800558c:	bfb8      	it	lt
 800558e:	4618      	movlt	r0, r3
 8005590:	e7a4      	b.n	80054dc <_printf_i+0x168>
 8005592:	2301      	movs	r3, #1
 8005594:	4632      	mov	r2, r6
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d09b      	beq.n	80054d8 <_printf_i+0x164>
 80055a0:	3501      	adds	r5, #1
 80055a2:	68e3      	ldr	r3, [r4, #12]
 80055a4:	9903      	ldr	r1, [sp, #12]
 80055a6:	1a5b      	subs	r3, r3, r1
 80055a8:	42ab      	cmp	r3, r5
 80055aa:	dcf2      	bgt.n	8005592 <_printf_i+0x21e>
 80055ac:	e7eb      	b.n	8005586 <_printf_i+0x212>
 80055ae:	2500      	movs	r5, #0
 80055b0:	f104 0619 	add.w	r6, r4, #25
 80055b4:	e7f5      	b.n	80055a2 <_printf_i+0x22e>
 80055b6:	bf00      	nop
 80055b8:	08005eb1 	.word	0x08005eb1
 80055bc:	08005ec2 	.word	0x08005ec2

080055c0 <_sbrk_r>:
 80055c0:	b538      	push	{r3, r4, r5, lr}
 80055c2:	4d06      	ldr	r5, [pc, #24]	; (80055dc <_sbrk_r+0x1c>)
 80055c4:	2300      	movs	r3, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	602b      	str	r3, [r5, #0]
 80055cc:	f7fb fce2 	bl	8000f94 <_sbrk>
 80055d0:	1c43      	adds	r3, r0, #1
 80055d2:	d102      	bne.n	80055da <_sbrk_r+0x1a>
 80055d4:	682b      	ldr	r3, [r5, #0]
 80055d6:	b103      	cbz	r3, 80055da <_sbrk_r+0x1a>
 80055d8:	6023      	str	r3, [r4, #0]
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	20000298 	.word	0x20000298

080055e0 <__sread>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	f000 fa6e 	bl	8005ac8 <_read_r>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	bfab      	itete	ge
 80055f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80055f2:	89a3      	ldrhlt	r3, [r4, #12]
 80055f4:	181b      	addge	r3, r3, r0
 80055f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80055fa:	bfac      	ite	ge
 80055fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80055fe:	81a3      	strhlt	r3, [r4, #12]
 8005600:	bd10      	pop	{r4, pc}

08005602 <__swrite>:
 8005602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005606:	461f      	mov	r7, r3
 8005608:	898b      	ldrh	r3, [r1, #12]
 800560a:	05db      	lsls	r3, r3, #23
 800560c:	4605      	mov	r5, r0
 800560e:	460c      	mov	r4, r1
 8005610:	4616      	mov	r6, r2
 8005612:	d505      	bpl.n	8005620 <__swrite+0x1e>
 8005614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005618:	2302      	movs	r3, #2
 800561a:	2200      	movs	r2, #0
 800561c:	f000 f9d0 	bl	80059c0 <_lseek_r>
 8005620:	89a3      	ldrh	r3, [r4, #12]
 8005622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800562a:	81a3      	strh	r3, [r4, #12]
 800562c:	4632      	mov	r2, r6
 800562e:	463b      	mov	r3, r7
 8005630:	4628      	mov	r0, r5
 8005632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005636:	f000 b869 	b.w	800570c <_write_r>

0800563a <__sseek>:
 800563a:	b510      	push	{r4, lr}
 800563c:	460c      	mov	r4, r1
 800563e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005642:	f000 f9bd 	bl	80059c0 <_lseek_r>
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	89a3      	ldrh	r3, [r4, #12]
 800564a:	bf15      	itete	ne
 800564c:	6560      	strne	r0, [r4, #84]	; 0x54
 800564e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005656:	81a3      	strheq	r3, [r4, #12]
 8005658:	bf18      	it	ne
 800565a:	81a3      	strhne	r3, [r4, #12]
 800565c:	bd10      	pop	{r4, pc}

0800565e <__sclose>:
 800565e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005662:	f000 b8db 	b.w	800581c <_close_r>
	...

08005668 <__swbuf_r>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	4614      	mov	r4, r2
 800566e:	4605      	mov	r5, r0
 8005670:	b118      	cbz	r0, 800567a <__swbuf_r+0x12>
 8005672:	6983      	ldr	r3, [r0, #24]
 8005674:	b90b      	cbnz	r3, 800567a <__swbuf_r+0x12>
 8005676:	f7ff fb1b 	bl	8004cb0 <__sinit>
 800567a:	4b21      	ldr	r3, [pc, #132]	; (8005700 <__swbuf_r+0x98>)
 800567c:	429c      	cmp	r4, r3
 800567e:	d12b      	bne.n	80056d8 <__swbuf_r+0x70>
 8005680:	686c      	ldr	r4, [r5, #4]
 8005682:	69a3      	ldr	r3, [r4, #24]
 8005684:	60a3      	str	r3, [r4, #8]
 8005686:	89a3      	ldrh	r3, [r4, #12]
 8005688:	071a      	lsls	r2, r3, #28
 800568a:	d52f      	bpl.n	80056ec <__swbuf_r+0x84>
 800568c:	6923      	ldr	r3, [r4, #16]
 800568e:	b36b      	cbz	r3, 80056ec <__swbuf_r+0x84>
 8005690:	6923      	ldr	r3, [r4, #16]
 8005692:	6820      	ldr	r0, [r4, #0]
 8005694:	1ac0      	subs	r0, r0, r3
 8005696:	6963      	ldr	r3, [r4, #20]
 8005698:	b2f6      	uxtb	r6, r6
 800569a:	4283      	cmp	r3, r0
 800569c:	4637      	mov	r7, r6
 800569e:	dc04      	bgt.n	80056aa <__swbuf_r+0x42>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4628      	mov	r0, r5
 80056a4:	f000 f950 	bl	8005948 <_fflush_r>
 80056a8:	bb30      	cbnz	r0, 80056f8 <__swbuf_r+0x90>
 80056aa:	68a3      	ldr	r3, [r4, #8]
 80056ac:	3b01      	subs	r3, #1
 80056ae:	60a3      	str	r3, [r4, #8]
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	1c5a      	adds	r2, r3, #1
 80056b4:	6022      	str	r2, [r4, #0]
 80056b6:	701e      	strb	r6, [r3, #0]
 80056b8:	6963      	ldr	r3, [r4, #20]
 80056ba:	3001      	adds	r0, #1
 80056bc:	4283      	cmp	r3, r0
 80056be:	d004      	beq.n	80056ca <__swbuf_r+0x62>
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	07db      	lsls	r3, r3, #31
 80056c4:	d506      	bpl.n	80056d4 <__swbuf_r+0x6c>
 80056c6:	2e0a      	cmp	r6, #10
 80056c8:	d104      	bne.n	80056d4 <__swbuf_r+0x6c>
 80056ca:	4621      	mov	r1, r4
 80056cc:	4628      	mov	r0, r5
 80056ce:	f000 f93b 	bl	8005948 <_fflush_r>
 80056d2:	b988      	cbnz	r0, 80056f8 <__swbuf_r+0x90>
 80056d4:	4638      	mov	r0, r7
 80056d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056d8:	4b0a      	ldr	r3, [pc, #40]	; (8005704 <__swbuf_r+0x9c>)
 80056da:	429c      	cmp	r4, r3
 80056dc:	d101      	bne.n	80056e2 <__swbuf_r+0x7a>
 80056de:	68ac      	ldr	r4, [r5, #8]
 80056e0:	e7cf      	b.n	8005682 <__swbuf_r+0x1a>
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <__swbuf_r+0xa0>)
 80056e4:	429c      	cmp	r4, r3
 80056e6:	bf08      	it	eq
 80056e8:	68ec      	ldreq	r4, [r5, #12]
 80056ea:	e7ca      	b.n	8005682 <__swbuf_r+0x1a>
 80056ec:	4621      	mov	r1, r4
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f81e 	bl	8005730 <__swsetup_r>
 80056f4:	2800      	cmp	r0, #0
 80056f6:	d0cb      	beq.n	8005690 <__swbuf_r+0x28>
 80056f8:	f04f 37ff 	mov.w	r7, #4294967295
 80056fc:	e7ea      	b.n	80056d4 <__swbuf_r+0x6c>
 80056fe:	bf00      	nop
 8005700:	08005e60 	.word	0x08005e60
 8005704:	08005e80 	.word	0x08005e80
 8005708:	08005e40 	.word	0x08005e40

0800570c <_write_r>:
 800570c:	b538      	push	{r3, r4, r5, lr}
 800570e:	4d07      	ldr	r5, [pc, #28]	; (800572c <_write_r+0x20>)
 8005710:	4604      	mov	r4, r0
 8005712:	4608      	mov	r0, r1
 8005714:	4611      	mov	r1, r2
 8005716:	2200      	movs	r2, #0
 8005718:	602a      	str	r2, [r5, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	f7fa ff2a 	bl	8000574 <_write>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d102      	bne.n	800572a <_write_r+0x1e>
 8005724:	682b      	ldr	r3, [r5, #0]
 8005726:	b103      	cbz	r3, 800572a <_write_r+0x1e>
 8005728:	6023      	str	r3, [r4, #0]
 800572a:	bd38      	pop	{r3, r4, r5, pc}
 800572c:	20000298 	.word	0x20000298

08005730 <__swsetup_r>:
 8005730:	4b32      	ldr	r3, [pc, #200]	; (80057fc <__swsetup_r+0xcc>)
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	681d      	ldr	r5, [r3, #0]
 8005736:	4606      	mov	r6, r0
 8005738:	460c      	mov	r4, r1
 800573a:	b125      	cbz	r5, 8005746 <__swsetup_r+0x16>
 800573c:	69ab      	ldr	r3, [r5, #24]
 800573e:	b913      	cbnz	r3, 8005746 <__swsetup_r+0x16>
 8005740:	4628      	mov	r0, r5
 8005742:	f7ff fab5 	bl	8004cb0 <__sinit>
 8005746:	4b2e      	ldr	r3, [pc, #184]	; (8005800 <__swsetup_r+0xd0>)
 8005748:	429c      	cmp	r4, r3
 800574a:	d10f      	bne.n	800576c <__swsetup_r+0x3c>
 800574c:	686c      	ldr	r4, [r5, #4]
 800574e:	89a3      	ldrh	r3, [r4, #12]
 8005750:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005754:	0719      	lsls	r1, r3, #28
 8005756:	d42c      	bmi.n	80057b2 <__swsetup_r+0x82>
 8005758:	06dd      	lsls	r5, r3, #27
 800575a:	d411      	bmi.n	8005780 <__swsetup_r+0x50>
 800575c:	2309      	movs	r3, #9
 800575e:	6033      	str	r3, [r6, #0]
 8005760:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005764:	81a3      	strh	r3, [r4, #12]
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
 800576a:	e03e      	b.n	80057ea <__swsetup_r+0xba>
 800576c:	4b25      	ldr	r3, [pc, #148]	; (8005804 <__swsetup_r+0xd4>)
 800576e:	429c      	cmp	r4, r3
 8005770:	d101      	bne.n	8005776 <__swsetup_r+0x46>
 8005772:	68ac      	ldr	r4, [r5, #8]
 8005774:	e7eb      	b.n	800574e <__swsetup_r+0x1e>
 8005776:	4b24      	ldr	r3, [pc, #144]	; (8005808 <__swsetup_r+0xd8>)
 8005778:	429c      	cmp	r4, r3
 800577a:	bf08      	it	eq
 800577c:	68ec      	ldreq	r4, [r5, #12]
 800577e:	e7e6      	b.n	800574e <__swsetup_r+0x1e>
 8005780:	0758      	lsls	r0, r3, #29
 8005782:	d512      	bpl.n	80057aa <__swsetup_r+0x7a>
 8005784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005786:	b141      	cbz	r1, 800579a <__swsetup_r+0x6a>
 8005788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800578c:	4299      	cmp	r1, r3
 800578e:	d002      	beq.n	8005796 <__swsetup_r+0x66>
 8005790:	4630      	mov	r0, r6
 8005792:	f7ff fb47 	bl	8004e24 <_free_r>
 8005796:	2300      	movs	r3, #0
 8005798:	6363      	str	r3, [r4, #52]	; 0x34
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80057a0:	81a3      	strh	r3, [r4, #12]
 80057a2:	2300      	movs	r3, #0
 80057a4:	6063      	str	r3, [r4, #4]
 80057a6:	6923      	ldr	r3, [r4, #16]
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	89a3      	ldrh	r3, [r4, #12]
 80057ac:	f043 0308 	orr.w	r3, r3, #8
 80057b0:	81a3      	strh	r3, [r4, #12]
 80057b2:	6923      	ldr	r3, [r4, #16]
 80057b4:	b94b      	cbnz	r3, 80057ca <__swsetup_r+0x9a>
 80057b6:	89a3      	ldrh	r3, [r4, #12]
 80057b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80057bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057c0:	d003      	beq.n	80057ca <__swsetup_r+0x9a>
 80057c2:	4621      	mov	r1, r4
 80057c4:	4630      	mov	r0, r6
 80057c6:	f000 f933 	bl	8005a30 <__smakebuf_r>
 80057ca:	89a0      	ldrh	r0, [r4, #12]
 80057cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80057d0:	f010 0301 	ands.w	r3, r0, #1
 80057d4:	d00a      	beq.n	80057ec <__swsetup_r+0xbc>
 80057d6:	2300      	movs	r3, #0
 80057d8:	60a3      	str	r3, [r4, #8]
 80057da:	6963      	ldr	r3, [r4, #20]
 80057dc:	425b      	negs	r3, r3
 80057de:	61a3      	str	r3, [r4, #24]
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	b943      	cbnz	r3, 80057f6 <__swsetup_r+0xc6>
 80057e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80057e8:	d1ba      	bne.n	8005760 <__swsetup_r+0x30>
 80057ea:	bd70      	pop	{r4, r5, r6, pc}
 80057ec:	0781      	lsls	r1, r0, #30
 80057ee:	bf58      	it	pl
 80057f0:	6963      	ldrpl	r3, [r4, #20]
 80057f2:	60a3      	str	r3, [r4, #8]
 80057f4:	e7f4      	b.n	80057e0 <__swsetup_r+0xb0>
 80057f6:	2000      	movs	r0, #0
 80057f8:	e7f7      	b.n	80057ea <__swsetup_r+0xba>
 80057fa:	bf00      	nop
 80057fc:	20000054 	.word	0x20000054
 8005800:	08005e60 	.word	0x08005e60
 8005804:	08005e80 	.word	0x08005e80
 8005808:	08005e40 	.word	0x08005e40

0800580c <abort>:
 800580c:	b508      	push	{r3, lr}
 800580e:	2006      	movs	r0, #6
 8005810:	f000 f994 	bl	8005b3c <raise>
 8005814:	2001      	movs	r0, #1
 8005816:	f7fb fb61 	bl	8000edc <_exit>
	...

0800581c <_close_r>:
 800581c:	b538      	push	{r3, r4, r5, lr}
 800581e:	4d06      	ldr	r5, [pc, #24]	; (8005838 <_close_r+0x1c>)
 8005820:	2300      	movs	r3, #0
 8005822:	4604      	mov	r4, r0
 8005824:	4608      	mov	r0, r1
 8005826:	602b      	str	r3, [r5, #0]
 8005828:	f7fb fb7f 	bl	8000f2a <_close>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_close_r+0x1a>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_close_r+0x1a>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	20000298 	.word	0x20000298

0800583c <__sflush_r>:
 800583c:	898a      	ldrh	r2, [r1, #12]
 800583e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005842:	4605      	mov	r5, r0
 8005844:	0710      	lsls	r0, r2, #28
 8005846:	460c      	mov	r4, r1
 8005848:	d458      	bmi.n	80058fc <__sflush_r+0xc0>
 800584a:	684b      	ldr	r3, [r1, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	dc05      	bgt.n	800585c <__sflush_r+0x20>
 8005850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc02      	bgt.n	800585c <__sflush_r+0x20>
 8005856:	2000      	movs	r0, #0
 8005858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800585e:	2e00      	cmp	r6, #0
 8005860:	d0f9      	beq.n	8005856 <__sflush_r+0x1a>
 8005862:	2300      	movs	r3, #0
 8005864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005868:	682f      	ldr	r7, [r5, #0]
 800586a:	602b      	str	r3, [r5, #0]
 800586c:	d032      	beq.n	80058d4 <__sflush_r+0x98>
 800586e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	075a      	lsls	r2, r3, #29
 8005874:	d505      	bpl.n	8005882 <__sflush_r+0x46>
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	1ac0      	subs	r0, r0, r3
 800587a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800587c:	b10b      	cbz	r3, 8005882 <__sflush_r+0x46>
 800587e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005880:	1ac0      	subs	r0, r0, r3
 8005882:	2300      	movs	r3, #0
 8005884:	4602      	mov	r2, r0
 8005886:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005888:	6a21      	ldr	r1, [r4, #32]
 800588a:	4628      	mov	r0, r5
 800588c:	47b0      	blx	r6
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	d106      	bne.n	80058a2 <__sflush_r+0x66>
 8005894:	6829      	ldr	r1, [r5, #0]
 8005896:	291d      	cmp	r1, #29
 8005898:	d82c      	bhi.n	80058f4 <__sflush_r+0xb8>
 800589a:	4a2a      	ldr	r2, [pc, #168]	; (8005944 <__sflush_r+0x108>)
 800589c:	40ca      	lsrs	r2, r1
 800589e:	07d6      	lsls	r6, r2, #31
 80058a0:	d528      	bpl.n	80058f4 <__sflush_r+0xb8>
 80058a2:	2200      	movs	r2, #0
 80058a4:	6062      	str	r2, [r4, #4]
 80058a6:	04d9      	lsls	r1, r3, #19
 80058a8:	6922      	ldr	r2, [r4, #16]
 80058aa:	6022      	str	r2, [r4, #0]
 80058ac:	d504      	bpl.n	80058b8 <__sflush_r+0x7c>
 80058ae:	1c42      	adds	r2, r0, #1
 80058b0:	d101      	bne.n	80058b6 <__sflush_r+0x7a>
 80058b2:	682b      	ldr	r3, [r5, #0]
 80058b4:	b903      	cbnz	r3, 80058b8 <__sflush_r+0x7c>
 80058b6:	6560      	str	r0, [r4, #84]	; 0x54
 80058b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058ba:	602f      	str	r7, [r5, #0]
 80058bc:	2900      	cmp	r1, #0
 80058be:	d0ca      	beq.n	8005856 <__sflush_r+0x1a>
 80058c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c4:	4299      	cmp	r1, r3
 80058c6:	d002      	beq.n	80058ce <__sflush_r+0x92>
 80058c8:	4628      	mov	r0, r5
 80058ca:	f7ff faab 	bl	8004e24 <_free_r>
 80058ce:	2000      	movs	r0, #0
 80058d0:	6360      	str	r0, [r4, #52]	; 0x34
 80058d2:	e7c1      	b.n	8005858 <__sflush_r+0x1c>
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	2301      	movs	r3, #1
 80058d8:	4628      	mov	r0, r5
 80058da:	47b0      	blx	r6
 80058dc:	1c41      	adds	r1, r0, #1
 80058de:	d1c7      	bne.n	8005870 <__sflush_r+0x34>
 80058e0:	682b      	ldr	r3, [r5, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d0c4      	beq.n	8005870 <__sflush_r+0x34>
 80058e6:	2b1d      	cmp	r3, #29
 80058e8:	d001      	beq.n	80058ee <__sflush_r+0xb2>
 80058ea:	2b16      	cmp	r3, #22
 80058ec:	d101      	bne.n	80058f2 <__sflush_r+0xb6>
 80058ee:	602f      	str	r7, [r5, #0]
 80058f0:	e7b1      	b.n	8005856 <__sflush_r+0x1a>
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	e7ad      	b.n	8005858 <__sflush_r+0x1c>
 80058fc:	690f      	ldr	r7, [r1, #16]
 80058fe:	2f00      	cmp	r7, #0
 8005900:	d0a9      	beq.n	8005856 <__sflush_r+0x1a>
 8005902:	0793      	lsls	r3, r2, #30
 8005904:	680e      	ldr	r6, [r1, #0]
 8005906:	bf08      	it	eq
 8005908:	694b      	ldreq	r3, [r1, #20]
 800590a:	600f      	str	r7, [r1, #0]
 800590c:	bf18      	it	ne
 800590e:	2300      	movne	r3, #0
 8005910:	eba6 0807 	sub.w	r8, r6, r7
 8005914:	608b      	str	r3, [r1, #8]
 8005916:	f1b8 0f00 	cmp.w	r8, #0
 800591a:	dd9c      	ble.n	8005856 <__sflush_r+0x1a>
 800591c:	6a21      	ldr	r1, [r4, #32]
 800591e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005920:	4643      	mov	r3, r8
 8005922:	463a      	mov	r2, r7
 8005924:	4628      	mov	r0, r5
 8005926:	47b0      	blx	r6
 8005928:	2800      	cmp	r0, #0
 800592a:	dc06      	bgt.n	800593a <__sflush_r+0xfe>
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005932:	81a3      	strh	r3, [r4, #12]
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e78e      	b.n	8005858 <__sflush_r+0x1c>
 800593a:	4407      	add	r7, r0
 800593c:	eba8 0800 	sub.w	r8, r8, r0
 8005940:	e7e9      	b.n	8005916 <__sflush_r+0xda>
 8005942:	bf00      	nop
 8005944:	20400001 	.word	0x20400001

08005948 <_fflush_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	690b      	ldr	r3, [r1, #16]
 800594c:	4605      	mov	r5, r0
 800594e:	460c      	mov	r4, r1
 8005950:	b913      	cbnz	r3, 8005958 <_fflush_r+0x10>
 8005952:	2500      	movs	r5, #0
 8005954:	4628      	mov	r0, r5
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	b118      	cbz	r0, 8005962 <_fflush_r+0x1a>
 800595a:	6983      	ldr	r3, [r0, #24]
 800595c:	b90b      	cbnz	r3, 8005962 <_fflush_r+0x1a>
 800595e:	f7ff f9a7 	bl	8004cb0 <__sinit>
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <_fflush_r+0x6c>)
 8005964:	429c      	cmp	r4, r3
 8005966:	d11b      	bne.n	80059a0 <_fflush_r+0x58>
 8005968:	686c      	ldr	r4, [r5, #4]
 800596a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0ef      	beq.n	8005952 <_fflush_r+0xa>
 8005972:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005974:	07d0      	lsls	r0, r2, #31
 8005976:	d404      	bmi.n	8005982 <_fflush_r+0x3a>
 8005978:	0599      	lsls	r1, r3, #22
 800597a:	d402      	bmi.n	8005982 <_fflush_r+0x3a>
 800597c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800597e:	f7ff fa47 	bl	8004e10 <__retarget_lock_acquire_recursive>
 8005982:	4628      	mov	r0, r5
 8005984:	4621      	mov	r1, r4
 8005986:	f7ff ff59 	bl	800583c <__sflush_r>
 800598a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800598c:	07da      	lsls	r2, r3, #31
 800598e:	4605      	mov	r5, r0
 8005990:	d4e0      	bmi.n	8005954 <_fflush_r+0xc>
 8005992:	89a3      	ldrh	r3, [r4, #12]
 8005994:	059b      	lsls	r3, r3, #22
 8005996:	d4dd      	bmi.n	8005954 <_fflush_r+0xc>
 8005998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800599a:	f7ff fa3a 	bl	8004e12 <__retarget_lock_release_recursive>
 800599e:	e7d9      	b.n	8005954 <_fflush_r+0xc>
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <_fflush_r+0x70>)
 80059a2:	429c      	cmp	r4, r3
 80059a4:	d101      	bne.n	80059aa <_fflush_r+0x62>
 80059a6:	68ac      	ldr	r4, [r5, #8]
 80059a8:	e7df      	b.n	800596a <_fflush_r+0x22>
 80059aa:	4b04      	ldr	r3, [pc, #16]	; (80059bc <_fflush_r+0x74>)
 80059ac:	429c      	cmp	r4, r3
 80059ae:	bf08      	it	eq
 80059b0:	68ec      	ldreq	r4, [r5, #12]
 80059b2:	e7da      	b.n	800596a <_fflush_r+0x22>
 80059b4:	08005e60 	.word	0x08005e60
 80059b8:	08005e80 	.word	0x08005e80
 80059bc:	08005e40 	.word	0x08005e40

080059c0 <_lseek_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d07      	ldr	r5, [pc, #28]	; (80059e0 <_lseek_r+0x20>)
 80059c4:	4604      	mov	r4, r0
 80059c6:	4608      	mov	r0, r1
 80059c8:	4611      	mov	r1, r2
 80059ca:	2200      	movs	r2, #0
 80059cc:	602a      	str	r2, [r5, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	f7fb fad2 	bl	8000f78 <_lseek>
 80059d4:	1c43      	adds	r3, r0, #1
 80059d6:	d102      	bne.n	80059de <_lseek_r+0x1e>
 80059d8:	682b      	ldr	r3, [r5, #0]
 80059da:	b103      	cbz	r3, 80059de <_lseek_r+0x1e>
 80059dc:	6023      	str	r3, [r4, #0]
 80059de:	bd38      	pop	{r3, r4, r5, pc}
 80059e0:	20000298 	.word	0x20000298

080059e4 <__swhatbuf_r>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	460e      	mov	r6, r1
 80059e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059ec:	2900      	cmp	r1, #0
 80059ee:	b096      	sub	sp, #88	; 0x58
 80059f0:	4614      	mov	r4, r2
 80059f2:	461d      	mov	r5, r3
 80059f4:	da08      	bge.n	8005a08 <__swhatbuf_r+0x24>
 80059f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	602a      	str	r2, [r5, #0]
 80059fe:	061a      	lsls	r2, r3, #24
 8005a00:	d410      	bmi.n	8005a24 <__swhatbuf_r+0x40>
 8005a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a06:	e00e      	b.n	8005a26 <__swhatbuf_r+0x42>
 8005a08:	466a      	mov	r2, sp
 8005a0a:	f000 f8b3 	bl	8005b74 <_fstat_r>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	dbf1      	blt.n	80059f6 <__swhatbuf_r+0x12>
 8005a12:	9a01      	ldr	r2, [sp, #4]
 8005a14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005a18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005a1c:	425a      	negs	r2, r3
 8005a1e:	415a      	adcs	r2, r3
 8005a20:	602a      	str	r2, [r5, #0]
 8005a22:	e7ee      	b.n	8005a02 <__swhatbuf_r+0x1e>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	2000      	movs	r0, #0
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	b016      	add	sp, #88	; 0x58
 8005a2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005a30 <__smakebuf_r>:
 8005a30:	898b      	ldrh	r3, [r1, #12]
 8005a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a34:	079d      	lsls	r5, r3, #30
 8005a36:	4606      	mov	r6, r0
 8005a38:	460c      	mov	r4, r1
 8005a3a:	d507      	bpl.n	8005a4c <__smakebuf_r+0x1c>
 8005a3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a40:	6023      	str	r3, [r4, #0]
 8005a42:	6123      	str	r3, [r4, #16]
 8005a44:	2301      	movs	r3, #1
 8005a46:	6163      	str	r3, [r4, #20]
 8005a48:	b002      	add	sp, #8
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	ab01      	add	r3, sp, #4
 8005a4e:	466a      	mov	r2, sp
 8005a50:	f7ff ffc8 	bl	80059e4 <__swhatbuf_r>
 8005a54:	9900      	ldr	r1, [sp, #0]
 8005a56:	4605      	mov	r5, r0
 8005a58:	4630      	mov	r0, r6
 8005a5a:	f7ff fa4f 	bl	8004efc <_malloc_r>
 8005a5e:	b948      	cbnz	r0, 8005a74 <__smakebuf_r+0x44>
 8005a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a64:	059a      	lsls	r2, r3, #22
 8005a66:	d4ef      	bmi.n	8005a48 <__smakebuf_r+0x18>
 8005a68:	f023 0303 	bic.w	r3, r3, #3
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	81a3      	strh	r3, [r4, #12]
 8005a72:	e7e3      	b.n	8005a3c <__smakebuf_r+0xc>
 8005a74:	4b0d      	ldr	r3, [pc, #52]	; (8005aac <__smakebuf_r+0x7c>)
 8005a76:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a78:	89a3      	ldrh	r3, [r4, #12]
 8005a7a:	6020      	str	r0, [r4, #0]
 8005a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	9b00      	ldr	r3, [sp, #0]
 8005a84:	6163      	str	r3, [r4, #20]
 8005a86:	9b01      	ldr	r3, [sp, #4]
 8005a88:	6120      	str	r0, [r4, #16]
 8005a8a:	b15b      	cbz	r3, 8005aa4 <__smakebuf_r+0x74>
 8005a8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a90:	4630      	mov	r0, r6
 8005a92:	f000 f881 	bl	8005b98 <_isatty_r>
 8005a96:	b128      	cbz	r0, 8005aa4 <__smakebuf_r+0x74>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f023 0303 	bic.w	r3, r3, #3
 8005a9e:	f043 0301 	orr.w	r3, r3, #1
 8005aa2:	81a3      	strh	r3, [r4, #12]
 8005aa4:	89a0      	ldrh	r0, [r4, #12]
 8005aa6:	4305      	orrs	r5, r0
 8005aa8:	81a5      	strh	r5, [r4, #12]
 8005aaa:	e7cd      	b.n	8005a48 <__smakebuf_r+0x18>
 8005aac:	08004c49 	.word	0x08004c49

08005ab0 <__malloc_lock>:
 8005ab0:	4801      	ldr	r0, [pc, #4]	; (8005ab8 <__malloc_lock+0x8>)
 8005ab2:	f7ff b9ad 	b.w	8004e10 <__retarget_lock_acquire_recursive>
 8005ab6:	bf00      	nop
 8005ab8:	2000028c 	.word	0x2000028c

08005abc <__malloc_unlock>:
 8005abc:	4801      	ldr	r0, [pc, #4]	; (8005ac4 <__malloc_unlock+0x8>)
 8005abe:	f7ff b9a8 	b.w	8004e12 <__retarget_lock_release_recursive>
 8005ac2:	bf00      	nop
 8005ac4:	2000028c 	.word	0x2000028c

08005ac8 <_read_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d07      	ldr	r5, [pc, #28]	; (8005ae8 <_read_r+0x20>)
 8005acc:	4604      	mov	r4, r0
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4611      	mov	r1, r2
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	602a      	str	r2, [r5, #0]
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	f7fb fa0a 	bl	8000ef0 <_read>
 8005adc:	1c43      	adds	r3, r0, #1
 8005ade:	d102      	bne.n	8005ae6 <_read_r+0x1e>
 8005ae0:	682b      	ldr	r3, [r5, #0]
 8005ae2:	b103      	cbz	r3, 8005ae6 <_read_r+0x1e>
 8005ae4:	6023      	str	r3, [r4, #0]
 8005ae6:	bd38      	pop	{r3, r4, r5, pc}
 8005ae8:	20000298 	.word	0x20000298

08005aec <_raise_r>:
 8005aec:	291f      	cmp	r1, #31
 8005aee:	b538      	push	{r3, r4, r5, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	460d      	mov	r5, r1
 8005af4:	d904      	bls.n	8005b00 <_raise_r+0x14>
 8005af6:	2316      	movs	r3, #22
 8005af8:	6003      	str	r3, [r0, #0]
 8005afa:	f04f 30ff 	mov.w	r0, #4294967295
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005b02:	b112      	cbz	r2, 8005b0a <_raise_r+0x1e>
 8005b04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b08:	b94b      	cbnz	r3, 8005b1e <_raise_r+0x32>
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f000 f830 	bl	8005b70 <_getpid_r>
 8005b10:	462a      	mov	r2, r5
 8005b12:	4601      	mov	r1, r0
 8005b14:	4620      	mov	r0, r4
 8005b16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b1a:	f000 b817 	b.w	8005b4c <_kill_r>
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d00a      	beq.n	8005b38 <_raise_r+0x4c>
 8005b22:	1c59      	adds	r1, r3, #1
 8005b24:	d103      	bne.n	8005b2e <_raise_r+0x42>
 8005b26:	2316      	movs	r3, #22
 8005b28:	6003      	str	r3, [r0, #0]
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e7e7      	b.n	8005afe <_raise_r+0x12>
 8005b2e:	2400      	movs	r4, #0
 8005b30:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b34:	4628      	mov	r0, r5
 8005b36:	4798      	blx	r3
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e7e0      	b.n	8005afe <_raise_r+0x12>

08005b3c <raise>:
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <raise+0xc>)
 8005b3e:	4601      	mov	r1, r0
 8005b40:	6818      	ldr	r0, [r3, #0]
 8005b42:	f7ff bfd3 	b.w	8005aec <_raise_r>
 8005b46:	bf00      	nop
 8005b48:	20000054 	.word	0x20000054

08005b4c <_kill_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d07      	ldr	r5, [pc, #28]	; (8005b6c <_kill_r+0x20>)
 8005b50:	2300      	movs	r3, #0
 8005b52:	4604      	mov	r4, r0
 8005b54:	4608      	mov	r0, r1
 8005b56:	4611      	mov	r1, r2
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	f7fb f9af 	bl	8000ebc <_kill>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d102      	bne.n	8005b68 <_kill_r+0x1c>
 8005b62:	682b      	ldr	r3, [r5, #0]
 8005b64:	b103      	cbz	r3, 8005b68 <_kill_r+0x1c>
 8005b66:	6023      	str	r3, [r4, #0]
 8005b68:	bd38      	pop	{r3, r4, r5, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000298 	.word	0x20000298

08005b70 <_getpid_r>:
 8005b70:	f7fb b99c 	b.w	8000eac <_getpid>

08005b74 <_fstat_r>:
 8005b74:	b538      	push	{r3, r4, r5, lr}
 8005b76:	4d07      	ldr	r5, [pc, #28]	; (8005b94 <_fstat_r+0x20>)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	4608      	mov	r0, r1
 8005b7e:	4611      	mov	r1, r2
 8005b80:	602b      	str	r3, [r5, #0]
 8005b82:	f7fb f9de 	bl	8000f42 <_fstat>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	d102      	bne.n	8005b90 <_fstat_r+0x1c>
 8005b8a:	682b      	ldr	r3, [r5, #0]
 8005b8c:	b103      	cbz	r3, 8005b90 <_fstat_r+0x1c>
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	bd38      	pop	{r3, r4, r5, pc}
 8005b92:	bf00      	nop
 8005b94:	20000298 	.word	0x20000298

08005b98 <_isatty_r>:
 8005b98:	b538      	push	{r3, r4, r5, lr}
 8005b9a:	4d06      	ldr	r5, [pc, #24]	; (8005bb4 <_isatty_r+0x1c>)
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	4604      	mov	r4, r0
 8005ba0:	4608      	mov	r0, r1
 8005ba2:	602b      	str	r3, [r5, #0]
 8005ba4:	f7fb f9dd 	bl	8000f62 <_isatty>
 8005ba8:	1c43      	adds	r3, r0, #1
 8005baa:	d102      	bne.n	8005bb2 <_isatty_r+0x1a>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b103      	cbz	r3, 8005bb2 <_isatty_r+0x1a>
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	bd38      	pop	{r3, r4, r5, pc}
 8005bb4:	20000298 	.word	0x20000298

08005bb8 <_init>:
 8005bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bba:	bf00      	nop
 8005bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bbe:	bc08      	pop	{r3}
 8005bc0:	469e      	mov	lr, r3
 8005bc2:	4770      	bx	lr

08005bc4 <_fini>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	bf00      	nop
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr
